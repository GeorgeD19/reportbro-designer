{"version":3,"file":"reportbro.js","sources":["webpack:///webpack/bootstrap 5182a52e5bcba4674387","webpack:///./src/utils.js","webpack:///./src/elements/DocElement.js","webpack:///./src/commands/SetValueCmd.js","webpack:///./src/data/Parameter.js","webpack:///./src/PopupWindow.js","webpack:///./src/commands/Command.js","webpack:///./src/container/Band.js","webpack:///./src/data/Style.js","webpack:///./src/menu/MainPanelItem.js","webpack:///./src/Document.js","webpack:///./src/commands/CommandGroupCmd.js","webpack:///./src/commands/AddDeleteDocElementCmd.js","webpack:///./src/container/Container.js","webpack:///./src/panels/StylePanel.js","webpack:///./src/data/DocumentProperties.js","webpack:///./src/elements/TableElement.js","webpack:///./src/elements/TableTextElement.js","webpack:///./src/elements/TextElement.js","webpack:///./src/commands/AddDeleteParameterCmd.js","webpack:///./src/commands/AddDeleteStyleCmd.js","webpack:///./src/commands/MovePanelItemCmd.js","webpack:///./src/elements/FrameElement.js","webpack:///./src/elements/PageBreakElement.js","webpack:///./src/elements/SectionElement.js","webpack:///./src/elements/TableBandElement.js","webpack:///./src/iconfonts/style.css","webpack:///./src/main.css","webpack:///./src/toggle-switch.css","webpack:///./src/main.js","webpack:///./src/ReportBro.js","webpack:///./src/container/Frame.js","webpack:///./src/elements/BarCodeElement.js","webpack:///./src/elements/ImageElement.js","webpack:///./src/elements/LineElement.js","webpack:///./src/elements/SectionBandElement.js","webpack:///./src/menu/MainPanel.js","webpack:///./src/menu/MenuPanel.js","webpack:///./src/panels/BarCodeElementPanel.js","webpack:///./src/panels/DocumentPropertiesPanel.js","webpack:///./src/panels/EmptyDetailPanel.js","webpack:///./src/panels/FrameElementPanel.js","webpack:///./src/panels/ImageElementPanel.js","webpack:///./src/panels/LineElementPanel.js","webpack:///./src/panels/PageBreakElementPanel.js","webpack:///./src/panels/ParameterPanel.js","webpack:///./src/panels/SectionBandElementPanel.js","webpack:///./src/panels/SectionElementPanel.js","webpack:///./src/panels/TableBandElementPanel.js","webpack:///./src/panels/TableElementPanel.js","webpack:///./src/panels/TextElementPanel.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 50);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5182a52e5bcba4674387","String.prototype.reverse = function () { return this.split('').reverse().join(''); };\n\nexport function setInputInteger(el) {\n    el.on('keyup', function() {\n        var nvalue = this.value.reverse().replace(/[^0-9\\-]|\\-(?=.)/g, '').reverse();\n        if (this.value !== nvalue) this.value = nvalue;\n    });\n}\n\nexport function setInputPositiveInteger(el) {\n    el.on('keyup', function() {\n        var nvalue = this.value.replace(/[^0-9]/g, '');\n        if (this.value !== nvalue) this.value = nvalue;\n    });\n}\n\nexport function setInputDecimal(el) {\n    el.on('keyup', function() {\n        var nvalue = this.value.reverse().replace(/[^0-9\\-\\.,]|[\\-](?=.)|[\\.,](?=[0-9]*[\\.,])/g, '').reverse();\n        var className = this.className;\n        var pos = className.indexOf('decimalPlaces');\n        if (pos !== -1) {\n            pos += 13;\n            var pos2 = className.indexOf(' ', pos);\n            var places;\n            if (pos2 !== -1) {\n                places = parseInt(className.substring(pos, pos2), 10);\n            } else {\n                places = parseInt(className.substr(pos), 10);\n            }\n            if (!isNaN(places)) {\n                pos = nvalue.indexOf('.');\n                if (pos === -1) {\n                    pos = nvalue.indexOf(',');\n                }\n                if (pos !== -1 && (nvalue.length - 1 - pos) > places) {\n                    nvalue = nvalue.substring(0, pos + places + 1);\n                }\n            }\n        }\n        if(this.value !== nvalue) this.value = nvalue;\n    });\n}\n\nexport function checkInputDecimal(val, min, max) {\n    let value = parseFloat(val.replace(',', '.'));\n    if (isNaN(value)) {\n        return '' + min;\n    } else if (value < min) {\n        return '' + min;\n    } else if (value > max) {\n        return '' + max;\n    }\n    return val;\n}\n\nexport function convertInputToNumber(val) {\n    if (typeof(val) === 'number') {\n        return val;\n    }\n    if (typeof(val) === 'string' && val !== '') {\n        let rv = parseFloat(val.replace(',', '.'));\n        if (!isNaN(rv)) {\n            return rv;\n        }\n    }\n    return 0;\n}\n\nexport function roundValueToInterval(val, interval) {\n    let tmp = Math.ceil(val / interval) * interval;\n    if ((tmp - val) <= (interval >> 1)) {\n        return tmp;\n    }\n    return tmp - interval;\n}\n\nexport function roundValueToLowerInterval(val, interval) {\n    return Math.floor(val / interval) * interval;\n}\n\nexport function roundValueToUpperInterval(val, interval) {\n    return Math.ceil(val / interval) * interval;\n}\n\nexport function replaceAll(str, oldVal, newVal) {\n    // not the fastest solution but works\n    let ret = str;\n    while (ret.indexOf(oldVal) !== -1) {\n        ret = ret.replace(oldVal, newVal);\n    }\n    return ret;\n}\n\nexport function initColorPicker(el, rb, options) {\n    var allOptions = {\n        showInitial: false,\n        preferredFormat: \"hex\",\n        containerClassName: \"rbroColorContainer\",\n        replacerClassName: \"rbroColorPicker\",\n        showPalette: true,\n        showButtons: false,\n        showSelectionPalette: false,  // disable showing previous selections by user\n        palette: [\n            [\"#000\",\"#444\",\"#666\",\"#999\",\"#ccc\",\"#eee\",\"#f3f3f3\",\"#fff\"],\n            [\"#f00\",\"#f90\",\"#ff0\",\"#0f0\",\"#0ff\",\"#00f\",\"#90f\",\"#f0f\"],\n            [\"#ea9999\",\"#f9cb9c\",\"#ffe599\",\"#b6d7a8\",\"#a2c4c9\",\"#9fc5e8\",\"#b4a7d6\",\"#d5a6bd\"],\n            [\"#e06666\",\"#f6b26b\",\"#ffd966\",\"#93c47d\",\"#76a5af\",\"#6fa8dc\",\"#8e7cc3\",\"#c27ba0\"],\n            [\"#c00\",\"#e69138\",\"#f1c232\",\"#6aa84f\",\"#45818e\",\"#3d85c6\",\"#674ea7\",\"#a64d79\"],\n            [\"#900\",\"#b45f06\",\"#bf9000\",\"#38761d\",\"#134f5c\",\"#0b5394\",\"#351c75\",\"#741b47\"],\n            [\"#600\",\"#783f04\",\"#7f6000\",\"#274e13\",\"#0c343d\",\"#073763\",\"#20124d\",\"#4c1130\"]\n        ],\n        change: function(color) {\n            el.spectrum(\"hide\");\n        },\n        show: function(color) {\n            el.parent().addClass('rbroActive');\n        },\n        hide: function(color) {\n            el.parent().removeClass('rbroActive');\n        }\n    };\n    $.extend( allOptions, options || {} );\n    el.spectrum(allOptions);\n    el.show();  // show original text input\n    el.focus(event => {\n            el.parent().addClass('rbroActive');\n        });\n    el.blur(event => {\n            el.parent().removeClass('rbroActive');\n        });\n}\n\nexport function insertAtCaret(element, text) {\n    if (document.selection) {\n        element.focus();\n        var sel = document.selection.createRange();\n        sel.text = text;\n        element.focus();\n    } else if (element.selectionStart || element.selectionStart === 0) {\n        var startPos = element.selectionStart;\n        var endPos = element.selectionEnd;\n        var scrollTop = element.scrollTop;\n        element.value = element.value.substring(0, startPos) + text + element.value.substring(endPos, element.value.length);\n        element.focus();\n        element.selectionStart = startPos + text.length;\n        element.selectionEnd = startPos + text.length;\n        element.scrollTop = scrollTop;\n    } else {\n        element.value += text;\n        element.focus();\n    }\n}\n\nexport function getDataTransferType(transferType, prefix) {\n    let parts = transferType.split('/');\n    if (parts.length >= 2 && parts[0] == prefix) {\n        return parts[1];\n    }\n    return null;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 0\n// module chunks = 0","import MovePanelItemCmd from '../commands/MovePanelItemCmd';\nimport AddDeleteDocElementCmd from '../commands/AddDeleteDocElementCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Band from '../container/Band';\nimport Parameter from '../data/Parameter';\nimport * as utils from '../utils';\n\n/**\n * Base class for all doc elements.\n * @class\n */\nexport default class DocElement {\n    constructor(name, id, defaultWidth, defaultHeight, rb) {\n        this.rb = rb;\n        this.id = id;\n        this.name = name;\n        this.panelItem = null;\n        this.x = '0';\n        this.y = '0';\n        this.width = '' + defaultWidth;\n        this.height = '' + defaultHeight;\n        this.containerId = null;\n        // in case of frame or band element, this is the container represented by the element\n        this.linkedContainerId = null;\n        this.printIf = '';\n        this.removeEmptyElement = false;\n\n        this.el = null;\n        this.selected = false;\n\n        this.xVal = 0;\n        this.yVal = 0;\n        this.widthVal = 0;\n        this.heightVal = 0;\n        this.zIndex = 0;\n\n        this.errors = [];\n    }\n\n    setInitialData(initialData) {\n        for (let key in initialData) {\n            if (initialData.hasOwnProperty(key) && this.hasOwnProperty(key)) {\n                this[key] = initialData[key];\n            }\n        }\n\n        // make sure x, y, width and height are strings (they are stored as numbers when serialized)\n        this.x = '' + this.x;\n        this.y = '' + this.y;\n        this.width = '' + this.width;\n        this.height = '' + this.height;\n        \n        this.xVal = utils.convertInputToNumber(this.x);\n        this.yVal = utils.convertInputToNumber(this.y);\n        this.widthVal = utils.convertInputToNumber(this.width);\n        this.heightVal = utils.convertInputToNumber(this.height);\n    }\n\n    /**\n     * Called after initialization is finished.\n     */\n    setup(openPanelItem) {\n        let container = this.getContainer();\n        if (container !== null) {\n            // adapt position if new element is outside container\n            let containerSize = container.getContentSize();\n            if (this.xVal + this.widthVal > containerSize.width) {\n                this.xVal = containerSize.width - this.widthVal;\n            }\n            if (this.xVal < 0) {\n                this.xVal = 0;\n            }\n            if (this.yVal + this.heightVal > containerSize.height) {\n                this.yVal = containerSize.height - this.heightVal;\n            }\n            if (this.yVal < 0) {\n                this.yVal = 0;\n            }\n            this.x = '' + this.xVal;\n            this.y = '' + this.yVal;\n        }\n    }\n\n    /**\n     * Register event handlers so element can be selected, dragged and resized.\n     */\n    registerEventHandlers() {\n        this.el\n            .dblclick(event => {\n                this.handleClick(event, true);\n            })\n            .mousedown(event => {\n                this.handleClick(event, false);\n            });\n    }\n\n    /**\n     * Handle mouse click on this element so the element can be selected, dragged and resized.\n     * @param {jQuery.Event} event - browser event object.\n     * @param {Boolean} ignoreSelectedContainer - if true the element will always be selected in case it\n     * was not selected before. Otherwise the element will only be selected if it's container is\n     * not selected (e.g. the frame container when this element is inside a frame).\n     */\n    handleClick(event, ignoreSelectedContainer) {\n        if (!this.rb.isSelectedObject(this.id)) {\n            if (ignoreSelectedContainer || !this.isContainerSelected()) {\n                let allowSelection = true;\n                if (event.shiftKey) {\n                    // do not allow selecting element if one of its children is already selected\n                    let children = [];\n                    this.appendContainerChildren(children);\n                    for (let child of children) {\n                        if (this.rb.isSelectedObject(child.getId())) {\n                            allowSelection = false;\n                            break;\n                        }\n                    }\n                }\n                if (allowSelection) {\n                    this.rb.selectObject(this.id, !event.shiftKey);\n                }\n                event.stopPropagation();\n            }\n        } else {\n            if (event.shiftKey) {\n                this.rb.deselectObject(this.id);\n            } else {\n                this.rb.getDocument().startDrag(event.originalEvent.pageX, event.originalEvent.pageY,\n                    this.id, this.containerId, this.linkedContainerId,\n                    this.getElementType(), DocElement.dragType.element);\n            }\n            event.stopPropagation();\n        }\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Returns highest id of this component including all its child components.\n     * @returns {Number}\n     */\n    getMaxId() {\n        return this.id;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getPanelItem() {\n        return this.panelItem;\n    }\n\n    setPanelItem(panelItem) {\n        this.panelItem = panelItem;\n    }\n\n    getContainerId() {\n        return this.containerId;\n    }\n\n    getContainer() {\n        return this.rb.getDataObject(this.getContainerId());\n    }\n\n    getLinkedContainer() {\n        if (this.linkedContainerId !== null) {\n            return this.rb.getDataObject(this.linkedContainerId);\n        }\n        return null;\n    }\n\n    getContainerContentSize() {\n        let container = this.getContainer();\n        return (container !== null) ? container.getContentSize() : { width: 0, height: 0 };\n    }\n\n    appendToContainer() {\n        let container = this.getContainer();\n        if (container !== null) {\n            container.appendElement(this.el);\n        }\n    }\n\n    isContainerSelected() {\n        let container = this.getContainer();\n        if (container !== null) {\n            return container.isSelected();\n        }\n        return false;\n    }\n\n    appendContainerChildren(elements) {\n        if (this.linkedContainerId !== null) {\n            if (this.panelItem !== null) {\n                let children = this.panelItem.getChildren();\n                for (let child of children) {\n                    if (child.getData() instanceof DocElement) {\n                        elements.push(child.getData());\n                        child.getData().appendContainerChildren(elements);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns absolute position inside document.\n     * @returns {Object} x and y coordinates.\n     */\n    getAbsolutePosition() {\n        let pos = { x: this.xVal, y: this.yVal };\n        let container = this.getContainer();\n        if (container !== null) {\n            let offset = container.getOffset();\n            pos.x += offset.x;\n            pos.y += offset.y;\n        }\n        return pos;\n    }\n\n    /**\n     * Check element bounds within container and adapt position/size if necessary.\n     *\n     * This should be called when an element is resized or moved to another container to guarantee that\n     * the element is not out of bounds.\n     * @param {Number} x - x value of doc element.\n     * @param {Number} y - y value of doc element.\n     * @param {Number} width - width value of doc element.\n     * @param {Number} height - height value of doc element.\n     * @param {Object} containerSize - width and height of container where this doc element belongs to.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    checkBounds(x, y, width, height, containerSize, cmdGroup) {\n        if ((x + width) > containerSize.width) {\n            x = containerSize.width - width;\n        }\n        if (x < 0)  {\n            x = 0;\n        }\n        if ((x + width) > containerSize.width) {\n            width = containerSize.width - x;\n        }\n        if ((y + height) > containerSize.height) {\n            y = containerSize.height - height;\n        }\n        if (y < 0)  {\n            y = 0;\n        }\n        if ((y + height) > containerSize.height) {\n            height = containerSize.height - y;\n        }\n\n        if (x !== this.xVal && this.getXTagId() !== '') {\n            let cmd = new SetValueCmd(this.id, this.getXTagId(), 'x',\n                '' + x, SetValueCmd.type.text, this.rb);\n            cmd.disableSelect();\n            cmdGroup.addCommand(cmd);\n        }\n        if (y !== this.yVal && this.getYTagId() !== '') {\n            let cmd = new SetValueCmd(this.id, this.getYTagId(), 'y',\n                '' + y, SetValueCmd.type.text, this.rb);\n            cmd.disableSelect();\n            cmdGroup.addCommand(cmd);\n        }\n        if (width !== this.widthVal && this.getWidthTagId() !== '') {\n            let cmd = new SetValueCmd(this.id, this.getWidthTagId(), 'width',\n                '' + width, SetValueCmd.type.text, this.rb);\n            cmd.disableSelect();\n            cmdGroup.addCommand(cmd);\n        }\n        if (height !== this.heightVal && this.getHeightTagId() !== '') {\n            let cmd = new SetValueCmd(this.id, this.getHeightTagId(), 'height',\n                '' + height, SetValueCmd.type.text, this.rb);\n            cmd.disableSelect();\n            cmdGroup.addCommand(cmd);\n        }\n\n        let linkedContainer = this.getLinkedContainer();\n        if (linkedContainer !== null && linkedContainer.getPanelItem() !== null) {\n            let linkedContainerSize = { width: width, height: height };\n            for (let child of linkedContainer.getPanelItem().getChildren()) {\n                if (child.getData() instanceof DocElement) {\n                    let docElement = child.getData();\n                    docElement.checkBounds(docElement.getValue('xVal'), docElement.getValue('yVal'),\n                        docElement.getValue('widthVal'), docElement.getValue('heightVal'),\n                        linkedContainerSize, cmdGroup);\n                }\n            }\n        }\n    }\n\n    getValue(field) {\n        return this[field];\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        this[field] = value;\n        if (field === 'x' || field === 'y' || field === 'width' || field === 'height') {\n            this[field + 'Val'] = utils.convertInputToNumber(value);\n            this.updateDisplay();\n        } else if (field === 'containerId') {\n            if (this.el !== null) {\n                // detach dom node from container and then attach it to new container\n                this.el.detach();\n                this.appendToContainer();\n            }\n            if (this.linkedContainerId !== null) {\n                let linkedContainer = this.getLinkedContainer();\n                if (linkedContainer !== null) {\n                    linkedContainer.setParent(this.getContainer());\n                }\n            }\n        } else if (['styleId', 'bold', 'italic', 'underline', 'horizontalAlignment', 'verticalAlignment',\n                'textColor', 'backgroundColor', 'font', 'fontSize', 'lineSpacing', 'borderColor', 'borderWidth',\n                'borderAll', 'borderLeft', 'borderTop', 'borderRight', 'borderBottom',\n                'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom'].indexOf(field) !== -1) {\n\n            this.updateStyle();\n\n            if (['borderWidth', 'borderAll', 'borderLeft', 'borderTop', 'borderRight', 'borderBottom',\n                'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom'].indexOf(field) !== -1) {\n                this.updateDisplay();\n            }\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return [];\n    }\n\n    getElementType() {\n        return DocElement.type.none;\n    }\n\n    setBorderAll(fieldPrefix, value) {\n        this[fieldPrefix + 'borderAll'] = value;\n    }\n\n    updateDisplay() {\n        this.updateDisplayInternal(this.xVal, this.yVal, this.widthVal, this.heightVal);\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(x), top: this.rb.toPixel(y),\n                width: this.rb.toPixel(width), height: this.rb.toPixel(height) };\n            this.el.css(props);\n        }\n    }\n\n    updateStyle() {\n    }\n\n    updateChangedStyle(styleId) {\n        if (this.styleId === styleId) {\n            this.updateStyle();\n        }\n    }\n\n    getDragDiff(diffX, diffY, dragType, gridSize) {\n        let rv = { x: 0, y: 0 };\n        let dragX, dragY;\n        let posX1 = this.xVal;\n        let posY1 = this.yVal;\n        let posX2 = posX1 + this.widthVal;\n        let posY2 = posY1 + this.heightVal;\n        let maxWidth = this.getMaxWidth();\n        const MIN_DRAG_SIZE = 20;\n        if (dragType === DocElement.dragType.element) {\n            dragX = posX1 + diffX;\n            if (gridSize !== 0) {\n                dragX = utils.roundValueToInterval(dragX, gridSize);\n            }\n            dragY = posY1 + diffY;\n            if (gridSize !== 0) {\n                dragY = utils.roundValueToInterval(dragY, gridSize);\n            }\n            rv.x = dragX - posX1;\n            rv.y = dragY - posY1;\n        } else {\n            let containerSize = this.getContainerContentSize();\n            if (dragType === DocElement.dragType.sizerNW || dragType === DocElement.dragType.sizerN || dragType === DocElement.dragType.sizerNE) {\n                dragY = posY1 + diffY;\n                if (gridSize !== 0) {\n                    dragY = utils.roundValueToInterval(dragY, gridSize);\n                }\n                if (dragY > posY2 - MIN_DRAG_SIZE) {\n                    if (gridSize !== 0) {\n                        dragY = utils.roundValueToLowerInterval(posY2 - MIN_DRAG_SIZE, gridSize);\n                    } else {\n                        dragY = posY2 - MIN_DRAG_SIZE;\n                    }\n                } else if (dragY < 0) {\n                    dragY = 0;\n                }\n                rv.y = dragY - posY1;\n            }\n            if (dragType === DocElement.dragType.sizerNE || dragType === DocElement.dragType.sizerE || dragType === DocElement.dragType.sizerSE) {\n                dragX = posX2 + diffX;\n                if (gridSize !== 0) {\n                    dragX = utils.roundValueToInterval(dragX, gridSize);\n                }\n                if (dragX < posX1 + MIN_DRAG_SIZE) {\n                    if (gridSize !== 0) {\n                        dragX = utils.roundValueToUpperInterval(posX1 + MIN_DRAG_SIZE, gridSize);\n                    } else {\n                        dragX = posX1 + MIN_DRAG_SIZE;\n                    }\n                } else if (dragX > maxWidth) {\n                    dragX = maxWidth;\n                }\n                rv.x = dragX - posX2;\n            }\n            if (dragType === DocElement.dragType.sizerSE || dragType === DocElement.dragType.sizerS || dragType === DocElement.dragType.sizerSW) {\n                dragY = posY2 + diffY;\n                if (gridSize !== 0) {\n                    dragY = utils.roundValueToInterval(dragY, gridSize);\n                }\n                if (dragY < posY1 + MIN_DRAG_SIZE) {\n                    if (gridSize !== 0) {\n                        dragY = utils.roundValueToUpperInterval(posY1 + MIN_DRAG_SIZE, gridSize);\n                    } else {\n                        dragY = posY1 + MIN_DRAG_SIZE;\n                    }\n                } else if (dragY > containerSize.height) {\n                    dragY = containerSize.height;\n                }\n                rv.y = dragY - posY2;\n            }\n            if (dragType === DocElement.dragType.sizerSW || dragType === DocElement.dragType.sizerW || dragType === DocElement.dragType.sizerNW) {\n                dragX = posX1 + diffX;\n                if (gridSize !== 0) {\n                    dragX = utils.roundValueToInterval(dragX, gridSize);\n                }\n                if (dragX > posX2 - MIN_DRAG_SIZE) {\n                    if (gridSize !== 0) {\n                        dragX = utils.roundValueToLowerInterval(posX2 - MIN_DRAG_SIZE, gridSize);\n                    } else {\n                        dragX = posX2 - MIN_DRAG_SIZE;\n                    }\n                } else if (dragX < 0) {\n                    dragX = 0;\n                }\n                rv.x = dragX - posX1;\n            }\n        }\n        return rv;\n    }\n\n    updateDrag(diffX, diffY, dragType, dragContainer, cmdGroup) {\n        let posX1 = this.xVal;\n        let posY1 = this.yVal;\n        let posX2 = posX1 + this.widthVal;\n        let posY2 = posY1 + this.heightVal;\n        let maxWidth = this.getMaxWidth();\n        let containerSize = this.getContainerContentSize();\n        if (dragType === DocElement.dragType.element) {\n            posX1 += diffX;\n            posX2 = posX1 + this.widthVal;\n            posY1 += diffY;\n            posY2 = posY1 + this.heightVal;\n        } else {\n            if (dragType === DocElement.dragType.sizerNW || dragType === DocElement.dragType.sizerN ||\n                dragType === DocElement.dragType.sizerNE) {\n                posY1 += diffY;\n            }\n            if (dragType === DocElement.dragType.sizerNE || dragType === DocElement.dragType.sizerE ||\n                dragType === DocElement.dragType.sizerSE) {\n                posX2 += diffX;\n            }\n            if (dragType === DocElement.dragType.sizerSE || dragType === DocElement.dragType.sizerS ||\n                dragType === DocElement.dragType.sizerSW) {\n                posY2 += diffY;\n            }\n            if (dragType === DocElement.dragType.sizerSW || dragType === DocElement.dragType.sizerW ||\n                dragType === DocElement.dragType.sizerNW) {\n                posX1 += diffX;\n            }\n            if (posX1 < 0) {\n                posX1 = 0;\n            }\n            if (posX2 < posX1) {\n                posX2 = posX1;\n            }\n            if (posY1 < 0) {\n                posY1 = 0;\n            }\n            if (posY2 < posY1) {\n                posY2 = posY1;\n            }\n            if (posX2 > maxWidth) {\n                posX2 = maxWidth;\n            }\n            if (posY2 > containerSize.height) {\n                posY2 = containerSize.height;\n            }\n        }\n        let width = posX2 - posX1;\n        let height = posY2 - posY1;\n        if (cmdGroup !== null) {\n            let containerChanged = false;\n            let container = this.getContainer();\n            let containerSize = { width: 0, height: 0};\n            if (dragContainer !== null && dragContainer.getId() !== this.getContainerId()) {\n                containerChanged = true;\n                containerSize = dragContainer.getContentSize();\n                if (container !== null) {\n                    let relativeOffset = dragContainer.getOffsetTo(container);\n                    posX1 -= relativeOffset.x;\n                    posY1 -= relativeOffset.y;\n                }\n            } else {\n                containerSize = container.getContentSize();\n            }\n            if (!containerChanged || dragContainer.isElementAllowed(this.getElementType())) {\n                this.checkBounds(posX1, posY1, width, height, containerSize, cmdGroup);\n\n                if (containerChanged) {\n                    let cmd = new SetValueCmd(this.id, null, 'containerId',\n                        dragContainer.getId(), SetValueCmd.type.internal, this.rb);\n                    cmdGroup.addCommand(cmd);\n                    cmd = new MovePanelItemCmd(this.getPanelItem(), dragContainer.getPanelItem(),\n                        dragContainer.getPanelItem().getChildren().length, this.rb);\n                    cmdGroup.addCommand(cmd);\n                }\n\n                if (cmdGroup.isEmpty()) {\n                    // nothing was changed, make sure displayed element is updated to saved position/size after drag\n                    this.updateDisplay();\n                }\n            } else {\n                this.updateDisplayInternal(this.xVal, this.yVal, this.widthVal, this.heightVal);\n            }\n        } else {\n            this.updateDisplayInternal(posX1, posY1, width, height);\n        }\n    }\n\n    select() {\n        if (this.el !== null) {\n            let elSizerContainer = this.getSizerContainerElement();\n            let sizers = this.getSizers();\n            for (let sizer of sizers) {\n                let sizerVal = sizer;\n                let elSizer = $(`<div class=\"rbroSizer rbroSizer${sizer}\"></div>`)\n                    .mousedown(event => {\n                        this.rb.getDocument().startDrag(event.pageX, event.pageY,\n                            this.id, this.containerId, this.linkedContainerId,\n                            this.getElementType(), DocElement.dragType['sizer' + sizerVal]);\n                        event.stopPropagation();\n                    });\n                elSizerContainer.append(elSizer);\n            }\n            this.el.addClass('rbroSelected');\n            this.el.css('z-index', '999999');\n        }\n        this.selected = true;\n    }\n\n    deselect() {\n        if (this.el !== null) {\n            let elSizerContainer = this.getSizerContainerElement();\n            elSizerContainer.find('.rbroSizer').remove();\n            this.el.css('z-index', this.zIndex);\n            this.el.removeClass('rbroSelected');\n            this.rb.updateIndexes();\n        }\n        this.selected = false;\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n    }\n\n    /**\n     * Returns id for dom element of x value.\n     * @returns {String} Is empty in case doc element does not have x value.\n     */\n    getXTagId() {\n        return '';\n    }\n\n    /**\n     * Returns id for dom element of y value.\n     * @returns {String} Is empty in case doc element does not have y value.\n     */\n    getYTagId() {\n        return '';\n    }\n\n    /**\n     * Returns id for dom element of width value.\n     * @returns {String} Is empty in case doc element does not have width value.\n     */\n    getWidthTagId() {\n        return '';\n    }\n\n    /**\n     * Returns id for dom element of height value.\n     * @returns {String} Is empty in case doc element does not have height value.\n     */\n    getHeightTagId() {\n        return '';\n    }\n\n    hasBorderSettings() {\n        return false;\n    }\n\n    isDraggingAllowed() {\n        return true;\n    }\n\n    /**\n     * Returns true if another element can be dropped into this element (or its corresponding panel item).\n     */\n    isDroppingAllowed() {\n        return true;\n    }\n\n    /**\n     * Returns maximum allowed width of element.\n     * This is needed when the element is resized by dragging so the resized element does not overflow its container.\n     * @returns {Number}.\n     */\n    getMaxWidth() {\n        let containerSize = this.getContainerContentSize();\n        return containerSize.width;\n    }\n\n    createElement() {\n    }\n\n    getElement() {\n        return this.el;\n    }\n\n    getSizerContainerElement() {\n        return this.el;\n    }\n\n    /**\n     * Returns dom node where elements will be added if they are inside this element.\n     * Is null in case this element is not a container element like a frame or a band.\n     * @returns {[Object]} dom node\n     */\n    getContentElement() {\n        return null;\n    }\n\n    /**\n     * Returns all parameters of the data source (which must be an array parameter).\n     * Must be overridden when the element has a data source.\n     * @returns {[Object]} contains the data source name and all parameters of the data source.\n     * Is null in case element does not have a data source.\n     */\n    getDataSource() {\n        return null;\n    }\n\n    /**\n     * Returns all data source parameters of this element and any possible parent elements.\n     * @param {Parameter[]} dataSources - array where the data sources will be appended to.\n     * @param {DocElement} child - optional child element where the method was called from.\n     */\n    getAllDataSources(dataSources, child) {\n        if (this.getElementType() === DocElement.type.table || this.getElementType() == DocElement.type.section) {\n            if (child && child.getValue('bandType') === Band.bandType.content) {\n                let dataSource = this.getDataSource();\n                if (dataSource !== null) {\n                    dataSources.push(dataSource);\n                }\n            }\n        }\n        let panelItem = this.getPanelItem();\n        if (panelItem !== null) {\n            let parentPanelItem = panelItem.getParent();\n            if (parentPanelItem !== null && parentPanelItem.getData() instanceof DocElement) {\n                parentPanelItem.getData().getAllDataSources(dataSources, this);\n            }\n        }\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n    }\n\n    /**\n     * Adds SetValue command to command group parameter in case the specified parameter is used in the\n     * specified object field.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {String} tagId\n     * @param {String} field\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue command will be added to this command group.\n     */\n    addCommandForChangedParameterName(parameter, newParameterName, tagId, field, cmdGroup) {\n        let paramParent = parameter.getParent();\n        let dataSources = [];\n        let paramRef = null;\n        let newParamRef = null;\n        \n        this.getAllDataSources(dataSources, null);\n\n        if (paramParent !== null && paramParent.getValue('type') === Parameter.type.array) {\n            if (dataSources.length > 0 && dataSources[0].parameters.indexOf(parameter) !== -1) {\n                paramRef = '${' + parameter.getName() + '}';\n                newParamRef = '${' + newParameterName + '}';\n            }\n        } else {\n            if (paramParent !== null && paramParent.getValue('type') === Parameter.type.map) {\n                paramRef = '${' + paramParent.getName() + '.' + parameter.getName() + '}';\n                newParamRef = '${' + paramParent.getName() + '.' + newParameterName + '}';\n            } else if (parameter.getValue('type') === Parameter.type.map) {\n                paramRef = '${' + parameter.getName() + '.';\n                newParamRef = '${' + newParameterName + '.';\n            } else {\n                let isDataSourceParam = false;\n                for (let dataSource of dataSources) {\n                    for (let dataSourceParam of dataSource.parameters) {\n                        if (dataSourceParam.getName() === parameter.getName()) {\n                            // the changed parameter has the same name as a used data source parameter, therefor\n                            // we are not going to change the parameter reference because it references the data source parameter\n                            isDataSourceParam = true;\n                            break;\n                        }\n                    }\n                }\n                if (!isDataSourceParam) {\n                    paramRef = '${' + parameter.getName() + '}';\n                    newParamRef = '${' + newParameterName + '}';\n                }\n            }\n        }\n\n        if (paramRef !== null && newParamRef !== null && this.getValue(field).indexOf(paramRef) !== -1) {\n            let cmd = new SetValueCmd(\n                this.id, tagId, field, utils.replaceAll(this.getValue(field), paramRef, newParamRef),\n                SetValueCmd.type.text, this.rb);\n            cmdGroup.addCommand(cmd);\n        }\n    }\n\n    /**\n     * Adds AddDeleteDocElementCmd commands to command group parameter to delete this element and\n     * any possible existing children.\n     * @param {CommandGroupCmd} cmdGroup - AddDeleteDocElementCmd commands will be added to this command group.\n     */\n    addCommandsForDelete(cmdGroup) {\n        let elements = [];\n        this.appendContainerChildren(elements);\n        elements.push(this);\n        for (let element of elements) {\n            let cmd = new AddDeleteDocElementCmd(\n                false, element.getPanelItem().getPanelName(),\n                element.toJS(), element.getId(), element.getContainerId(),\n                element.getPanelItem().getSiblingPosition(), this.rb);\n            cmdGroup.addCommand(cmd);\n        }\n    }\n\n    addChildren(docElements) {\n    }\n\n    addError(error) {\n        this.errors.push(error);\n    }\n\n    clearErrors() {\n        this.errors = [];\n    }\n\n    getErrors() {\n        return this.errors;\n    }\n\n    remove() {\n        if (this.el !== null) {\n            this.el.remove();\n            this.el = null;\n        }\n        if (this.panelItem !== null) {\n            this.panelItem.getParent().removeChild(this.panelItem);\n            this.panelItem = null;\n        }\n    }\n\n    toJS() {\n        let ret = { elementType: this.getElementType() };\n        for (let field of this.getFields()) {\n            if (['x', 'y', 'width', 'height'].indexOf(field) === -1) {\n                ret[field] = this.getValue(field);\n            } else {\n                ret[field] = this.getValue(field + 'Val');\n            }\n        }\n        return ret;\n    }\n\n    toJSON() {\n        return JSON.stringify(this.toJS());\n    }\n}\n\nDocElement.type = {\n    none: 'none',\n    text: 'text',\n    image: 'image',\n    line: 'line',\n    table: 'table',\n    pageBreak: 'page_break',\n    tableText: 'table_text',\n    barCode: 'bar_code',\n    frame: 'frame',\n    section: 'section'\n};\n\nDocElement.dragType = {\n    none: -1,\n    element: 0,\n    sizerN: 1,\n    sizerNE: 2,\n    sizerE: 3,\n    sizerSE: 4,\n    sizerS: 5,\n    sizerSW: 6,\n    sizerW: 7,\n    sizerNW: 8\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/DocElement.js\n// module id = 1\n// module chunks = 0","import Command from './Command';\n\n/**\n * Command to set a single value of a data object.\n * @class\n */\nexport default class SetValueCmd {\n    constructor(objId, tagId, field, value, type, rb) {\n        this.objId = objId;\n        this.tagId = tagId;\n        this.field = field;\n        this.value = value;\n        this.type = type;\n        this.rb = rb;\n\n        let obj = rb.getDataObject(objId);\n        this.oldValue = obj.getValue(field);\n        this.firstExecution = true;\n        this.select = true;\n    }\n\n    getName() {\n        return 'Set value';\n    }\n\n    do() {\n        if (!this.firstExecution && this.select) {\n            this.rb.selectObject(this.objId, true);\n        }\n        this.setValue(this.value);\n        this.firstExecution = false;\n    }\n\n    undo() {\n        if (this.select) {\n            this.rb.selectObject(this.objId, true);\n        }\n        this.setValue(this.oldValue);\n    }\n\n    setValue(value) {\n        let obj = this.rb.getDataObject(this.objId);\n        let detailData = this.rb.getDetailData();\n        let isShown = (detailData !== null && detailData.getId() === this.objId);\n        let elSelector = `#${this.tagId}`;\n        obj.setValue(this.field, value, elSelector, isShown);\n\n        if (this.field === 'name') {\n            $(`#rbro_menu_item_name${this.objId}`).text(value);\n            $(`#rbro_menu_item_name${this.objId}`).attr('title', value);\n            this.rb.notifyEvent(obj, Command.operation.rename);\n        } else {\n            this.rb.notifyEvent(obj, Command.operation.change, this.field);\n        }\n        if (isShown) {\n            if (this.type === SetValueCmd.type.text || this.type === SetValueCmd.type.select) {\n                $(elSelector).val(value);\n            } else if (this.type === SetValueCmd.type.filename) {\n                $(elSelector).text(value);\n                if (value === '') {\n                    $(`#${this.tagId}_container`).addClass('rbroHidden');\n                } else {\n                    $(`#${this.tagId}_container`).removeClass('rbroHidden');\n                }\n            } else if (this.type === SetValueCmd.type.checkbox) {\n                $(elSelector).prop('checked', value);\n            } else if (this.type === SetValueCmd.type.button) {\n                if (value) {\n                    $(elSelector).addClass('rbroButtonActive');\n                } else {\n                    $(elSelector).removeClass('rbroButtonActive');\n                }\n            } else if (this.type === SetValueCmd.type.buttonGroup) {\n                $(elSelector).find('button').removeClass('rbroButtonActive');\n                $(elSelector).find(`button[value=\"${value}\"]`).addClass('rbroButtonActive');\n            } else if (this.type === SetValueCmd.type.color) {\n                $(elSelector).spectrum(\"set\", value);\n            }\n        }\n    }\n\n    /**\n     * Disables selection of the element containing the changed field. By default an element is automatically\n     * selected after one of its fields was changed.\n     */\n    disableSelect() {\n        this.select = false;\n    }\n\n    /**\n     * Returns true if the given command targets the same field. This information can be useful to avoid separate\n     * commands for every keystroke in a text field and generate just one command for the whole changed text instead.\n     * @param {SetValueCmd} newCmd\n     * @returns {boolean}\n     */\n    allowReplace(newCmd) {\n        return (this.type === SetValueCmd.type.text && this.objId === newCmd.objId &&\n            this.tagId === newCmd.tagId && this.field === newCmd.field);\n    }\n}\n\nSetValueCmd.type = {\n    text: 'text',\n    select: 'select',\n    file: 'file',\n    filename: 'filename',\n    checkbox: 'checkbox',\n    button: 'button',\n    buttonGroup: 'buttonGroup',  // one button inside a group of buttons with only one active button\n    color: 'color',\n    internal: 'internal'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/SetValueCmd.js\n// module id = 2\n// module chunks = 0","import Command from '../commands/Command';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport MainPanelItem from '../menu/MainPanelItem';\nimport * as utils from '../utils';\n\n/**\n * Parameter data object. Contains all parameter settings including test data.\n * @class\n */\nexport default class Parameter {\n    constructor(id, initialData, rb) {\n        this.rb = rb;\n        this.id = id;\n        this.name = rb.getLabel('parameter');\n        this.panelItem = null;\n        this.errors = [];\n        \n        this.type = Parameter.type.string;\n        this.arrayItemType = Parameter.type.string;\n        this.eval = !rb.getProperty('adminMode');  // if false value comes from database\n        this.nullable = false;\n        this.pattern = '';\n        this.expression = '';\n        this.testData = '';\n        this.children = [];\n        this.editable = rb.getProperty('adminMode');\n        this.showOnlyNameType = false;\n        this.setInitialData(initialData);\n    }\n\n    setInitialData(initialData) {\n        for (let key in initialData) {\n            if (initialData.hasOwnProperty(key) && this.hasOwnProperty(key)) {\n                this[key] = initialData[key];\n            }\n        }\n        if ('showOnlyNameType' in initialData && initialData['showOnlyNameType']) {\n            this.editable = false;\n        }\n    }\n\n    /**\n     * Called after initialization is finished.\n     */\n    setup() {\n        if (this.type === Parameter.type.array || this.type === Parameter.type.map) {\n            for (let child of this.children) {\n                let parameter = new Parameter(child.id || this.rb.getUniqueId(), child, this.rb);\n                this.rb.addParameter(parameter);\n                let panelItem = new MainPanelItem(\n                    'parameter', this.panelItem, parameter,\n                    { hasChildren: true, showAdd: this.editable, showDelete: this.editable, draggable: true }, this.rb);\n                parameter.setPanelItem(panelItem);\n                this.panelItem.appendChild(panelItem);\n                parameter.setup();\n                this.rb.notifyEvent(parameter, Command.operation.add);\n            }\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'name', 'type', 'arrayItemType', 'eval', 'nullable', 'pattern', 'expression', 'showOnlyNameType', 'testData'];\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Returns highest id of this component including all its child components.\n     * @returns {Number}\n     */\n    getMaxId() {\n        let maxId = this.id;\n        if (this.type === Parameter.type.array || this.type === Parameter.type.map) {\n            for (let child of this.children) {\n                if (child.id > maxId) {\n                    maxId = child.id;\n                }\n            }\n        }\n        return maxId;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getPanelItem() {\n        return this.panelItem;\n    }\n\n    setPanelItem(panelItem) {\n        this.panelItem = panelItem;\n    }\n\n    getValue(field) {\n        return this[field];\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        this[field] = value;\n        if (field === 'type') {\n            if (isShown && value === Parameter.type.date) {\n                $('#rbro_parameter_test_data').attr('placeholder', this.rb.getLabel('parameterTestDataDatePattern'));\n            } else {\n                $('#rbro_parameter_test_data').attr('placeholder', '');\n            }\n        }\n    }\n\n    /**\n     * Returns parent in case parameter is child of a map/array parameter.\n     * @returns {[Parameter]} parent parameter if available, null otherwise.\n     */\n    getParent() {\n        if (this.panelItem !== null && this.panelItem.getParent().getData() instanceof Parameter) {\n            return this.panelItem.getParent().getData();\n        }\n        return null;\n    }\n\n    addError(error) {\n        this.errors.push(error);\n    }\n\n    clearErrors() {\n        this.errors = [];\n    }\n\n    getErrors() {\n        return this.errors;\n    }\n\n    remove() {\n    }\n\n    select() {\n    }\n\n    deselect() {\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_parameter_expression', 'expression', cmdGroup);\n        for (let child of this.getChildren()) {\n            child.addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup);\n        }\n    }\n\n    /**\n     * Adds SetValue command to command group parameter in case the specified parameter is used in the\n     * specified object field.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {String} tagId\n     * @param {String} field\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue command will be added to this command group.\n     */\n    addCommandForChangedParameterName(parameter, newParameterName, tagId, field, cmdGroup) {\n        let paramParent = parameter.getParent();\n        let paramRef = null;\n        let newParamRef = null;\n        if (paramParent !== null && paramParent.getValue('type') === Parameter.type.map) {\n            paramRef = '${' + paramParent.getName() + '.' + parameter.getName() + '}';\n            newParamRef = '${' + paramParent.getName() + '.' + newParameterName + '}';\n        } else if (parameter.getValue('type') === Parameter.type.map) {\n            paramRef = '${' + parameter.getName() + '.';\n            newParamRef = '${' + newParameterName + '.';\n        } else {\n            paramRef = '${' + parameter.getName() + '}';\n            newParamRef = '${' + newParameterName + '}';\n        }\n\n        if (paramRef !== null && newParamRef !== null && this.getValue(field).indexOf(paramRef) !== -1) {\n            let cmd = new SetValueCmd(\n                this.id, tagId, field, utils.replaceAll(this.getValue(field), paramRef, newParamRef),\n                SetValueCmd.type.text, this.rb);\n            cmdGroup.addCommand(cmd);\n        }\n    }\n\n    /**\n     * Update test data for arrays. Adapt field names of list items so test data is still valid when a\n     * parameter of a list item is renamed.\n     * @param {String} oldParameterName\n     * @param {String} newParameterName\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue command will be added to this command group.\n     */\n    addUpdateTestDataCmdForChangedParameter(oldParameter, newParameter, cmdGroup) {\n        if (this.type === Parameter.type.array) {\n            let rows = [];\n            try {\n                let testData = JSON.parse(this.testData);\n                if (Array.isArray(testData)) {\n                    for (let row of testData) {\n                        let itemRow = {};\n                        for (let val in row) {\n                            if (row.hasOwnProperty(val)) {\n                                if (val === oldParameter) {\n                                    itemRow[newParameter] = row[val];\n                                } else {\n                                    itemRow[val] = row[val];\n                                }\n                            }\n                        }\n                        rows.push(itemRow);\n                    }\n                }\n                let testDataStr = JSON.stringify(rows);\n                if (this.testData !== testDataStr) {\n                    let cmd = new SetValueCmd(this.id, 'rbro_parameter_test_data', 'testData',\n                        testDataStr, SetValueCmd.type.text, this.rb);\n                    cmdGroup.addCommand(cmd);\n                }\n            } catch (e) {\n            }\n        }\n    }\n\n    toJS() {\n        let ret = {};\n        for (let field of this.getFields()) {\n            ret[field] = this.getValue(field);\n        }\n        if (this.type === Parameter.type.array || this.type === Parameter.type.map) {\n            let children = [];\n            for (let child of this.panelItem.getChildren()) {\n                children.push(child.getData().toJS());\n            }\n            ret.children = children;\n        }\n        return ret;\n    }\n\n    getChildren() {\n        let children = [];\n        if (this.type === Parameter.type.array || this.type === Parameter.type.map) {\n            for (let child of this.panelItem.getChildren()) {\n                children.push(child.getData());\n            }\n        }\n        return children;\n    }\n\n    /**\n     * In case of map parameter all child parameters are appended, for other parameter types the\n     * parameter itself is appended. Parameters with type array are only added if explicitly\n     * specified in allowedTypes parameter.\n     * Used for parameter popup window.\n     * @param {Object[]} parameters - list where parameter items will be appended to.\n     * @param {String[]} allowedTypes - specify allowed parameter types which will be added to the\n     * parameter list. If not set all parameter types are allowed.\n     */\n    appendParameterItems(parameters, allowedTypes) {\n        if (this.type === Parameter.type.map) {\n            let parametersToAppend = [];\n            if (Array.isArray(allowedTypes)) {\n                for (let child of this.getChildren()) {\n                    if (allowedTypes.indexOf(child.type) !== -1) {\n                        parametersToAppend.push(child);\n                    }\n                }\n            } else {\n                parametersToAppend = this.getChildren();\n            }\n            if (parametersToAppend.length > 0) {\n                parameters.push({\n                    separator: true, id: this.id,\n                    separatorClass: 'rbroParameterGroup', name: this.name });\n            }\n            for (let parameter of parametersToAppend) {\n                let paramName = this.name + '.' + parameter.getName();\n                parameters.push({\n                    name: paramName, nameLowerCase: paramName.toLowerCase(),\n                    id: parameter.getId(), description: '' });\n            }\n        } else if (this.type !== Parameter.type.array) {\n            if (!Array.isArray(allowedTypes) || allowedTypes.indexOf(this.type) !== -1) {\n                parameters.push({\n                    name: this.name, nameLowerCase: this.name.toLowerCase(),\n                    id: this.id, description: '' });\n            }\n        } else if (Array.isArray(allowedTypes) && allowedTypes.indexOf(this.type) !== -1) {\n            // add array parameter only if explicitly specified in allowedTypes\n            parameters.push({\n                name: this.name, nameLowerCase: this.name.toLowerCase(),\n                id: this.id, description: '' });\n        }\n    }\n\n    /**\n     * Appends field parameters of array parameter.\n     * Used for parameter popup window of sum/average expression field.\n     * @param {Object[]} parameters - list where parameter items will be appended to.\n     * @param {String} fieldType - allowed parameter type which will be added to the\n     * parameter list. If empty all parameter types are allowed.\n     */\n    appendFieldParameterItems(parameters, fieldType) {\n        if (this.type === Parameter.type.array) {\n            for (let child of this.panelItem.getChildren()) {\n                let parameter = child.getData();\n                if (!fieldType || parameter.getValue('type') === fieldType) {\n                    parameters.push({ name: this.name + '.' + parameter.getName(), description: '' });\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns test data of array parameter as array.\n     * @param {Boolean} includeFieldInfo - if true a row containing info about the fields will be inserted\n     * in the returned rows (first row).\n     * @returns {[Object[]]} rows of test data. Null in case parameter is not an array.\n     */\n    getTestDataRows(includeFieldInfo) {\n        if (this.type !== Parameter.type.array && this.type !== Parameter.type.simpleArray) {\n            return null;\n        }\n        let fields = [];\n        if (this.type === Parameter.type.simpleArray) {\n            let fieldInfo = { name: 'data', type: this.arrayItemType, allowMultiple: false };\n            fields.push(fieldInfo);\n        } else {\n            for (let child of this.getChildren()) {\n                let fieldInfo = { name: child.getName() };\n                if (child.getValue('type') === Parameter.type.simpleArray) {\n                    fieldInfo.type = child.getValue('arrayItemType');\n                    fieldInfo.allowMultiple = true;\n                    fieldInfo.arraySize = 1;\n                } else {\n                    fieldInfo.type = child.getValue('type');\n                    fieldInfo.allowMultiple = false;\n                }\n                fields.push(fieldInfo);\n            }\n        }\n        let rows = [];\n        if (fields.length > 0) {\n            if (includeFieldInfo) {\n                rows.push(fields);\n            }\n            try {\n                let testData = JSON.parse(this.testData);\n                if (Array.isArray(testData)) {\n                    for (let row of testData) {\n                        let itemRow = {};\n                        let hasData = false;\n                        for (let field of fields) {\n                            if (field.name in row) {\n                                let fieldData = row[field.name];\n                                if((field.allowMultiple && Array.isArray(fieldData)) ||\n                                        (!field.allowMultiple && !Array.isArray(fieldData))) {\n                                    hasData = true;\n                                    itemRow[field.name] = fieldData;\n                                    if (field.allowMultiple && fieldData.length > 0) {\n                                        field.arraySize = fieldData.length;\n                                    }\n                                }\n                            }\n                        }\n                        if (hasData) {\n                            rows.push(itemRow);\n                        }\n                    }\n                }\n            } catch (e) {\n            }\n        }\n        return rows;\n    }\n\n    /**\n     * Removes ids of possible child elements.\n     * @param {Object} data - map containing parameter data.\n     */\n    static removeIds(data) {\n        if (data.children) {\n            for (let child of data.children) {\n                if ('id' in child) {\n                    delete child.id;\n                }\n            }\n        }\n    }\n}\n\nParameter.type = {\n    'none': 'none',\n    'string': 'string',\n    'number': 'number',\n    'boolean': 'boolean',\n    'date': 'date',\n    'image': 'image',\n    'array': 'array',\n    'simpleArray': 'simple_array',\n    'map': 'map',\n    'sum': 'sum',\n    'average': 'average'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/data/Parameter.js\n// module id = 3\n// module chunks = 0","import SetValueCmd from './commands/SetValueCmd';\nimport Parameter from './data/Parameter';\nimport * as utils from './utils';\n\n/**\n * Popup window to show selectable items (parameters, patterns, etc.) or to edit test data for array parameter.\n * @class\n */\nexport default class PopupWindow {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.elWindow = null;\n        this.elContent = null;\n        this.input = null;\n        this.objId = null;\n        this.type = null;\n        this.parameters = null;\n        this.visible = false;\n        this.items = null;\n    }\n\n    render() {\n        this.elWindow = $('<div class=\"rbroPopupWindow rbroHidden\"></div>');\n        this.elContent = $('<div class=\"rbroPopupWindowContent\"></div>')\n            .mouseup(event => {\n                // stop propagation so popup window is not closed\n                event.stopPropagation();\n            });\n        this.elWindow.append(this.elContent);\n        let btn = $('<div class=\"rbroButton rbroRoundButton rbroPopupWindowCancel rbroIcon-cancel\"></div>')\n            .click(event => {\n                this.hide();\n            });\n        this.elWindow.append(btn);\n        $('body').append(this.elWindow);\n    }\n\n    /**\n     * Shows a popup window for the given items.\n     * @param {Object[]} items - items to display in the popup window. Each item must contain a name (String), and\n     * optional a description (String) and separator (Boolean). If separator is true the item is not selectable.\n     * @param {String} objId - id of data object where the field belongs to.\n     * @param {String} tagId - id of DOM element in the panel for the given field. In case of empty string there is no\n     * input element available.\n     * @param {String} field - field of data object where selected item will be written into.\n     * @param {PopupWindow.type} type\n     */\n    show(items, objId, tagId, field, type) {\n        let winWidth = $(window).width();\n        let winHeight = $(window).height();\n        let elSearch = null;\n        this.input = (tagId !== '') ? $('#' + tagId) : null;\n        this.objId = objId;\n        this.type = type;\n        this.items = items;\n        this.elContent.empty();\n        $('#rbro_background_overlay').remove();\n        if (type === PopupWindow.type.testData) {\n            this.parameters = items[0];\n            items.splice(0, 1);\n            this.createTestDataTable(items);\n            let width = Math.round(winWidth * 0.8);\n            let height = Math.round(winHeight * 0.8);\n            this.elWindow.css({ left: Math.round((winWidth - width) / 2) + 'px', top: Math.round((winHeight - height) / 2) + $(window).scrollTop() + 'px',\n                    width: width + 'px', height: height + 'px' });\n            $('body').append($('<div id=\"rbro_background_overlay\" class=\"rbroBackgroundOverlay\"></div>'));\n            $('body').addClass('rbroFixedBackground'); // no scroll bars for background while popup is shown\n        } else {\n            if (type === PopupWindow.type.parameterSet || type === PopupWindow.type.parameterAppend) {\n                elSearch = $(`<input class=\"rbroPopupSearch\" placeholder=\"${this.rb.getLabel('parameterSearchPlaceholder')}\">`)\n                    .on('input', event => {\n                        this.filterParameters(elSearch.val());\n                    });\n                this.elContent.append(elSearch);\n            }\n            let ul = $('<ul></ul>')\n                .mousedown(event => {\n                    // prevent default so blur event of input is not triggered,\n                    // otherwise popup window would be closed before click event handler of selected\n                    // item is triggered\n                    event.preventDefault();\n                });\n            for (let item of items) {\n                let li = $('<li></li>');\n                if (item.separator) {\n                    if ((type === PopupWindow.type.parameterSet ||\n                            type === PopupWindow.type.parameterAppend) && item.id) {\n                        li.attr('id', 'parameter_group_' + item.id);\n                    }\n                    let separatorClass = 'rbroPopupItemSeparator';\n                    if (item.separatorClass) {\n                        separatorClass += ' ' + item.separatorClass;\n                    }\n                    li.attr('class', separatorClass);\n                } else {\n                    if ((type === PopupWindow.type.parameterSet ||\n                            type === PopupWindow.type.parameterAppend) && item.id) {\n                        li.attr('id', 'parameter_' + item.id);\n                    }\n                    li.mousedown(event => {\n                        if (type === PopupWindow.type.pattern) {\n                            this.input.val(item.name);\n                            this.input.trigger('input');\n                            this.hide();\n                        } else if (type === PopupWindow.type.parameterSet) {\n                            let paramText = '${' + item.name + '}';\n                            this.input.val(paramText);\n                            this.input.trigger('input');\n                            autosize.update(this.input);\n                            this.hide();\n                        } else if (type === PopupWindow.type.parameterAppend) {\n                            let paramText = '${' + item.name + '}';\n                            utils.insertAtCaret(this.input.get(0), paramText);\n                            autosize.update(this.input);\n                            this.input.trigger('input');\n                            this.hide();\n                        }\n                        event.preventDefault();\n                    });\n                }\n                li.append(`<div class=\"rbroPopupItemHeader\">${item.name}</div>`);\n                if (item.description && item.description !== '') {\n                    li.append(`<div class=\"rbroPopupItemDescription\">${item.description}</div>`);\n                }\n                ul.append(li);\n            }\n            this.elContent.append(ul);\n            let offset = this.input.offset();\n            let top = offset.top;\n            // test if popup window should be shown above or below input field\n            if (top < (winHeight / 2) || top < 300) {\n                // make sure there is enough space for popup below input, otherwise just show it over input field\n                if ((top + this.input.height() + 300) < winHeight) {\n                    top += this.input.height();\n                }\n            } else {\n                top -= 300;\n            }\n            this.elWindow.css({ left: offset.left + 'px', top: top + 'px', width: '400px', height: '300px' });\n        }\n\n        this.elWindow.removeClass('rbroHidden');\n        this.visible = true;\n        if (elSearch !== null) {\n            elSearch.focus();\n        }\n    }\n\n    hide() {\n        if (this.visible) {\n            if (this.input !== null) {\n                this.input.focus();\n            }\n            if (this.type === PopupWindow.type.testData) {\n                let testData = this.getTestData(null, -1);\n                let obj = this.rb.getDataObject(this.objId);\n                let testDataStr = JSON.stringify(testData);\n                if (obj !== null && obj.getValue('testData') !== testDataStr) {\n                    let cmd = new SetValueCmd(this.objId, 'rbro_parameter_test_data', 'testData',\n                        testDataStr, SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n                $('#rbro_background_overlay').remove();\n            }\n            this.elWindow.addClass('rbroHidden');\n            this.elContent.empty();\n            $('body').removeClass('rbroFixedBackground');\n            this.visible = false;\n            this.items = null;\n        }\n    }\n\n    addTestDataRow(tableBody, parameters, testData) {\n        let newRow = $('<tr></tr>');\n        newRow.append($('<td></td>').append($('<div class=\"rbroButton rbroDeleteButton rbroIcon-cancel\"></div>')\n            .click(event => {\n                $(event.target).parent().parent().remove();\n            })\n        ));\n        for (let parameter of parameters) {\n            if (parameter.allowMultiple && parameter.arraySize > 0) {\n                let values = null;\n                if (testData !== null && parameter.name in testData) {\n                    values = testData[parameter.name];\n                }\n                for (let i=0; i < parameter.arraySize; i++) {\n                    let data = '';\n                    if (Array.isArray(values) && i < values.length) {\n                        data = values[i];\n                    }\n                    this.appendColumn(newRow, parameter, data);\n                }\n            } else {\n                let data = '';\n                if (testData !== null && parameter.name in testData) {\n                    data = testData[parameter.name];\n                }\n                if (parameter.allowMultiple && parameter.arraySize > 0 && Array.isArray(data)) {\n                    for (let arrayItem of data) {\n                        this.appendColumn(newRow, parameter, arrayItem);\n                    }\n                } else {\n                    this.appendColumn(newRow, parameter, data);\n                }\n            }\n        }\n        tableBody.append(newRow);\n    }\n\n    appendColumn(row, parameter, data) {\n        let input = $(`<input type=\"text\" value=\"${data}\">`)\n            .focus(event => {\n                input.parent().addClass('rbroHasFocus');\n            })\n            .blur(event => {\n                input.parent().removeClass('rbroHasFocus');\n            });\n\n        if (parameter.type === Parameter.type.number) {\n            utils.setInputDecimal(input);\n        } else if (parameter.type === Parameter.type.date) {\n            input.attr('placeholder', this.rb.getLabel('parameterTestDataDatePattern'));\n        }\n        row.append($('<td></td>').append(input));\n    }\n\n    getTestData(excludeParameter, excludeParameterArrayItemIndex) {\n        let testData = [];\n        let rows = this.elContent.find('tbody').find('tr');\n        for (let row of rows) {\n            let inputs = $(row).find('input');\n            let rowData = {};\n            let i = 0;\n            for (let parameter of this.parameters) {\n                if (parameter.allowMultiple && parameter.arraySize > 0) {\n                    let fieldData = [];\n                    for (let j=0; j < parameter.arraySize; j++) {\n                        let input = inputs.eq(i);\n                        if (parameter !== excludeParameter || j !== excludeParameterArrayItemIndex) {\n                            fieldData.push(input.val().trim());\n                        }\n                        i++;\n                    }\n                    rowData[parameter.name] = fieldData;\n                } else {\n                    let input = inputs.eq(i);\n                    rowData[parameter.name] = input.val().trim();\n                    i++;\n                }\n            }\n            testData.push(rowData);\n        }\n        return testData;\n    }\n\n    createTestDataTable(items) {\n        let div = $('<div></div>');\n        let table = $('<table></table>');\n        let tableHeaderRow = $('<tr></tr>');\n        let tableBody = $('<tbody></tbody>');\n        let i;\n        tableHeaderRow.append('<th></th>');\n        for (let parameter of this.parameters) {\n            if (parameter.allowMultiple) {\n                for (let arrayIndex=0; arrayIndex < parameter.arraySize; arrayIndex++) {\n                    let th = $('<th></th>');\n                    th.append($(`<span>${parameter.name} ${arrayIndex + 1}</span>`));\n                    if (arrayIndex === 0) {\n                        th.append($(`<div class=\"rbroButton rbroRoundButton rbroIcon-plus\"></div>`)\n                            .click(event => {\n                                let testData = this.getTestData(null, -1);\n                                parameter.arraySize++;\n                                this.createTestDataTable(testData);\n                            })\n                        );\n                    } else {\n                        th.append($(`<div class=\"rbroButton rbroRoundButton rbroIcon-minus\"></div>`)\n                            .click(event => {\n                                let testData = this.getTestData(parameter, arrayIndex);\n                                parameter.arraySize--;\n                                this.createTestDataTable(testData);\n                            })\n                        );\n                    }\n                    tableHeaderRow.append(th);\n                }\n            } else {\n                tableHeaderRow.append(`<th>${parameter.name}</th>`);\n            }\n        }\n        table.append($('<thead></thead>').append(tableHeaderRow));\n        if (items.length === 0) {\n            this.addTestDataRow(tableBody, this.parameters, null);\n        }\n        for (i=0; i < items.length; i++) {\n            this.addTestDataRow(tableBody, this.parameters, items[i]);\n        }\n        table.append(tableBody);\n        div.append(table);\n        div.append($(`<div class=\"rbroFullWidthButton\"><div class=\"rbroButton rbroPopupWindowButton\">${this.rb.getLabel('parameterAddTestData')}</div></div>`)\n            .click(event => {\n                this.addTestDataRow(tableBody, this.parameters, null);\n            })\n        );\n        this.elContent.empty().append(div);\n    }\n\n    /**\n     * Filters list of displayed parameter items. Only parameters containing given search value are\n     * shown.\n     * @param {String} searchVal - search value.\n     */\n    filterParameters(searchVal) {\n        let currentGroupId = null;\n        let groupCount = 0;\n        if (this.items !== null) {\n            searchVal = searchVal.toLowerCase();\n            for (let item of this.items) {\n                if (item.separator) {\n                    if (currentGroupId !== null) {\n                        // hide groups (data source parameters and parameter maps) if they do not contain any visible items\n                        if (groupCount > 0) {\n                            $('#parameter_group_' + currentGroupId).show();\n                        } else {\n                            $('#parameter_group_' + currentGroupId).hide();\n                        }\n                    }\n                    currentGroupId = item.id ? item.id : null;\n                    groupCount = 0;\n                } else {\n                    if (item.nameLowerCase.indexOf(searchVal) !== -1) {\n                        $('#parameter_' + item.id).show();\n                        if (currentGroupId !== -1) {\n                            groupCount++;\n                        }\n                    } else {\n                        $('#parameter_' + item.id).hide();\n                    }\n                }\n            }\n            if (currentGroupId !== null) {\n                if (groupCount > 0) {\n                    $('#parameter_group_' + currentGroupId).show();\n                } else {\n                    $('#parameter_group_' + currentGroupId).hide();\n                }\n            }\n        }\n    }\n}\n\nPopupWindow.type = {\n    parameterSet: 0,\n    parameterAppend: 1,\n    pattern: 2,\n    testData: 3\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/PopupWindow.js\n// module id = 4\n// module chunks = 0","/**\n * Interface for all commands.\n * @class\n */\nexport default class Command {\n    getName() {}\n    do() {}\n    undo() {}\n}\n\nCommand.operation = {\n    rename: 'rename',\n    change: 'change',\n    add: 'add',\n    remove: 'remove',\n    move: 'move'\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/Command.js\n// module id = 5\n// module chunks = 0","import Container from './Container';\nimport DocElement from '../elements/DocElement';\nimport Document from '../Document';\nimport * as utils from '../utils';\n\n/**\n * Standard band container for header, content and footer band.\n * @class\n */\nexport default class Band extends Container {\n    constructor(bandType, section, id, name, rb) {\n        super(id, name, rb);\n        this.panelItem = null;\n        this.bandType = bandType;\n        this.section = section;\n        if (!section) {\n            if (bandType === Band.bandType.header) {\n                this.id = '0_header';\n                this.name = rb.getLabel('bandHeader');\n            } else if (bandType === Band.bandType.content) {\n                this.id = '0_content';\n                this.name = rb.getLabel('bandContent');\n                this.allowAllElements = true;\n            } else if (bandType === Band.bandType.footer) {\n                this.id = '0_footer';\n                this.name = rb.getLabel('bandFooter');\n            }\n        }\n        this.el = null;\n    }\n\n    /**\n     * Called after initialization is finished.\n     */\n    setup() {\n        if (!this.section) {\n            this.el = this.rb.getDocument().getElement(this.bandType);\n            this.elContent = this.el;\n        }\n    }\n\n    /**\n     * Returns true if the given element type can be added to this container.\n     * @param {String} elementType\n     */\n    isElementAllowed(elementType) {\n        if (elementType === DocElement.type.tableText) {\n            return false;\n        }\n        return (this.bandType === Band.bandType.content ||\n            (elementType !== DocElement.type.pageBreak && elementType !== DocElement.type.table && elementType !== DocElement.type.section)) &&\n            (!this.section || elementType !== DocElement.type.section);\n    }\n\n    /**\n     * Returns absolute container offset.\n     * @returns {Object} x and y offset coordinates.\n     */\n    getOffset() {\n        let y = 0;\n        if (this.section) {\n            if (this.owner !== null) {\n                let absPos = this.owner.getAbsolutePosition();\n                y = absPos.y;\n            }\n        } else {\n            let docProperties = this.rb.getDocumentProperties();\n            if (this.bandType === Band.bandType.content && docProperties.getValue('header')) {\n                y = utils.convertInputToNumber(docProperties.getValue('headerSize'));\n            } else if (this.bandType === Band.bandType.footer) {\n                y = this.rb.getDocument().getHeight() - utils.convertInputToNumber(docProperties.getValue('footerSize'));\n            }\n        }\n        return { x: 0, y: y };\n    }\n\n    /**\n     * Returns container size.\n     * @returns {Object} width and height of container.\n     */\n    getSize() {\n        let documentProperties = this.rb.getDocumentProperties();\n        let width = documentProperties.getValue('width') -\n            documentProperties.getValue('marginLeftVal') - documentProperties.getValue('marginRightVal');\n        let height = 0;\n        if (this.section) {\n            if (this.owner !== null) {\n                height = this.owner.getValue('heightVal');\n            }\n        } else if (this.bandType === Band.bandType.header) {\n            height = documentProperties.getValue('headerSizeVal');\n        } else if (this.bandType === Band.bandType.content) {\n            height = documentProperties.getValue('height') - documentProperties.getValue('headerSizeVal') -\n                documentProperties.getValue('footerSizeVal') -\n                documentProperties.getValue('marginTopVal') - documentProperties.getValue('marginBottomVal');\n        } else if (this.bandType === Band.bandType.footer) {\n            height = documentProperties.getValue('footerSizeVal');\n        }\n        return { width: width, height: height };\n    }\n    \n    /**\n     * Returns container content size. Same as container size.\n     * @returns {Object} width and height of container.\n     */\n    getContentSize() {\n        return this.getSize();\n    }\n    \n    isInside(posX, posY) {\n        if (this.section && this.owner !== null && this.owner && !this.owner.isVisible()) {\n            return false;\n        }\n        return super.isInside(posX, posY);\n    }\n}\n\nBand.bandType = {\n    header: 'header',\n    content: 'content',\n    footer: 'footer'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/container/Band.js\n// module id = 6\n// module chunks = 0","import * as utils from \"../utils\";\n\n/**\n * Style data object. Contains all text styles (alignment, border, etc.):\n * @class\n */\nexport default class Style {\n    constructor(id, initialData, rb) {\n        this.rb = rb;\n        this.id = id;\n        this.name = rb.getLabel('style');\n        this.panelItem = null;\n        this.errors = [];\n        \n        this.bold = false;\n        this.italic = false;\n        this.underline = false;\n        this.horizontalAlignment = Style.alignment.left;\n        this.verticalAlignment = Style.alignment.top;\n        this.textColor = '#000000';\n        this.backgroundColor = '';\n        this.font = Style.font.courier;\n        this.fontSize = 12;\n        this.lineSpacing = 1;\n        this.borderColor = '#000000';\n        this.borderWidth = '1';\n        this.borderAll = false;\n        this.borderLeft = false;\n        this.borderTop = false;\n        this.borderRight = false;\n        this.borderBottom = false;\n        this.paddingLeft = '';\n        this.paddingTop = '';\n        this.paddingRight = '';\n        this.paddingBottom = '';\n\n        this.borderWidthVal = 0;\n\n        this.setInitialData(initialData);\n    }\n\n    setInitialData(initialData) {\n        for (let key in initialData) {\n            if (initialData.hasOwnProperty(key) && this.hasOwnProperty(key)) {\n                this[key] = initialData[key];\n            }\n        }\n        this.borderWidthVal = utils.convertInputToNumber(this.borderWidth);\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'name', 'bold', 'italic', 'underline', 'horizontalAlignment', 'verticalAlignment',\n            'textColor', 'backgroundColor', 'font', 'fontSize', 'lineSpacing', 'borderColor', 'borderWidth',\n            'borderAll', 'borderLeft', 'borderTop', 'borderRight', 'borderBottom',\n            'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom'];\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getPanelItem() {\n        return this.panelItem;\n    }\n\n    setPanelItem(panelItem) {\n        this.panelItem = panelItem;\n    }\n\n    getValue(field) {\n        return this[field];\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        this[field] = value;\n        if (field.indexOf('border') !== -1) {\n            Style.setBorderValue(this, field, '', value, elSelector, isShown);\n        }\n    }\n\n    setBorderAll(fieldPrefix, value) {\n        this[fieldPrefix + 'borderAll'] = value;\n    }\n\n    addError(error) {\n        this.errors.push(error);\n    }\n\n    clearErrors() {\n        this.errors = [];\n    }\n\n    getErrors() {\n        return this.errors;\n    }\n\n    remove() {\n    }\n\n    select() {\n    }\n\n    deselect() {\n    }\n\n    toJS() {\n        let ret = {};\n        for (let field of this.getFields()) {\n            ret[field] = this.getValue(field);\n        }\n        return ret;\n    }\n\n    /**\n     * Updates GUI for border settings and borderAll setting of object.\n     * @param {Object} obj - document element of which the border settings will be updated.\n     * @param {String} field - border field which was modified.\n     * @param {String} fieldPrefix - prefix of field to reuse style settings for different\n     * sections (e.g. for conditional style).\n     * @param {Boolean} value - new value for specified field.\n     * @param {String} elSelector - jquery selector to specify the DOM element.\n     * @param {Boolean} isShown - true if the specified object is currently visible in the GUI.\n     */\n    static setBorderValue(obj, field, fieldPrefix, value, elSelector, isShown) {\n        if (field === `${fieldPrefix}borderAll`) {\n            obj.borderLeft = obj.borderTop = obj.borderRight = obj.borderBottom = value;\n            if (isShown) {\n                if (value) {\n                    $(elSelector).parent().find('button').addClass('rbroButtonActive');\n                } else {\n                    $(elSelector).parent().find('button').removeClass('rbroButtonActive');\n                }\n            }\n        } else if (field === `${fieldPrefix}borderLeft` || field === `${fieldPrefix}borderTop` ||\n                field === `${fieldPrefix}borderRight` || field === `${fieldPrefix}borderBottom`) {\n            if (obj.getValue(`${fieldPrefix}borderLeft`) && obj.getValue(`${fieldPrefix}borderTop`) &&\n                    obj.getValue(`${fieldPrefix}borderRight`) && obj.getValue(`${fieldPrefix}borderBottom`)) {\n                obj.setBorderAll(fieldPrefix, true);\n                if (isShown) {\n                    $(elSelector).parent().find(`button[value=\"${fieldPrefix}borderAll\"]`).addClass('rbroButtonActive');\n                }\n            } else {\n                obj.setBorderAll(fieldPrefix, false);\n                if (isShown) {\n                    $(elSelector).parent().find(`button[value=\"${fieldPrefix}borderAll\"]`).removeClass('rbroButtonActive');\n                }\n            }\n        }\n    }\n}\n\n// Verdana, Arial\n// ['Courier', 'Courier-Bold', 'Courier-BoldOblique', 'Courier-Oblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-BoldOblique', 'Helvetica-Oblique', 'Symbol', 'Times-Bold', 'Times-BoldItalic', 'Times-Italic', 'Times-Roman', 'ZapfDingbats']\nStyle.font = {\n    courier: 'courier',\n    helvetica: 'helvetica',\n    timesRoman: 'times_roman'\n};\n\nStyle.alignment = {\n    // horizontal\n    left: 'left',\n    center: 'center',\n    right: 'right',\n    justify: 'justify',\n    // vertical\n    top: 'top',\n    middle: 'middle',\n    bottom: 'bottom'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/data/Style.js\n// module id = 7\n// module chunks = 0","import AddDeleteDocElementCmd from '../commands/AddDeleteDocElementCmd';\nimport AddDeleteParameterCmd from '../commands/AddDeleteParameterCmd';\nimport AddDeleteStyleCmd from '../commands/AddDeleteStyleCmd';\nimport CommandGroupCmd from '../commands/CommandGroupCmd';\nimport MovePanelItemCmd from '../commands/MovePanelItemCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Container from '../container/Container';\nimport Parameter from '../data/Parameter';\nimport Style from '../data/Style';\nimport DocElement from '../elements/DocElement';\nimport Document from '../Document';\n\n/**\n * A main panel item either represents a data object (doc element, parameter, etc.) or a container (e.g. page header) for\n * other panel items.\n * @class\n */\nexport default class MainPanelItem {\n    constructor(panelName, parent, data, properties, rb) {\n        this.properties = { hasChildren: false, showAdd: false, showDelete: true, hasDetails: true, visible: true, draggable: false };\n        $.extend( this.properties, properties );\n        this.panelName = panelName;\n        let name = (data !== null) ? data.getName() : '';\n        this.id = (data !== null) ? data.getId() : properties.id;\n        this.parent = parent;\n        this.data = data;\n        this.rb = rb;\n        this.children = [];\n        this.dragEnterCount = 0;\n\n        this.element = $('<li></li>');\n        if (!this.properties.visible) {\n            this.element.addClass('rbroHidden');\n        }\n        let itemDiv = $(`<div id=\"rbro_menu_item${this.id}\" class=\"rbroMenuItem\"></div>`);\n        if (this.properties.draggable) {\n            itemDiv.attr('draggable', 'true');\n            itemDiv.on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');  // without setData dragging does not work in FF\n                event.originalEvent.dataTransfer.effectAllowed = 'move';\n                this.rb.startBrowserDrag('panelItem', null, this.id);\n                // avoid calling dragstart handler for main div which disables dragging for all other elements\n                event.stopPropagation();\n            });\n        }\n        itemDiv\n            .on('dragover', event => {\n                if (this.rb.isBrowserDragActive('panelItem') && this.rb.getBrowserDragId() !== this.id) {\n                    let dropInfo = this.getDropObjectInfo();\n                    if (dropInfo.allowDrop) {\n                        // without preventDefault for dragover event, the drop event is not fired\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }\n            })\n            .on('dragenter', event => {\n                if (this.rb.isBrowserDragActive('panelItem') && this.rb.getBrowserDragId() !== this.id) {\n                    let dropInfo = this.getDropObjectInfo();\n                    if (dropInfo.allowDrop) {\n                        itemDiv.addClass('rbroMenuItemDragOver');\n                        this.dragEnterCount++;\n                        event.preventDefault(); // needed for IE\n                    }\n                }\n            })\n            .on('dragleave', event => {\n                if (this.rb.isBrowserDragActive('panelItem') && this.rb.getBrowserDragId() !== this.id) {\n                    let dropInfo = this.getDropObjectInfo();\n                    if (dropInfo.allowDrop) {\n                        this.dragEnterCount--;\n                        if (this.dragEnterCount === 0) {\n                            itemDiv.removeClass('rbroMenuItemDragOver');\n                        }\n                    }\n                }\n            })\n            .on('drop', event => {\n                if (this.rb.isBrowserDragActive('panelItem') && this.rb.getBrowserDragId() !== this.id) {\n                    let dropInfo = this.getDropObjectInfo();\n                    if (dropInfo.allowDrop) {\n                        this.dragEnterCount--;\n                        itemDiv.removeClass('rbroMenuItemDragOver');\n\n                        let cmdGroup = new CommandGroupCmd('Move panel item', this.rb);\n\n                        let draggedObj = this.rb.getDataObject(this.rb.getBrowserDragId());\n                        if (draggedObj instanceof DocElement && draggedObj.getValue('containerId') !== dropInfo.container.getId()) {\n                            draggedObj.checkBounds(draggedObj.getValue('xVal'), draggedObj.getValue('yVal'),\n                                draggedObj.getValue('widthVal'), draggedObj.getValue('heightVal'),\n                                dropInfo.container.getSize(), cmdGroup);\n\n                            let cmd = new SetValueCmd(draggedObj.getId(), null, 'containerId',\n                                dropInfo.container.getId(), SetValueCmd.type.internal, this.rb);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        let cmd = new MovePanelItemCmd(draggedObj.getPanelItem(), dropInfo.panel, dropInfo.position, this.rb);\n                        cmdGroup.addCommand(cmd);\n                        this.rb.executeCommand(cmdGroup);\n                        event.preventDefault();\n                        return false;\n                    }\n                }\n            });\n        \n        let nameDiv = $(`<div class=\"rbroMenuItemText\"><span id=\"rbro_menu_item_name${this.id}\">${name}</span></div>`);\n        if (this.properties.showAdd) {\n            itemDiv.append($(`<span id=\"rbro_menu_item_add${this.id}\" class=\"rbroButton rbroRoundButton rbroIcon-plus\"></span>`)\n                .click(event => {\n                    if (panelName === 'parameter') {\n                        let cmd = new AddDeleteParameterCmd(true, {}, this.rb.getUniqueId(), this.getId(), -1, this.rb);\n                        this.rb.executeCommand(cmd);\n                    } else if (panelName === 'style') {\n                        let cmd = new AddDeleteStyleCmd(true, {}, this.rb.getUniqueId(), this.getId(), -1, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                    let newItem = this.children[this.children.length - 1];\n                    this.rb.selectObject(newItem.getId(), true);\n                    event.stopPropagation();\n                })\n            );\n        }\n        if (this.properties.showDelete) {\n            itemDiv.append($('<div class=\"rbroButton rbroDeleteButton rbroIcon-cancel\"></div>')\n                .click(event => {\n                    let initialData = this.getData().toJS();\n                    let pos = this.getSiblingPosition();\n                    let cmd = null;\n                    if (panelName === 'parameter') {\n                        cmd = new AddDeleteParameterCmd(false, initialData, this.getId(), this.parent.getId(), pos, this.rb);\n                    } else if (panelName === 'style') {\n                        cmd = new AddDeleteStyleCmd(false, initialData, this.getId(), this.parent.getId(), pos, this.rb);\n                    } else if (panelName === DocElement.type.text || panelName === DocElement.type.image ||\n                            panelName === DocElement.type.line || panelName === DocElement.type.table ||\n                            panelName === DocElement.type.pageBreak ||\n                            panelName === DocElement.type.frame || panelName === DocElement.type.section) {\n                        if (this.getData() instanceof DocElement) {\n                            cmd = new CommandGroupCmd('Delete', this);\n                            this.getData().addCommandsForDelete(cmd);\n                        }\n                    }\n                    if (cmd !== null) {\n                        this.rb.executeCommand(cmd);\n                    }\n                })\n            );\n        }\n        itemDiv.click(event => {\n            // only allow toggle children list of menu item if there are no details or menu item is currently selected\n            if (!this.properties.hasDetails || $(`#rbro_menu_item${this.id}`).hasClass('rbroMenuItemActive')) {\n                let elChildren = $(`#rbro_menu_item_children${this.id}`);\n                if (elChildren.length > 0) {\n                    itemDiv.toggleClass('rbroMenuItemOpen');\n                    elChildren.toggleClass('rbroHidden');\n                }\n            }\n            if (this.properties.hasDetails) {\n                this.rb.selectObject(this.id, true);\n            }\n        });\n        if (this.properties.hasChildren) {\n            itemDiv.addClass('rbroMenuItemNoChildren');\n            nameDiv.append(`<div id=\"rbro_menu_item_children_toggle${this.id}\" class=\"rbroMenuArrow rbroIcon-arrow-right\"></div>`);\n            this.element.append($(`<ul id=\"rbro_menu_item_children${this.id}\" class=\"rbroHidden\"></ul>`));\n        }\n        itemDiv.prepend(nameDiv);\n        this.element.prepend(itemDiv);\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getElement() {\n        return this.element;\n    }\n\n    show() {\n        this.element.removeClass('rbroHidden');\n    }\n\n    hide() {\n        this.element.addClass('rbroHidden');\n    }\n\n    getPanelName() {\n        return this.panelName;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    getData() {\n        return this.data;\n    }\n\n    setData(data) {\n        this.data = data;\n        let name = (data !== null) ? data.getName() : '';\n        $(`#rbro_menu_item_name${this.id}`).text(name);\n    }\n\n    setActive() {\n        $('.rbroMenuItem').removeClass('rbroMenuItemActive');\n        $(`#rbro_menu_item${this.id}`).addClass('rbroMenuItemActive');\n        if (this.properties.hasDetails) {\n            this.rb.setDetailPanel(this.panelName, this.data);\n        }\n    }\n\n    getParentIds() {\n        let ids = [];\n        let parent = this.getParent();\n        while (parent !== null) {\n            ids.push(parent.id);\n            parent = parent.getParent();\n        }\n        return ids;\n    }\n\n    openParentItems() {\n        let parent = this.getParent();\n        while (parent !== null) {\n            parent.open();\n            parent = parent.getParent();\n        }\n    }\n\n    open() {\n        let elChildren = $(`#rbro_menu_item_children${this.getId()}`);\n        if (elChildren.length > 0) {\n            $(`#rbro_menu_item${this.getId()}`).addClass('rbroMenuItemOpen');\n            elChildren.removeClass('rbroHidden');\n        }\n    }\n\n    close() {\n        let elChildren = $(`#rbro_menu_item_children${this.getId()}`);\n        if (elChildren.length > 0) {\n            $(`#rbro_menu_item${this.getId()}`).removeClass('rbroMenuItemOpen');\n            elChildren.addClass('rbroHidden');\n        }\n    }\n\n    appendChild(child) {\n        if (this.children.length === 0) {\n            $(`#rbro_menu_item${this.getId()}`).removeClass('rbroMenuItemNoChildren');\n        }\n        this.children.push(child);\n        $(`#rbro_menu_item_children${this.getId()}`).append(child.getElement());\n    }\n\n    insertChild(pos, child) {\n        if (this.children.length === 0) {\n            $(`#rbro_menu_item${this.getId()}`).removeClass('rbroMenuItemNoChildren');\n        }\n        if (pos !== -1) {\n                this.children.splice(pos, 0, child);\n        } else {\n            this.children.push(child);\n        }\n        let elChildren = $(`#rbro_menu_item_children${this.getId()} > li`);\n        if (pos !== -1 && pos < elChildren.length) {\n            elChildren.eq(pos).before(child.getElement());\n        } else {\n            $(`#rbro_menu_item_children${this.getId()}`).append(child.getElement());\n        }\n    }\n\n    getChildren() {\n        return this.children;\n    }\n\n    removeChild(child) {\n        this.removeChildInternal(child, true);\n    }\n\n    removeChildInternal(child, deleteDomNode) {\n        for (let i=0; i < this.children.length; i++) {\n            if (child.getId() === this.children[i].getId()) {\n                this.children.splice(i, 1);\n                if (deleteDomNode) {\n                    child.getElement().remove();\n                }\n                if (this.children.length === 0) {\n                    $(`#rbro_menu_item${this.getId()}`).addClass('rbroMenuItemNoChildren');\n                }\n                break;\n            }\n        }\n    }\n\n    getSiblingPosition() {\n        if (this.getParent() !== null) {\n            let siblings = this.getParent().getChildren();\n            for (let i=0; i < siblings.length; i++) {\n                if (siblings[i] === this) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Move panel item to another parent.\n     * The panel will be appended to the parent, i.e. added after all children of the parent.\n     * @param {MainPanelItem} parentPanelItem - new parent panel\n     */\n    moveTo(parentPanelItem) {\n        let el = this.element.detach();\n        this.parent.removeChildInternal(this, false);\n        this.parent = parentPanelItem;\n        parentPanelItem.appendChild(this);\n    }\n\n    /**\n     * Move panel item to another parent at given position.\n     * @param {MainPanelItem} parentPanelItem - new parent panel\n     * @param {Number} pos - Position index in children list of new parent where the panel will be inserted.\n     */\n    moveToPosition(parentPanelItem, pos) {\n        let el = this.element.detach();\n        this.parent.removeChildInternal(this, false);\n        this.parent = parentPanelItem;\n        parentPanelItem.insertChild(pos, this);\n    }\n\n    clear() {\n        $(`#rbro_menu_item_children${this.id}`).empty();\n        this.children = [];\n    }\n\n    getDropObjectInfo() {\n        let rv = { allowDrop: false, panel: null, position: -1, container: null };\n        let draggedObj = this.rb.getDataObject(this.rb.getBrowserDragId());\n        if (draggedObj !== null) {\n            let dropIntoParent = false;\n            if (draggedObj instanceof DocElement) {\n                if (this.data instanceof DocElement && this.data.isDroppingAllowed()) {\n                    // get linked container if available (e.g. container of frame element),\n                    // otherwise use the parent container\n                    rv.container = this.data.getLinkedContainer();\n                    if (rv.container === null) {\n                        rv.container = this.data.getContainer();\n                        dropIntoParent = true;\n                    }\n                } else if (this.panelName === 'band') {\n                    rv.container = this.data;\n                }\n                if (rv.container !== null && rv.container.isElementAllowed(draggedObj.getElementType())) {\n                    rv.allowDrop = true;\n                }\n            } else if (draggedObj instanceof Parameter) {\n                if (this.data instanceof Parameter) {\n                    let parent = this.data.getParent();\n                    if (parent !== null) {\n                        if (parent.getValue('type') === Parameter.type.array) {\n                            if (draggedObj.getValue('type') !== Parameter.type.array &&\n                                    draggedObj.getValue('type') !== Parameter.type.map &&\n                                    draggedObj.getValue('type') !== Parameter.type.sum &&\n                                    draggedObj.getValue('type') !== Parameter.type.average) {\n                                rv.allowDrop = true;\n                                dropIntoParent = true;\n                            }\n                        } else if (parent.getValue('type') === Parameter.type.map) {\n                            if (draggedObj.getValue('type') !== Parameter.type.array &&\n                                    draggedObj.getValue('type') !== Parameter.type.map) {\n                                rv.allowDrop = true;\n                                dropIntoParent = true;\n                            }\n                        }\n                    } else {\n                        rv.allowDrop = true;\n                        dropIntoParent = true;\n                    }\n                } else if (this.panelName === 'parameter') {\n                    rv.allowDrop = true;\n                }\n            } else if (draggedObj instanceof Style) {\n                if (this.data instanceof Style) {\n                    rv.allowDrop = true;\n                    dropIntoParent = true;\n                } else if (this.panelName === 'style') {\n                    rv.allowDrop = true;\n                }\n            }\n\n            if (rv.allowDrop) {\n                if (dropIntoParent) {\n                    rv.panel = this.getParent();\n                    rv.position = this.getSiblingPosition() + 1;\n                } else {\n                    rv.panel = this;\n                    rv.position = 0;\n                }\n                if (rv.panel === null || (rv.panel === draggedObj.getPanelItem().getParent() &&\n                        rv.position === draggedObj.getPanelItem().getSiblingPosition())) {\n                        // do not allow drop if object is not moved (same parent and position)\n                        rv.allowDrop = false;\n                    }\n            }\n        }\n        return rv;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/menu/MainPanelItem.js\n// module id = 8\n// module chunks = 0","import AddDeleteDocElementCmd from './commands/AddDeleteDocElementCmd';\nimport Band from './container/Band';\nimport DocumentProperties from './data/DocumentProperties';\nimport DocElement from './elements/DocElement';\nimport * as utils from './utils';\n\n/**\n * Area to display all bands and its doc elements.\n * Further handles dragging of doc elements.\n * @class\n */\nexport default class Document {\n    constructor(rootElement, showGrid, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.elDocContent = null;\n        this.elHeader = null;\n        this.elContent = null;\n        this.elFooter = null;\n        this.elSelectionArea = null;\n        this.gridVisible = showGrid;\n        this.gridSize = 10;\n        this.pdfPreviewExists = false;\n\n        // moving/resizing of element\n        this.dragging = false;\n        this.dragElementType = null;\n        this.dragType = DocElement.dragType.none;\n        this.dragObjectId = null;\n        this.dragContainerId = null;\n        this.dragLinkedContainerId = null;\n        this.dragCurrentContainerId = null;\n        this.dragStartX = 0;\n        this.dragStartY = 0;\n        this.dragCurrentX = 0;\n        this.dragCurrentY = 0;\n        this.dragSnapToGrid = false;\n        this.dragEnterCount = 0;\n\n        // drawing rectangle to select multiple elements\n        this.selectionAreaStarted = false;\n        this.selectionAreaStartX = 0;\n        this.selectionAreaStartY = 0;\n    }\n\n    render() {\n        let panel = $('#rbro_document_panel')\n            .mousedown(event => {\n                if (this.rb.isDocElementSelected() && !event.shiftKey) {\n                    this.rb.deselectAll();\n                }\n                let offset = this.elDocContent.offset();\n                this.startSelectionArea(\n                    event.originalEvent.pageX - offset.left, event.originalEvent.pageY - offset.top);\n            });\n\n        let elDocTabs = $('<div id=\"rbro_document_tabs\" class=\"rbroDocumentTabs\"></div>')\n            .mousedown(event => {\n                // avoid deselection of doc elements when clicking document tab\n                event.stopPropagation();\n            });\n\n        elDocTabs.append(\n            $(`<div id=\"rbro_document_tab_pdf_layout\" class=\"rbroDocumentTab rbroButton rbroTabButton\">\n               ${this.rb.getLabel('documentTabPdfLayout')}</div>`)\n            .click(event => {\n                this.setDocumentTab(Document.tab.pdfLayout);\n            }));\n        let btnPdfPreview = $(\n            `<div id=\"rbro_document_tab_pdf_preview\" class=\"rbroDocumentTab rbroButton rbroTabButton rbroHidden rbroPdfPreview \n                ${this.rb.getProperty('enableSpreadsheet') ? 'rbroXlsxDownload' : ''}\">\n                ${this.rb.getLabel('documentTabPdfPreview')}</div>`)\n            .click(event => {\n                this.setDocumentTab(Document.tab.pdfPreview);\n            });\n        if (this.rb.getProperty('enableSpreadsheet')) {\n            btnPdfPreview.append($(\n                `<span class=\"rbroIcon-xlsx rbroXlsxDownlaodButton\" title=\"${this.rb.getLabel('documentTabXlsxDownload')}\"></span>`)\n                .click(event => { this.rb.downloadSpreadsheet(); }));\n        }\n        btnPdfPreview.append($(\n            `<span class=\"rbroIcon-cancel\" title=\"${this.rb.getLabel('documentTabClose')}\"></span>`)\n            .click(event => { this.closePdfPreviewTab(); }));\n        elDocTabs.append(btnPdfPreview);\n        panel.append(elDocTabs);\n\n        let elDoc = $('<div id=\"rbro_document_pdf\" class=\"rbroDocument rbroDragTarget rbroHidden\"></div>');\n        let docProperties = this.rb.getDocumentProperties();\n        this.elDocContent = $(`<div id=\"rbro_document_content\"\n            class=\"rbroDocumentContent ${this.gridVisible ? 'rbroDocumentGrid' : ''}\"></div>`);\n        this.elHeader = $(`<div id=\"rbro_header\" class=\"rbroDocumentBand rbroElementContainer\"\n            style=\"top: 0px; left: 0px;\"></div>`);\n        this.elHeader.append($(`<div class=\"rbroDocumentBandDescription\">${this.rb.getLabel('bandHeader')}</div>`));\n        this.elDocContent.append(this.elHeader);\n        this.elContent = $('<div id=\"rbro_content\" class=\"rbroDocumentBand rbroElementContainer\"></div>');\n        this.elContent.append($(`<div class=\"rbroDocumentBandDescription\">${this.rb.getLabel('bandContent')}</div>`));\n        this.elDocContent.append(this.elContent);\n        this.elFooter = $(`<div id=\"rbro_footer\" class=\"rbroDocumentBand rbroElementContainer\"\n            style=\"bottom: 0px; left 0px;\"></div>`);\n        this.elFooter.append($(`<div class=\"rbroDocumentBandDescription\">${this.rb.getLabel('bandFooter')}</div>`));\n        this.elDocContent.append(this.elFooter);\n        elDoc.append(this.elDocContent);\n\n        this.elSelectionArea = $('<div id=\"rbro_selection_area\" class=\"rbroHidden rbroSelectionArea\"></div>');\n        this.elDocContent.append(this.elSelectionArea);\n\n        this.initializeEventHandlers();\n\n        elDoc.append('<div id=\"rbro_divider_margin_left\" class=\"rbroDivider rbroDividerMarginLeft\"></div>');\n        elDoc.append('<div id=\"rbro_divider_margin_top\" class=\"rbroDivider rbroDividerMarginTop\"></div>');\n        elDoc.append('<div id=\"rbro_divider_margin_right\" class=\"rbroDivider rbroDividerMarginRight\"></div>');\n        elDoc.append('<div id=\"rbro_divider_margin_bottom\" class=\"rbroDivider rbroDividerMarginBottom\"></div>');\n        elDoc.append('<div id=\"rbro_divider_header\" class=\"rbroDivider rbroDividerHeader\"></div>');\n        elDoc.append('<div id=\"rbro_divider_footer\" class=\"rbroDivider rbroDividerFooter\"></div>');\n        panel.append(elDoc);\n\n        panel.append($('<div id=\"rbro_document_pdf_preview\" class=\"rbroDocumentPreview\"></div>'));\n\n        let size = docProperties.getPageSize();\n        this.updatePageSize(size.width, size.height);\n        this.updateHeader();\n        this.updateFooter();\n        this.updatePageMargins();\n        this.updateDocumentTabs();\n\n        this.setDocumentTab(Document.tab.pdfLayout);\n    }\n\n    initializeEventHandlers() {\n        $('#rbro_document_panel').mousemove(event => {\n            if (this.dragging) {\n                if (this.dragType === DocElement.dragType.element) {\n                    let container = this.getContainer(\n                        event.originalEvent.pageX, event.originalEvent.pageY, this.dragElementType);\n                    let containerId = null;\n                    if (container !== null) {\n                        containerId = container.getId();\n                        if (containerId === this.dragLinkedContainerId) {\n                            // container is the same as the linked container of dragged element, this is\n                            // the case when dragging container elements like frames\n                            container = container.getParent();\n                            containerId = (container !== null) ? container.getId() : null;\n                        }\n                    }\n                    if (containerId !== this.dragCurrentContainerId) {\n                        $('.rbroElementContainer').removeClass('rbroElementDragOver');\n                        if (container !== null && containerId !== this.dragContainerId) {\n                            container.dragOver();\n                        }\n                    }\n                    this.dragCurrentContainerId = containerId;\n                }\n                this.dragCurrentX = event.originalEvent.pageX;\n                this.dragCurrentY = event.originalEvent.pageY;\n                this.dragSnapToGrid = !event.ctrlKey;\n\n                let dragObject = this.rb.getDataObject(this.dragObjectId);\n                if (dragObject !== null) {\n                    let dragDiff = dragObject.getDragDiff(\n                        event.originalEvent.pageX - this.dragStartX,\n                        event.originalEvent.pageY - this.dragStartY, this.dragType,\n                        (this.dragSnapToGrid && this.isGridVisible()) ? this.getGridSize() : 0);\n                    this.rb.updateSelectionDrag(dragDiff.x, dragDiff.y, this.dragType, null, false);\n                }\n            }\n            if (this.selectionAreaStarted) {\n                let offset = this.elDocContent.offset();\n                let area = this.getSelectionArea(\n                    event.originalEvent.pageX - offset.left, event.originalEvent.pageY - offset.top);\n                let props = {\n                    left: this.rb.toPixel(area.left), top: this.rb.toPixel(area.top),\n                    width: this.rb.toPixel(area.width), height: this.rb.toPixel(area.height)};\n                this.elSelectionArea.css(props);\n                if (this.elSelectionArea.hasClass('rbroHidden')) {\n                    // show element after css properties are set\n                    this.elSelectionArea.removeClass('rbroHidden');\n                }\n            }\n        });\n        this.elDocContent.on('dragover', event => {\n            if (this.rb.isBrowserDragActive('docElement')) {\n                let container = this.getContainer(\n                    event.originalEvent.pageX, event.originalEvent.pageY, this.dragElementType);\n                let containerId = (container !== null) ? container.getId() : null;\n                if (containerId !== this.dragContainerId) {\n                    $('.rbroElementContainer').removeClass('rbroElementDragOver');\n                    if (container !== null) {\n                        container.dragOver();\n                    }\n                    this.dragContainerId = containerId;\n                }\n                // without preventDefault for dragover event, the drop event is not fired\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        })\n        .on('dragenter', event => {\n            if (this.rb.isBrowserDragActive('docElement')) {\n                this.dragEnterCount++;\n                event.preventDefault(); // needed for IE\n            }\n        })\n        .on('dragleave', event => {\n            if (this.rb.isBrowserDragActive('docElement')) {\n                this.dragEnterCount--;\n                if (this.dragEnterCount === 0) {\n                    $('.rbroElementContainer').removeClass('rbroElementDragOver');\n                    this.dragContainerId = null;\n                }\n            }\n        })\n        .on('drop', event => {\n            if (this.rb.isBrowserDragActive('docElement')) {\n                $('.rbroElementContainer').removeClass('rbroElementDragOver');\n                let docProperties = this.rb.getDocumentProperties();\n                let container = this.getContainer(\n                    event.originalEvent.pageX, event.originalEvent.pageY, this.dragElementType);\n                while (container !== null && !container.isElementAllowed(this.dragElementType)) {\n                    container = container.getParent();\n                }\n                if (container !== null && container.isElementAllowed(this.dragElementType)) {\n                    let offset = this.elDocContent.offset();\n                    let x = event.originalEvent.pageX - offset.left;\n                    let y = event.originalEvent.pageY - offset.top;\n                    let containerOffset = container.getOffset();\n                    x -= containerOffset.x;\n                    y -= containerOffset.y;\n                    if (!event.ctrlKey && this.rb.getDocument().isGridVisible()) {\n                        let gridSize = this.rb.getDocument().getGridSize();\n                        x = utils.roundValueToInterval(x, gridSize);\n                        y = utils.roundValueToInterval(y, gridSize);\n                    }\n                    let initialData = { x: '' + x, y: '' + y, containerId: container.getId() };\n                    let cmd = new AddDeleteDocElementCmd(true, this.dragElementType, initialData,\n                        this.rb.getUniqueId(), container.getId(), -1, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n                this.rb.updateIndexes();\n                event.preventDefault();\n                return false;\n            }\n        });\n    }\n\n    updatePageSize(width, height) {\n        $('#rbro_document_pdf').css({ width: this.rb.toPixel(width), height: this.rb.toPixel(height) });\n    }\n\n    updatePageMargins() {\n        let docProperties = this.rb.getDocumentProperties();\n        let left = this.rb.toPixel(utils.convertInputToNumber(docProperties.getValue('marginLeft')) - 1);\n        let top = this.rb.toPixel(utils.convertInputToNumber(docProperties.getValue('marginTop')) - 1);\n        let marginRight = utils.convertInputToNumber(docProperties.getValue('marginRight'));\n        let marginBottom = utils.convertInputToNumber(docProperties.getValue('marginBottom'));\n        let right = this.rb.toPixel(marginRight);\n        let bottom = this.rb.toPixel(marginBottom);\n        $('#rbro_divider_margin_left').css('left', left);\n        $('#rbro_divider_margin_top').css('top', top);\n        // hide right/bottom divider in case margin is 0, otherwise divider is still visible\n        // because it is one pixel to the left/top of document border\n        if (marginRight !== 0) {\n            $('#rbro_divider_margin_right').css('right', right).show();\n        } else {\n            $('#rbro_divider_margin_right').hide();\n        }\n        if (marginBottom !== 0) {\n            $('#rbro_divider_margin_bottom').css('bottom', bottom).show();\n        } else {\n            $('#rbro_divider_margin_bottom').hide();\n        }\n        this.elDocContent.css({ left: left, top: top, right: right, bottom: bottom });\n    }\n\n    updateHeader() {\n        let docProperties = this.rb.getDocumentProperties();\n        if (docProperties.getValue('header')) {\n            let headerSize = this.rb.toPixel(docProperties.getValue('headerSize'));\n            this.elHeader.css('height', headerSize);\n            this.elHeader.show();\n            $('#rbro_divider_header').css('top', this.rb.toPixel(\n                utils.convertInputToNumber(docProperties.getValue('marginTop')) +\n                utils.convertInputToNumber(docProperties.getValue('headerSize')) - 1));\n            $('#rbro_divider_header').show();\n            this.elContent.css('top', headerSize);\n        } else {\n            this.elHeader.hide();\n            $('#rbro_divider_header').hide();\n            this.elContent.css('top', this.rb.toPixel(0));\n        }\n    }\n\n    updateFooter() {\n        let docProperties = this.rb.getDocumentProperties();\n        if (docProperties.getValue('footer')) {\n            let footerSize = this.rb.toPixel(docProperties.getValue('footerSize'));\n            this.elFooter.css('height', footerSize);\n            this.elFooter.show();\n            $('#rbro_divider_footer').css('bottom', this.rb.toPixel(\n                utils.convertInputToNumber(docProperties.getValue('marginBottom')) +\n                utils.convertInputToNumber(docProperties.getValue('footerSize'))));\n            $('#rbro_divider_footer').show();\n            this.elContent.css('bottom', footerSize);\n        } else {\n            this.elFooter.hide();\n            $('#rbro_divider_footer').hide();\n            this.elContent.css('bottom', this.rb.toPixel(0));\n        }\n    }\n\n    setDocumentTab(tab) {\n        $('#rbro_document_tabs .rbroDocumentTab').removeClass('rbroActive');\n        // use z-index to show pdf preview instead of show/hide of div because otherwise pdf is reloaded (and generated) again\n        if (tab === Document.tab.pdfLayout) {\n            $('#rbro_document_tab_pdf_layout').addClass('rbroActive');\n            $('#rbro_document_pdf').removeClass('rbroHidden');\n            $('#rbro_document_pdf_preview').css('z-index', '');\n            $('.rbroElementButtons .rbroMenuButton').removeClass('rbroDisabled').prop('draggable', true);\n            $('.rbroActionButtons .rbroActionButton').prop('disabled', false);\n        } else if (this.pdfPreviewExists && tab === Document.tab.pdfPreview) {\n            $('#rbro_document_tab_pdf_preview').addClass('rbroActive');\n            $('#rbro_document_pdf').addClass('rbroHidden');\n            $('#rbro_document_pdf_preview').css('z-index', '1');\n            $('.rbroElementButtons .rbroMenuButton').addClass('rbroDisabled').prop('draggable', false);\n            $('.rbroActionButtons .rbroActionButton').prop('disabled', true);\n        }\n    }\n\n    openPdfPreviewTab(reportUrl) {\n        let pdfObj = '<object data=\"' + reportUrl + '\" type=\"application/pdf\" width=\"100%\" height=\"100%\"></object>';\n        this.pdfPreviewExists = true;\n        $('#rbro_document_pdf_preview').empty();\n        $('#rbro_document_pdf_preview').append(pdfObj);\n        this.setDocumentTab(Document.tab.pdfPreview);\n        this.updateDocumentTabs();\n    }\n\n    closePdfPreviewTab() {\n        this.pdfPreviewExists = false;\n        $('#rbro_document_pdf_preview').empty();\n        this.setDocumentTab(Document.tab.pdfLayout);\n        this.updateDocumentTabs();\n    }\n\n    updateDocumentTabs() {\n        let tabCount = 1;\n        if (this.pdfPreviewExists) {\n            $('#rbro_document_tab_pdf_preview').removeClass('rbroHidden');\n            tabCount++;\n        } else {\n            $('#rbro_document_tab_pdf_preview').addClass('rbroHidden');\n        }\n        if (tabCount > 1) {\n            $('#rbro_document_tabs').show();\n            $('#rbro_document_panel').addClass('rbroHasTabs');\n        } else {\n            $('#rbro_document_tabs').hide();\n            $('#rbro_document_panel').removeClass('rbroHasTabs');\n        }\n    }\n\n    /**\n     * Returns container for given absolute position.\n     * @param {Number} absPosX - absolute x position.\n     * @param {Number} absPosY - absolute y position.\n     * @param {String} elementType - needed for finding container, not all elements are allowed\n     * in all containers (e.g. a frame cannot contain another frame).\n     * @returns {[Container]} Container or null in case no container was found for given position.\n     */\n    getContainer(absPosX, absPosY, elementType) {\n        let offset = this.elDocContent.offset();\n        return this.rb.getContainer(absPosX - offset.left, absPosY - offset.top, elementType);\n    }\n\n    isGridVisible() {\n        return this.gridVisible;\n    }\n\n    toggleGrid() {\n        this.gridVisible = !this.gridVisible;\n        if (this.gridVisible) {\n            this.elDocContent.addClass('rbroDocumentGrid');\n        } else {\n            this.elDocContent.removeClass('rbroDocumentGrid');\n        }\n    }\n\n    getGridSize() {\n        return this.gridSize;\n    }\n\n    getHeight() {\n        return this.elDocContent.height();\n    }\n\n    getElement(band) {\n        if (band === Band.bandType.header) {\n            return this.elHeader;\n        } else if (band === Band.bandType.content) {\n            return this.elContent;\n        } else if (band === Band.bandType.footer) {\n            return this.elFooter;\n        }\n        return null;\n    }\n\n    isDragging() {\n        return this.dragging;\n    }\n\n    isDragged() {\n        return this.dragging && ((this.dragStartX !== this.dragCurrentX) || (this.dragStartY !== this.dragCurrentY));\n    }\n\n    startDrag(x, y, objectId, containerId, linkedContainerId, elementType, dragType) {\n        this.dragging = true;\n        this.dragStartX = this.dragCurrentX = x;\n        this.dragStartY = this.dragCurrentY = y;\n        this.dragElementType = elementType;\n        this.dragType = dragType;\n        this.dragObjectId = objectId;\n        this.dragContainerId = containerId;\n        this.dragLinkedContainerId = linkedContainerId;\n        this.dragCurrentContainerId = null;\n        this.dragSnapToGrid = false;\n    }\n\n    stopDrag() {\n        let diffX = this.dragCurrentX - this.dragStartX;\n        let diffY = this.dragCurrentY - this.dragStartY;\n        let dragObject = this.rb.getDataObject(this.dragObjectId);\n        if (dragObject !== null && (diffX !== 0 || diffY !== 0)) {\n            let container = null;\n            if (this.dragType === DocElement.dragType.element) {\n                container = this.rb.getDataObject(this.dragCurrentContainerId);\n            }\n            let dragDiff = dragObject.getDragDiff(\n                diffX, diffY, this.dragType, (this.dragSnapToGrid && this.isGridVisible()) ? this.getGridSize() : 0);\n            this.rb.updateSelectionDrag(dragDiff.x, dragDiff.y, this.dragType, container, true);\n        } else {\n            this.rb.updateSelectionDrag(0, 0, this.dragType, null, false);\n        }\n        this.dragging = false;\n        this.dragType = DocElement.dragType.none;\n        this.dragObjectId = null;\n        this.dragContainerId = null;\n        this.dragCurrentContainerId = null;\n        $('.rbroElementContainer').removeClass('rbroElementDragOver');\n    }\n\n    startBrowserDrag(dragElementType) {\n        this.dragEnterCount = 0;\n        this.dragObjectId = null;\n        this.dragContainerId = null;\n        this.dragLinkedContainerId = null;\n        this.dragElementType = dragElementType;\n    }\n\n    startSelectionArea(x, y) {\n        this.selectionAreaStarted = true;\n        this.selectionAreaStartX = x;\n        this.selectionAreaStartY = y;\n    }\n\n    stopSelectionArea(x, y, clearSelection) {\n        let area = this.getSelectionArea(x, y);\n        if (area.width > 10 && area.height > 10) {\n            let docElements = this.rb.getDocElements(true);\n            for (let docElement of docElements) {\n                // do not select table text and table band elements\n                if (docElement.isDraggingAllowed()) {\n                    let pos = docElement.getAbsolutePosition();\n                    if (area.left < (pos.x + docElement.getValue('widthVal')) &&\n                        (area.left + area.width) >= pos.x &&\n                        area.top < (pos.y + docElement.getValue('heightVal')) &&\n                        (area.top + area.height) >= pos.y) {\n                        let allowSelect = true;\n                        // do not allow selection of element if its container is already selected,\n                        // e.g. text inside selected frame element\n                        if (docElement.getContainerId()) {\n                            let container = docElement.getContainer();\n                            if (container !== null && container.isSelected()) {\n                                allowSelect = false;\n                            }\n                        }\n                        if (allowSelect) {\n                            this.rb.selectObject(docElement.getId(), clearSelection);\n                            clearSelection = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        this.selectionAreaStarted = false;\n        this.selectionAreaStartX = 0;\n        this.selectionAreaStartY = 0;\n        this.elSelectionArea.addClass('rbroHidden');\n    }\n\n    getSelectionArea(x, y) {\n        let area = {};\n        if (x > this.selectionAreaStartX) {\n            area.left = this.selectionAreaStartX;\n            area.width = x - this.selectionAreaStartX;\n        } else {\n            area.left = x;\n            area.width = this.selectionAreaStartX - x;\n        }\n        if (y > this.selectionAreaStartY) {\n            area.top = this.selectionAreaStartY;\n            area.height = y - this.selectionAreaStartY;\n        } else {\n            area.top = y;\n            area.height = this.selectionAreaStartY - y;\n        }\n        return area;\n    }\n\n    mouseUp(event) {\n        if (this.isDragging()) {\n            this.stopDrag();\n        }\n        if (this.selectionAreaStarted) {\n            let offset = this.elDocContent.offset();\n            this.stopSelectionArea(\n                event.originalEvent.pageX - offset.left,\n                event.originalEvent.pageY - offset.top,\n                !event.shiftKey);\n        }\n    }\n}\n\nDocument.tab = {\n    pdfLayout: 'pdfLayout',\n    pdfPreview: 'pdfPreview'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Document.js\n// module id = 9\n// module chunks = 0","import SetValueCmd from './SetValueCmd';\n\n/**\n * Command container for multiple commands. All commands of this container will be executed in a single do/undo operation.\n * @class\n */\nexport default class CommandGroupCmd {\n    constructor(name, rb) {\n        this.name;\n        this.rb = rb;\n        this.commands = [];\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    do() {\n        for (let i=0; i < this.commands.length; i++) {\n            this.commands[i].do();\n        }\n    }\n\n    undo() {\n        for (let i=this.commands.length - 1; i >= 0; i--) {\n            this.commands[i].undo();\n        }\n    }\n\n    addCommand(cmd) {\n        if (this.commands.length > 0 && cmd instanceof SetValueCmd) {\n            cmd.disableSelect();\n        }\n        this.commands.push(cmd);\n    }\n\n    isEmpty() {\n        return this.commands.length === 0;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/CommandGroupCmd.js\n// module id = 10\n// module chunks = 0","import Command from './Command';\nimport BarCodeElement from '../elements/BarCodeElement';\nimport DocElement from '../elements/DocElement';\nimport FrameElement from '../elements/FrameElement';\nimport ImageElement from '../elements/ImageElement';\nimport LineElement from '../elements/LineElement';\nimport PageBreakElement from '../elements/PageBreakElement';\nimport SectionElement from '../elements/SectionElement';\nimport TableElement from '../elements/TableElement';\nimport TextElement from '../elements/TextElement';\nimport MainPanelItem from '../menu/MainPanelItem';\n\n/**\n * Command to add and delete a doc element.\n * @class\n */\nexport default class AddDeleteDocElementCmd {\n    constructor(add, elementType, initialData, id, parentId, position, rb) {\n        this.add = add;\n        this.elementType = elementType;\n        this.initialData = initialData;\n        this.parentId = parentId;\n        this.position = position;\n        this.rb = rb;\n        this.id = id;\n        this.firstExecution = true;\n    }\n\n    getName() {\n        if (this.add) {\n            return 'Add element';\n        } else {\n            return 'Delete element';\n        }\n    }\n\n    do() {\n        if (this.add) {\n            this.addElement();\n        } else {\n            this.deleteElement();\n        }\n        this.firstExecution = false;\n    }\n\n    undo() {\n        if (this.add) {\n            this.deleteElement();\n        } else {\n            this.addElement();\n        }\n    }\n\n    addElement() {\n        let parent = this.rb.getDataObject(this.parentId);\n        if (parent !== null) {\n            let element = AddDeleteDocElementCmd.createElement(this.id, this.initialData, this.elementType, this.position, true, this.rb);\n            \n            this.rb.notifyEvent(element, Command.operation.add);\n            this.rb.selectObject(this.id, true);\n\n            if (this.add && this.firstExecution) {\n                // in case of add command we serialize initialData on first execution so it contains all data\n                // created during setup (e.g. ids of table bands and table cells for a table)\n                this.initialData = element.toJS();\n            }\n        }\n    }\n\n    deleteElement() {\n        let element = this.rb.getDataObject(this.id);\n        if (element !== null) {\n            this.rb.notifyEvent(element, Command.operation.remove);\n            this.rb.deleteDocElement(element);\n        }\n    }\n\n    static createElement(id, data, elementType, panelPos, openPanelItem, rb) {\n        let element;\n        let properties = { draggable: true };\n        if (elementType === DocElement.type.text) {\n            element = new TextElement(id, data, rb);\n        } else if (elementType === DocElement.type.line) {\n            element = new LineElement(id, data, rb);\n        } else if (elementType === DocElement.type.image) {\n            element = new ImageElement(id, data, rb);\n        } else if (elementType === DocElement.type.pageBreak) {\n            element = new PageBreakElement(id, data, rb);\n        } else if (elementType === DocElement.type.table) {\n            element = new TableElement(id, data, rb);\n            properties.hasChildren = true;\n        } else if (elementType === DocElement.type.frame) {\n            element = new FrameElement(id, data, rb);\n            properties.hasChildren = true;\n        } else if (elementType === DocElement.type.section) {\n            element = new SectionElement(id, data, rb);\n            properties.hasChildren = true;\n        } else if (elementType === DocElement.type.barCode) {\n            element = new BarCodeElement(id, data, rb);\n        }\n        rb.addDocElement(element);\n        let parentPanel = element.getContainer().getPanelItem();\n        let panelItem = new MainPanelItem(elementType, parentPanel, element, properties, rb);\n        element.setPanelItem(panelItem);\n        parentPanel.insertChild(panelPos, panelItem);\n        element.setup(openPanelItem);\n        return element;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/AddDeleteDocElementCmd.js\n// module id = 11\n// module chunks = 0","/**\n * Container can contain doc elements. The doc elements are always relative to the container offset.\n * @class\n */\nexport default class Container {\n    constructor(id, name, rb) {\n        this.rb = rb;\n        this.id = id;\n        this.panelItem = null;\n        this.name = name;\n        this.el = null;\n        this.elContent = null;\n        this.owner = null;\n        this.level = 0;  // number of containers \"above\"\n        this.parent = null;  // parent container\n    }\n\n    init(owner) {\n        this.owner = owner;\n        this.el = owner.getElement();\n        this.elContent = owner.getContentElement();\n        this.panelItem = owner.getPanelItem();\n        this.parent = owner.getContainer();\n        this.level = 0;\n        let parent = this.parent;\n        while (parent !== null) {\n            this.level++;\n            parent = parent.getParent();\n        }\n    }\n\n    /**\n     * Called after initialization is finished.\n     */\n    setup() {\n    }\n\n    remove() {\n    }\n\n    appendElement(el) {\n        if (this.elContent !== null) {\n            this.elContent.append(el);\n        }\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getPanelItem() {\n        return this.panelItem;\n    }\n\n    setPanelItem(panelItem) {\n        this.panelItem = panelItem;\n    }\n\n    getLevel() {\n        return this.level;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    setParent(parent) {\n        this.parent = parent;\n        this.level = 0;\n        while (parent !== null) {\n            this.level++;\n            parent = parent.getParent();\n        }\n    }\n\n    isSelected() {\n        if (this.owner !== null && this.rb.isSelectedObject(this.owner.getId())) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if the given element type can be added to this container.\n     * @param {String} elementType\n     */\n    isElementAllowed(elementType) {\n        return false;\n    }\n\n    /**\n     * Update container style when an element is currently dragged over this container.\n     */\n    dragOver() {\n        if (this.el !== null) {\n            this.el.addClass('rbroElementDragOver');\n        }\n    }\n\n    /**\n     * Returns absolute container offset.\n     * @returns {Object} x and y offset coordinates.\n     */\n    getOffset() {\n        return { x: 0, y: 0 };\n    }\n\n    /**\n     * Returns offset relative to other container.\n     * @param {Container} otherContainer\n     * @returns {Object} x and y offset coordinates.\n     */\n    getOffsetTo(otherContainer) {\n        if (otherContainer !== null && otherContainer != this) {\n            let offset = this.getOffset();\n            let otherOffset = otherContainer.getOffset();\n            return { x: offset.x - otherOffset.x, y: offset.y - otherOffset.y };\n        }\n        return { x: 0, y: 0 };\n    }\n\n    /**\n     * Returns container size.\n     * @returns {Object} width and height of container.\n     */\n    getSize() {\n        return { width: 0, height: 0 };\n    }\n\n    /**\n     * Returns container content size.\n     * @returns {Object} width and height of container content area.\n     */\n    getContentSize() {\n        return { width: 0, height: 0 };\n    }\n\n    /**\n     * Returns true if given absolute position is inside container.\n     * @param {Number} posX - absolute x coordinate.\n     * @param {Number} posY - absolute y coordinate.\n     */\n    isInside(posX, posY) {\n        let offset = this.getOffset();\n        let size = this.getSize();\n        posX -= offset.x;\n        posY -= offset.y;\n        if (posX >= 0 && posY >= 0 && posX < size.width && posY < size.height) {\n            return true;\n        }\n        return false;\n    }\n\n    clearErrors() {\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/container/Container.js\n// module id = 12\n// module chunks = 0","import SetValueCmd from '../commands/SetValueCmd';\nimport Style from '../data/Style';\nimport DocElement from '../elements/DocElement';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all style properties.\n * @class\n */\nexport default class StylePanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render(data) {\n        let panel = $('<div id=\"rbro_style_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_style_name\">${this.rb.getLabel('styleName')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elStyleName = $(`<input id=\"rbro_style_name\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    if (elStyleName.val().trim() !== '') {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_style_name', 'name',\n                            elStyleName.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    } else {\n                        elStyleName.val(style.getName());\n                    }\n                }\n            });\n        elFormField.append(elStyleName);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        StylePanel.renderStyle(panel, 'style_', '', DocElement.type.none, this, this.rb);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    static renderPaddingControls(elPanel, idPrefix, fieldPrefix, panel, rb) {\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_${idPrefix}padding\">${rb.getLabel('stylePadding')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSmallInput\"></div>');\n        \n        let elPaddingTopDiv = $('<div class=\"rbroColumnCenter\"></div>');\n        let elPaddingTop = $(`<input id=\"rbro_${idPrefix}padding_top\" placeholder=\"${rb.getLabel('orientationTop')}\">`)\n            .on('input', event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}padding_top`,\n                        `${fieldPrefix}paddingTop`, elPaddingTop.val(), SetValueCmd.type.text, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputPositiveInteger(elPaddingTop);\n        elPaddingTopDiv.append(elPaddingTop);\n        elFormField.append(elPaddingTopDiv);\n\n        let elDiv2 = $('<div class=\"rbroSplit\"></div>');\n        let elPaddingLeft = $(`<input id=\"rbro_${idPrefix}padding_left\" placeholder=\"${rb.getLabel('orientationLeft')}\">`)\n            .on('input', event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}padding_left`,\n                        `${fieldPrefix}paddingLeft`, elPaddingLeft.val(), SetValueCmd.type.text, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputPositiveInteger(elPaddingLeft);\n        elDiv2.append(elPaddingLeft);\n        let elPaddingRight = $(`<input id=\"rbro_${idPrefix}padding_right\" placeholder=\"${rb.getLabel('orientationRight')}\">`)\n            .on('input', event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}padding_right`,\n                        `${fieldPrefix}paddingRight`, elPaddingRight.val(), SetValueCmd.type.text, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputPositiveInteger(elPaddingRight);\n        elDiv2.append(elPaddingRight);\n        elFormField.append(elDiv2);\n\n        let elPaddingBottomDiv = $('<div class=\"rbroColumnCenter\"></div>');\n        let elPaddingBottom = $(`<input id=\"rbro_${idPrefix}padding_bottom\" placeholder=\"${rb.getLabel('orientationBottom')}\">`)\n            .on('input', event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}padding_bottom`,\n                        `${fieldPrefix}paddingBottom`, elPaddingBottom.val(), SetValueCmd.type.text, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputPositiveInteger(elPaddingBottom);\n        elPaddingBottomDiv.append(elPaddingBottom);\n        elFormField.append(elPaddingBottomDiv);\n        elDiv.append(elFormField);\n        elPanel.append(elDiv);\n    }\n\n    static renderStyle(elPanel, idPrefix, fieldPrefix, elementType, panel, rb) {\n        let elDiv, elFormField;\n        if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label>${rb.getLabel('styleTextStyle')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elTextStyle = $(`<div id=\"rbro_${idPrefix}textstyle\"></div>`);\n            let elBold = $(`<button id=\"rbro_${idPrefix}bold\" name=\"style_bold\" class=\"rbroButton rbroActionButton rbroIcon-bold\" type=\"button\"\n                    title=\"${rb.getLabel('styleBold')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}bold`,\n                            `${fieldPrefix}bold`, !elBold.hasClass('rbroButtonActive'), SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elTextStyle.append(elBold);\n            let elItalic = $(`<button id=\"rbro_${idPrefix}italic\"\n                    class=\"rbroButton rbroActionButton rbroIcon-italic\" type=\"button\"\n                    title=\"${rb.getLabel('styleItalic')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}italic`,\n                            `${fieldPrefix}italic`, !elItalic.hasClass('rbroButtonActive'), SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elTextStyle.append(elItalic);\n            let elunderline = $(`<button id=\"rbro_${idPrefix}underline\"\n                    class=\"rbroButton rbroActionButton rbroIcon-underline\" type=\"button\"\n                    title=\"${rb.getLabel('styleunderline')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}underline`,\n                            `${fieldPrefix}underline`, !elunderline.hasClass('rbroButtonActive'), SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elTextStyle.append(elunderline);\n            elFormField.append(elTextStyle);\n            elDiv.append(elFormField);\n            elPanel.append(elDiv);\n        }\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label>${rb.getLabel('styleAlignment')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHAlignment = $(`<div id=\"rbro_${idPrefix}halignment\"></div>`);\n        let elHAlignmentLeft = $(`<button id=\"rbro_${idPrefix}halignment_left\"\n                class=\"rbroButton rbroActionButton rbroIcon-text-align-left\" type=\"button\" value=\"left\"\n                title=\"${rb.getLabel('styleHAlignmentLeft')}\"></button>`)\n            .click(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}halignment`,\n                        `${fieldPrefix}horizontalAlignment`, Style.alignment.left, SetValueCmd.type.buttonGroup, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elHAlignment.append(elHAlignmentLeft);\n        let elHAlignmentCenter = $(`<button id=\"rbro_${idPrefix}halignment_center\"\n                class=\"rbroButton rbroActionButton rbroIcon-text-align-center\" type=\"button\" value=\"center\"\n                title=\"${rb.getLabel('styleHAlignmentCenter')}\"></button>`)\n            .click(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}halignment`,\n                        `${fieldPrefix}horizontalAlignment`, Style.alignment.center, SetValueCmd.type.buttonGroup, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elHAlignment.append(elHAlignmentCenter);\n        let elHAlignmentRight = $(`<button id=\"rbro_${idPrefix}halignment_right\"\n                class=\"rbroButton rbroActionButton rbroIcon-text-align-right\" type=\"button\" value=\"right\"\n                title=\"${rb.getLabel('styleHAlignmentRight')}\"></button>`)\n            .click(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}halignment`,\n                        `${fieldPrefix}horizontalAlignment`, Style.alignment.right, SetValueCmd.type.buttonGroup, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elHAlignment.append(elHAlignmentRight);\n        if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n            let elHAlignmentJustify = $(`<button id=\"rbro_${idPrefix}halignment_justify\"\n                    class=\"rbroButton rbroActionButton rbroIcon-text-align-justify\" type=\"button\" value=\"justify\"\n                    title=\"${rb.getLabel('styleHAlignmentJustify')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}halignment`,\n                            `${fieldPrefix}horizontalAlignment`, Style.alignment.justify, SetValueCmd.type.buttonGroup, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elHAlignment.append(elHAlignmentJustify);\n        }\n        elFormField.append(elHAlignment);\n\n        let elVAlignment = $(`<div id=\"rbro_${idPrefix}valignment\"></div>`);\n        let elVAlignmentTop = $(`<button id=\"rbro_${idPrefix}valignment_top\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-top\" type=\"button\" value=\"top\"\n                title=\"${rb.getLabel('styleVAlignmentTop')}\"></button>`)\n            .click(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}valignment`,\n                        `${fieldPrefix}verticalAlignment`, Style.alignment.top, SetValueCmd.type.buttonGroup, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elVAlignment.append(elVAlignmentTop);\n        let elVAlignmentMiddle = $(`<button id=\"rbro_${idPrefix}valignment_middle\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-middle\" type=\"button\" value=\"middle\"\n                title=\"${rb.getLabel('styleVAlignmentMiddle')}\"></button>`)\n            .click(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}valignment`,\n                        `${fieldPrefix}verticalAlignment`, Style.alignment.middle, SetValueCmd.type.buttonGroup, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elVAlignment.append(elVAlignmentMiddle);\n        let elVAlignmentBottom = $(`<button id=\"rbro_${idPrefix}valignment_bottom\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-bottom\" type=\"button\" value=\"bottom\"\n                title=\"${rb.getLabel('styleVAlignmentBottom')}\"></button>`)\n            .click(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}valignment`,\n                        `${fieldPrefix}verticalAlignment`, Style.alignment.bottom, SetValueCmd.type.buttonGroup, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elVAlignment.append(elVAlignmentBottom);\n        elFormField.append(elVAlignment);\n        elDiv.append(elFormField);\n        elPanel.append(elDiv);\n\n        if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_${idPrefix}text_color\">${rb.getLabel('styleTextColor')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elTextColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n            let elTextColor = $(`<input id=\"rbro_${idPrefix}text_color\">`)\n                .change(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}text_color`,\n                            `${fieldPrefix}textColor`, elTextColor.val(), SetValueCmd.type.color, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elTextColorContainer.append(elTextColor);\n            elFormField.append(elTextColorContainer);\n            elDiv.append(elFormField);\n            elPanel.append(elDiv);\n            utils.initColorPicker(elTextColor, rb);\n        }\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_${idPrefix}background_color\">${rb.getLabel('styleBackgroundColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBgColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elBgColor = $(`<input id=\"rbro_${idPrefix}background_color\">`)\n            .change(event => {\n                if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}background_color`,\n                        `${fieldPrefix}backgroundColor`, elBgColor.val(), SetValueCmd.type.color, rb);\n                    rb.executeCommand(cmd);\n                }\n            });\n        elBgColorContainer.append(elBgColor);\n        elFormField.append(elBgColorContainer);\n        elDiv.append(elFormField);\n        elPanel.append(elDiv);\n        utils.initColorPicker(elBgColor, rb, { allowEmpty: true });\n\n        if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_${idPrefix}font\">${rb.getLabel('styleFont')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelectFont\"></div>');\n            let strFont = `<select id=\"rbro_${idPrefix}font\">`;\n            for (let font of rb.getFonts()) {\n                strFont += `<option value=\"${font.value}\">${font.name}</option>`;\n            }\n            strFont += '</select>';\n            let elFont = $(strFont)\n                .change(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}font`,\n                            `${fieldPrefix}font`, elFont.val(), SetValueCmd.type.select, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elFont);\n            let strFontSize = `<select id=\"rbro_${idPrefix}font_size\">`;\n            for (let size of [8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,32,36,40,44,48,54,60,66,72,80]) {\n                strFontSize += `<option value=\"${size}\">${size}</option>`;\n            }\n            strFontSize += '</select>';\n            let elFontSize = $(strFontSize)\n                .change(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}font_size`,\n                            `${fieldPrefix}fontSize`, elFontSize.val(), SetValueCmd.type.select, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elFontSize);\n            elFormField.append(`<span>${rb.getLabel('styleFontSizeUnit')}</span>`);\n            elDiv.append(elFormField);\n            elPanel.append(elDiv);\n\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_${idPrefix}line_spacing\">${rb.getLabel('styleLineSpacing')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elLineSpacing = $(`<select id=\"rbro_${idPrefix}line_spacing\">\n                    <option value=\"1\">1</option>\n                    <option value=\"1.5\">1.5</option>\n                    <option value=\"2\">2</option>\n                </select>`)\n                .change(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}line_spacing`,\n                            `${fieldPrefix}lineSpacing`, elLineSpacing.val(), SetValueCmd.type.select, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elLineSpacing);\n            elDiv.append(elFormField);\n            elPanel.append(elDiv);\n\n            let elBorderDiv = $(`<div id=\"rbro_${idPrefix}border_div\"></div>`);\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label>${rb.getLabel('styleBorder')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elBorderStyle = $(`<div id=\"rbro_${idPrefix}border\"></div>`);\n            let elBorderAll = $(`<button id=\"rbro_${idPrefix}border_all\" class=\"rbroButton rbroActionButton rbroIcon-border-all\"\n                    type=\"button\" value=\"${fieldPrefix}borderAll\"\n                    title=\"${rb.getLabel('styleBorderAll')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_all`,\n                            `${fieldPrefix}borderAll`, !elBorderAll.hasClass('rbroButtonActive'),\n                            SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elBorderStyle.append(elBorderAll);\n            let elBorderLeft = $(`<button id=\"rbro_${idPrefix}border_left\" class=\"rbroButton rbroActionButton rbroIcon-border-left\"\n                    type=\"button\" value=\"${fieldPrefix}borderLeft\"\n                    title=\"${rb.getLabel('orientationLeft')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_left`,\n                            `${fieldPrefix}borderLeft`, !elBorderLeft.hasClass('rbroButtonActive'),\n                            SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elBorderStyle.append(elBorderLeft);\n            let elBorderTop = $(`<button id=\"rbro_${idPrefix}border_top\" class=\"rbroButton rbroActionButton rbroIcon-border-top\"\n                    type=\"button\" value=\"${fieldPrefix}borderTop\"\n                    title=\"${rb.getLabel('orientationTop')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_top`,\n                            `${fieldPrefix}borderTop`, !elBorderTop.hasClass('rbroButtonActive'),\n                            SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elBorderStyle.append(elBorderTop);\n            let elBorderRight = $(`<button id=\"rbro_${idPrefix}border_right\" class=\"rbroButton rbroActionButton rbroIcon-border-right\"\n                    type=\"button\" value=\"${fieldPrefix}borderRight\"\n                    title=\"${rb.getLabel('orientationRight')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_right`,\n                            `${fieldPrefix}borderRight`, !elBorderRight.hasClass('rbroButtonActive'),\n                            SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elBorderStyle.append(elBorderRight);\n            let elBorderBottom = $(`<button id=\"rbro_${idPrefix}border_bottom\" class=\"rbroButton rbroActionButton rbroIcon-border-bottom\"\n                    type=\"button\" value=\"${fieldPrefix}borderBottom\"\n                    title=\"${rb.getLabel('orientationBottom')}\"></button>`)\n                .click(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_bottom`,\n                            `${fieldPrefix}borderBottom`, !elBorderBottom.hasClass('rbroButtonActive'),\n                            SetValueCmd.type.button, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elBorderStyle.append(elBorderBottom);\n            elFormField.append(elBorderStyle);\n            elDiv.append(elFormField);\n            elBorderDiv.append(elDiv);\n\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_${idPrefix}border_color\">${rb.getLabel('styleBorderColor')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elBorderColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n            let elBorderColor = $(`<input id=\"rbro_${idPrefix}border_color\">`)\n                .change(event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_color`,\n                            `${fieldPrefix}borderColor`, elBorderColor.val(), SetValueCmd.type.color, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elBorderColorContainer.append(elBorderColor);\n            elFormField.append(elBorderColorContainer);\n            elDiv.append(elFormField);\n            elBorderDiv.append(elDiv);\n            utils.initColorPicker(elBorderColor, rb);\n\n            elDiv = $('<div class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_${idPrefix}border_width\">${rb.getLabel('styleBorderWidth')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elBorderWidth = $(`<input id=\"rbro_${idPrefix}border_width\">`)\n                .on('input', event => {\n                    if (rb.getDataObject(panel.getSelectedObjId()) !== null) {\n                        let cmd = new SetValueCmd(panel.getSelectedObjId(), `rbro_${idPrefix}border_width`,\n                            `${fieldPrefix}borderWidth`, elBorderWidth.val(), SetValueCmd.type.text, rb);\n                        rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elBorderWidth);\n            elDiv.append(elFormField);\n            elBorderDiv.append(elDiv);\n            utils.setInputDecimal(elBorderWidth);\n            elPanel.append(elBorderDiv);\n\n            StylePanel.renderPaddingControls(elPanel, idPrefix, fieldPrefix, panel, rb);\n        }\n    }\n\n    show(data) {\n        $('#rbro_style_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_style_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {Style} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_style_name').prop('disabled', false);\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_style_name').prop('disabled', true);\n        }\n        StylePanel.updateStyleData(data, 'style_', '', DocElement.type.none);\n        this.updateErrors();\n    }\n\n    static updateStyleData(data, idPrefix, fieldPrefix, elementType) {\n        if (data !== null) {\n            $(`#rbro_${idPrefix}halignment_left`).prop('disabled', false);\n            $(`#rbro_${idPrefix}halignment_center`).prop('disabled', false);\n            $(`#rbro_${idPrefix}halignment_right`).prop('disabled', false);\n            $(`#rbro_${idPrefix}valignment_top`).prop('disabled', false);\n            $(`#rbro_${idPrefix}valignment_middle`).prop('disabled', false);\n            $(`#rbro_${idPrefix}valignment_bottom`).prop('disabled', false);\n            $(`#rbro_${idPrefix}background_color`).spectrum('enable');\n            $(`#rbro_${idPrefix}border_all`).prop('disabled', false);\n            $(`#rbro_${idPrefix}border_left`).prop('disabled', false);\n            $(`#rbro_${idPrefix}border_top`).prop('disabled', false);\n            $(`#rbro_${idPrefix}border_right`).prop('disabled', false);\n            $(`#rbro_${idPrefix}border_bottom`).prop('disabled', false);\n            $(`#rbro_${idPrefix}border_color`).spectrum('enable');\n            $(`#rbro_${idPrefix}border_width`).prop('disabled', false);\n            if (elementType === DocElement.type.none) {\n                $(`#rbro_${idPrefix}name`).prop('disabled', false);\n            }\n            if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n                $(`#rbro_${idPrefix}bold`).prop('disabled', false);\n                $(`#rbro_${idPrefix}italic`).prop('disabled', false);\n                $(`#rbro_${idPrefix}underline`).prop('disabled', false);\n                $(`#rbro_${idPrefix}halignment_justify`).prop('disabled', false);\n                $(`#rbro_${idPrefix}text_color`).spectrum('enable');\n                $(`#rbro_${idPrefix}font`).prop('disabled', false);\n                $(`#rbro_${idPrefix}font_size`).prop('disabled', false);\n                $(`#rbro_${idPrefix}line_spacing`).prop('disabled', false);\n                $(`#rbro_${idPrefix}padding_top`).prop('disabled', false);\n                $(`#rbro_${idPrefix}padding_left`).prop('disabled', false);\n                $(`#rbro_${idPrefix}padding_right`).prop('disabled', false);\n                $(`#rbro_${idPrefix}padding_bottom`).prop('disabled', false);\n            }\n\n            $(`#rbro_${idPrefix}halignment_left`).parent().find('button').removeClass('rbroButtonActive');\n            let horizontalAlignment = data.getValue(`${fieldPrefix}horizontalAlignment`);\n            if (horizontalAlignment === Style.alignment.left) {\n                $(`#rbro_${idPrefix}halignment_left`).addClass('rbroButtonActive');\n            }\n            else if (horizontalAlignment === Style.alignment.center) {\n                $(`#rbro_${idPrefix}halignment_center`).addClass('rbroButtonActive');\n            }\n            else if (horizontalAlignment === Style.alignment.right) {\n                $(`#rbro_${idPrefix}halignment_right`).addClass('rbroButtonActive');\n            }\n            else if (horizontalAlignment === Style.alignment.justify) {\n                $(`#rbro_${idPrefix}halignment_justify`).addClass('rbroButtonActive');\n            }\n            $(`#rbro_${idPrefix}valignment_top`).parent().find('button').removeClass('rbroButtonActive');\n            let verticalAlignment = data.getValue(`${fieldPrefix}verticalAlignment`);\n            if (verticalAlignment == Style.alignment.top) {\n                $(`#rbro_${idPrefix}valignment_top`).addClass('rbroButtonActive');\n            }\n            else if (verticalAlignment === Style.alignment.middle) {\n                $(`#rbro_${idPrefix}valignment_middle`).addClass('rbroButtonActive');\n            }\n            else if (verticalAlignment === Style.alignment.bottom) {\n                $(`#rbro_${idPrefix}valignment_bottom`).addClass('rbroButtonActive');\n            }\n\n            if (elementType === DocElement.type.none || elementType === DocElement.type.text || elementType === DocElement.type.image) {\n                $(`#rbro_${idPrefix}background_color`).spectrum(\"set\", data.getValue(`${fieldPrefix}backgroundColor`));\n                if (data.getValue(`${fieldPrefix}borderAll`)) {\n                    $(`#rbro_${idPrefix}border_all`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}border_all`).removeClass('rbroButtonActive');\n                }\n                if (data.getValue(`${fieldPrefix}borderLeft`)) {\n                    $(`#rbro_${idPrefix}border_left`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}border_left`).removeClass('rbroButtonActive');\n                }\n                if (data.getValue(`${fieldPrefix}borderTop`)) {\n                    $(`#rbro_${idPrefix}border_top`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}border_top`).removeClass('rbroButtonActive');\n                }\n                if (data.getValue(`${fieldPrefix}borderRight`)) {\n                    $(`#rbro_${idPrefix}border_right`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}border_right`).removeClass('rbroButtonActive');\n                }\n                if (data.getValue(`${fieldPrefix}borderBottom`)) {\n                    $(`#rbro_${idPrefix}border_bottom`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}border_bottom`).removeClass('rbroButtonActive');\n                }\n                $(`#rbro_${idPrefix}border_color`).spectrum(\"set\", data.getValue(`${fieldPrefix}borderColor`));\n                $(`#rbro_${idPrefix}border_width`).val(data.getValue(`${fieldPrefix}borderWidth`));\n            }\n\n            if (elementType === DocElement.type.none) {\n                $(`#rbro_${idPrefix}name`).val(data.getName());\n            }\n            if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n                if (data.getValue(`${fieldPrefix}bold`)) {\n                    $(`#rbro_${idPrefix}bold`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}bold`).removeClass('rbroButtonActive');\n                }\n                if (data.getValue(`${fieldPrefix}italic`)) {\n                    $(`#rbro_${idPrefix}italic`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}italic`).removeClass('rbroButtonActive');\n                }\n                if (data.getValue(`${fieldPrefix}underline`)) {\n                    $(`#rbro_${idPrefix}underline`).addClass('rbroButtonActive');\n                } else {\n                    $(`#rbro_${idPrefix}underline`).removeClass('rbroButtonActive');\n                }\n                $(`#rbro_${idPrefix}text_color`).spectrum(\"set\", data.getValue(`${fieldPrefix}textColor`));\n                $(`#rbro_${idPrefix}font`).val(data.getValue(`${fieldPrefix}font`));\n                $(`#rbro_${idPrefix}font_size`).val(data.getValue(`${fieldPrefix}fontSize`));\n                $(`#rbro_${idPrefix}line_spacing`).val(data.getValue(`${fieldPrefix}lineSpacing`));\n                $(`#rbro_${idPrefix}padding_top`).val(data.getValue(`${fieldPrefix}paddingTop`));\n                $(`#rbro_${idPrefix}padding_left`).val(data.getValue(`${fieldPrefix}paddingLeft`));\n                $(`#rbro_${idPrefix}padding_right`).val(data.getValue(`${fieldPrefix}paddingRight`));\n                $(`#rbro_${idPrefix}padding_bottom`).val(data.getValue(`${fieldPrefix}paddingBottom`));\n            }\n        } else {\n            $(`#rbro_${idPrefix}halignment_left`).prop('disabled', true);\n            $(`#rbro_${idPrefix}halignment_center`).prop('disabled', true);\n            $(`#rbro_${idPrefix}halignment_right`).prop('disabled', true);\n            $(`#rbro_${idPrefix}valignment_top`).prop('disabled', true);\n            $(`#rbro_${idPrefix}valignment_middle`).prop('disabled', true);\n            $(`#rbro_${idPrefix}valignment_bottom`).prop('disabled', true);\n            $(`#rbro_${idPrefix}background_color`).spectrum('disable');\n            if (elementType === DocElement.type.none || elementType === DocElement.type.text || elementType === DocElement.type.image) {\n                $(`#rbro_${idPrefix}border_left`).prop('disabled', true);\n                $(`#rbro_${idPrefix}border_top`).prop('disabled', true);\n                $(`#rbro_${idPrefix}border_right`).prop('disabled', true);\n                $(`#rbro_${idPrefix}border_bottom`).prop('disabled', true);\n                $(`#rbro_${idPrefix}border_color`).spectrum('disable');\n                $(`#rbro_${idPrefix}border_width`).prop('disabled', true);\n            }\n\n            if (elementType === DocElement.type.none) {\n                $(`#rbro_${idPrefix}name`).prop('disabled', true);\n            }\n            if (elementType === DocElement.type.none || elementType === DocElement.type.text) {\n                $(`#rbro_${idPrefix}bold`).prop('disabled', true);\n                $(`#rbro_${idPrefix}italic`).prop('disabled', true);\n                $(`#rbro_${idPrefix}underline`).prop('disabled', true);\n                $(`#rbro_${idPrefix}halignment_justify`).prop('disabled', true);\n                $(`#rbro_${idPrefix}text_color`).spectrum('disable');\n                $(`#rbro_${idPrefix}font`).prop('disabled', true);\n                $(`#rbro_${idPrefix}font_size`).prop('disabled', true);\n                $(`#rbro_${idPrefix}line_spacing`).prop('disabled', true);\n                $(`#rbro_${idPrefix}padding_top`).prop('disabled', true);\n                $(`#rbro_${idPrefix}padding_left`).prop('disabled', true);\n                $(`#rbro_${idPrefix}padding_right`).prop('disabled', true);\n                $(`#rbro_${idPrefix}padding_bottom`).prop('disabled', true);\n            }\n        }\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_style_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_style_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/StylePanel.js\n// module id = 13\n// module chunks = 0","import * as utils from '../utils';\n\n/**\n * Data object containing all document properties like page size, margins, etc.\n * @class\n */\nexport default class DocumentProperties {\n    constructor(rb) {\n        this.rb = rb;\n        this.id = '0_document_properties';\n        this.panelItem = null;\n        this.errors = [];\n\n        this.pageFormat = DocumentProperties.pageFormat.A4;\n        this.pageWidth = '';\n        this.pageHeight = '';\n        this.unit = DocumentProperties.unit.mm;\n        this.orientation = DocumentProperties.orientation.portrait;\n        this.contentHeight = '';\n        this.marginLeft = '';\n        this.marginLeftVal = 0;\n        this.marginTop = '';\n        this.marginTopVal = 0;\n        this.marginRight = '';\n        this.marginRightVal = 0;\n        this.marginBottom = '';\n        this.marginBottomVal = 0;\n\n        this.header = true;\n        this.headerSize = '80';\n        this.headerDisplay = DocumentProperties.display.always;\n        this.footer = true;\n        this.footerSize = '80';\n        this.footerDisplay = DocumentProperties.display.always;\n\n        this.headerSizeVal = this.header ? utils.convertInputToNumber(this.headerSize) : 0;\n        this.footerSizeVal = this.footer ? utils.convertInputToNumber(this.footerSize) : 0;\n\n        this.patternLocale = rb.getProperty('patternLocale');\n        this.patternCurrencySymbol = rb.getProperty('patternCurrencySymbol');\n\n        // width and height in pixel\n        this.width = 0;\n        this.height = 0;\n    }\n\n    setInitialData(initialData) {\n        for (let key in initialData) {\n            if (initialData.hasOwnProperty(key) && this.hasOwnProperty(key)) {\n                this[key] = initialData[key];\n            }\n        }\n        this.headerSizeVal = this.header ? utils.convertInputToNumber(this.headerSize) : 0;\n        this.footerSizeVal = this.footer ? utils.convertInputToNumber(this.footerSize) : 0;\n        this.marginLeftVal = utils.convertInputToNumber(this.marginLeft);\n        this.marginTopVal = utils.convertInputToNumber(this.marginTop);\n        this.marginRightVal = utils.convertInputToNumber(this.marginRight);\n        this.marginBottomVal = utils.convertInputToNumber(this.marginBottom);\n    }\n\n    /**\n     * Called after initialization is finished.\n     */\n    setup() {\n        let size = this.getPageSize();\n        this.updatePageSize(size);\n        this.rb.getDocument().updatePageMargins();\n        this.rb.getDocument().updateHeader();\n        this.rb.getDocument().updateFooter();\n        this.updateHeader();\n        this.updateFooter();\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['pageFormat', 'pageWidth', 'pageHeight', 'unit', 'orientation',\n            'contentHeight', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom',\n            'header', 'headerSize', 'headerDisplay', 'footer', 'footerSize', 'footerDisplay',\n            'patternLocale', 'patternCurrencySymbol'];\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getName() {\n        return this.rb.getLabel('documentProperties');\n    }\n\n    getPanelItem() {\n        return this.panelItem;\n    }\n\n    setPanelItem(panelItem) {\n        this.panelItem = panelItem;\n    }\n\n    getValue(field) {\n        return this[field];\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        this[field] = value;\n        if (field === 'marginLeft' || field === 'marginTop' || field === 'marginRight' || field === 'marginBottom') {\n            this[field + 'Val'] = utils.convertInputToNumber(value);\n            this.rb.getDocument().updatePageMargins();\n            this.rb.getDocument().updateHeader();\n            this.rb.getDocument().updateFooter();\n        } else if (field === 'header') {\n            this.updateHeader();\n        } else if (field === 'footer') {\n            this.updateFooter();\n        }\n        if (field === 'header' || field === 'headerSize') {\n            this.rb.getDocument().updateHeader();\n            this.headerSizeVal = this.header ? utils.convertInputToNumber(this.headerSize) : 0;\n        }\n        if (field === 'footer' || field === 'footerSize') {\n            this.rb.getDocument().updateFooter();\n            this.footerSizeVal = this.footer ? utils.convertInputToNumber(this.footerSize) : 0;\n        }\n        if (field === 'pageFormat' ||field === 'pageWidth' || field === 'pageHeight' || field === 'unit' ||\n                field === 'orientation' || field === 'contentHeight' ||\n                field === 'marginTop' || field === 'marginBottom') {\n            let size = this.getPageSize();\n            this.updatePageSize(size);\n        }\n    }\n\n    updatePageSize(size) {\n        this.width = size.width;\n        this.height = size.height;\n        this.rb.getDocument().updatePageSize(size.width, size.height);\n    }\n\n    updateHeader() {\n        if (this.header) {\n            this.rb.getMainPanel().showHeader();\n        } else {\n            this.rb.getMainPanel().hideHeader();\n        }\n    }\n\n    updateFooter() {\n        if (this.footer) {\n            this.rb.getMainPanel().showFooter();\n        } else {\n            this.rb.getMainPanel().hideFooter();\n        }\n    }\n\n    /**\n     * Returns page size in pixels at 72 dpi.\n     * @returns {Object} width, height\n     */\n    getPageSize() {\n        let pageWidth;\n        let pageHeight;\n        let unit;\n        let dpi = 72;\n        if (this.pageFormat === DocumentProperties.pageFormat.A4) {\n            if (this.orientation === DocumentProperties.orientation.portrait) {\n                pageWidth = 210;\n                pageHeight = 297;\n            } else {\n                pageWidth = 297;\n                pageHeight = 210;\n            }\n            unit = DocumentProperties.unit.mm;\n        } else if (this.pageFormat === DocumentProperties.pageFormat.A5) {\n            if (this.orientation === DocumentProperties.orientation.portrait) {\n                pageWidth = 148;\n                pageHeight = 210;\n            } else {\n                pageWidth = 210;\n                pageHeight = 148;\n            }\n            unit = DocumentProperties.unit.mm;\n        } else if (this.pageFormat === DocumentProperties.pageFormat.letter) {\n            if (this.orientation === DocumentProperties.orientation.portrait) {\n                pageWidth = 8.5;\n                pageHeight = 11;\n            } else {\n                pageWidth = 11;\n                pageHeight = 8.5;\n            }\n            unit = DocumentProperties.unit.inch;\n        } else {\n            pageWidth = utils.convertInputToNumber(this.pageWidth);\n            pageHeight = utils.convertInputToNumber(this.pageHeight);\n            unit = this.unit;\n        }\n        if (unit === DocumentProperties.unit.mm) {\n            pageWidth = Math.round((dpi * pageWidth) / 25.4);\n            pageHeight = Math.round((dpi * pageHeight) / 25.4);\n        } else {\n            pageWidth = Math.round(dpi * pageWidth);\n            pageHeight = Math.round(dpi * pageHeight);\n        }\n        if (this.contentHeight.trim() !== '') {\n            pageHeight = utils.convertInputToNumber(this.contentHeight) +\n                    this.marginTopVal + this.marginBottomVal + this.headerSizeVal + this.footerSizeVal;\n        }\n        return { width: pageWidth, height: pageHeight };\n    }\n\n    /**\n     * Returns size of content band without any margins.\n     * @returns {Object} width, height\n     */\n    getContentSize() {\n        let size = this.getPageSize();\n        let height;\n        if (this.contentHeight.trim() !== '') {\n            height = utils.convertInputToNumber(this.contentHeight);\n        } else {\n            height = size.height - this.marginTopVal - this.marginBottomVal -\n                this.headerSizeVal - this.footerSizeVal;\n        }\n        return { width: size.width - this.marginLeftVal - this.marginRightVal,\n            height: height };\n    }\n\n    addError(error) {\n        this.errors.push(error);\n    }\n\n    clearErrors() {\n        this.errors = [];\n    }\n\n    getErrors() {\n        return this.errors;\n    }\n\n    remove() {\n    }\n\n    select() {\n    }\n\n    deselect() {\n    }\n\n    toJS() {\n        let ret = {};\n        for (let field of this.getFields()) {\n            ret[field] = this.getValue(field);\n        }\n        return ret;\n    }\n}\n\nDocumentProperties.outputFormat = {\n    pdf: 'pdf',\n    xlsx: 'xlsx'\n};\n\nDocumentProperties.pageFormat = {\n    A4: 'A4',\n    A5: 'A5',\n    letter: 'letter', // 215.9 x 279.4 mm\n    userDefined: 'user_defined'\n};\n\nDocumentProperties.unit = {\n    mm: 'mm',\n    inch: 'inch'\n};\n\nDocumentProperties.orientation = {\n    portrait: 'portrait',\n    landscape: 'landscape'\n};\n\nDocumentProperties.display = {\n    always: 'always',\n    notOnFirstPage: 'not_on_first_page'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/data/DocumentProperties.js\n// module id = 14\n// module chunks = 0","import DocElement from './DocElement';\nimport TableBandElement from './TableBandElement';\nimport AddDeleteDocElementCmd from '../commands/AddDeleteDocElementCmd';\nimport Parameter from '../data/Parameter';\nimport MainPanelItem from '../menu/MainPanelItem';\nimport * as utils from '../utils';\n\n/**\n * Table doc element. Each table cell consists of a text element.\n * @class\n */\nexport default class TableElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementTable'), id, 200, 40, rb);\n        this.setupComplete = false;\n        this.dataSource = '';\n        this.borderColor = '#000000';\n        this.borderWidth = '1';\n        this.border = TableElement.border.grid;\n        this.header = true;\n        this.footer = false;\n        this.contentRows = '1';\n        this.columns = '2';\n        this.headerData = null;\n        this.contentDataRows = [];\n        this.footerData = null;\n        this.spreadsheet_hide = false;\n        this.spreadsheet_column = '';\n        this.spreadsheet_addEmptyRow = false;\n\n        this.setInitialData(initialData);\n\n        this.borderWidthVal = utils.convertInputToNumber(this.borderWidth);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        this.updateDisplay();\n\n        this.headerData = this.createBand('header', -1, null);\n        let contentRows = utils.convertInputToNumber(this.contentRows);\n        if (contentRows < 1) {\n            contentRows = 1;\n        }\n        let contentDataRows = [];\n        for (let i=0; i < contentRows; i++) {\n            contentDataRows.push(this.createBand('content', i, null));\n        }\n        this.contentDataRows = contentDataRows;\n        this.footerData = this.createBand('footer', -1, null);\n        this.setupComplete = true;\n        this.updateWidth();\n        this.updateStyle();\n        this.updateName();\n        if (openPanelItem) {\n            this.panelItem.open();\n        }\n    }\n\n    createBand(band, index, dataValues) {\n        let data;\n        let dataKey = band + (band === 'content' ? 'DataRows' : 'Data');\n        let dataId;\n        let panelItemProperties = { hasChildren: true, showDelete: false };\n        if (dataValues) {\n            data = dataValues;\n        } else if (this[dataKey] && (band !== 'content' || index < this[dataKey].length)) {\n            if (band === 'content') {\n                data = this[dataKey][index];\n            } else {\n                data = this[dataKey];\n            }\n            dataId = data.id;\n        } else {\n            data = {};\n        }\n        data.parentId = this.id;\n        if (!dataId) {\n            dataId = this.rb.getUniqueId();\n        }\n        if ((band === 'header' && !this.header) || (band === 'footer' && !this.footer)) {\n            panelItemProperties.visible = false;\n        }\n        let bandElement = new TableBandElement(dataId, data, band, this.rb);\n        this.rb.addDataObject(bandElement);\n        let panelItemBand = new MainPanelItem('table_band', this.panelItem, bandElement, panelItemProperties, this.rb);\n        bandElement.setPanelItem(panelItemBand);\n        this.panelItem.appendChild(panelItemBand);\n        bandElement.setup();\n        let columns = utils.convertInputToNumber(this.columns);\n        bandElement.createColumns(columns, false);\n        panelItemBand.open();\n\n        if (band === 'header') {\n            bandElement.show(this.header);\n        } else if (band === 'footer') {\n            bandElement.show(this.footer);\n        }\n        return bandElement;\n    }\n\n    /**\n     * Returns highest id of this component including all its child components.\n     * @returns {Number}\n     */\n    getMaxId() {\n        let maxId = this.id;\n        let tempId;\n        tempId = this.headerData.getMaxId();\n        if (tempId > maxId) {\n            maxId = tempId;\n        }\n        for (let i=0; i < this.contentDataRows.length; i++) {\n            tempId = this.contentDataRows[i].getMaxId();\n            if (tempId > maxId) {\n                maxId = tempId;\n            }\n        }\n        tempId = this.footerData.getMaxId();\n        if (tempId > maxId) {\n            maxId = tempId;\n        }\n        return maxId;\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n        if (field === 'dataSource') {\n            this.updateName();\n        } else if (field === 'header') {\n            this.headerData.show(value);\n            if (value) {\n                this.headerData.getPanelItem().show();\n            } else {\n                this.headerData.getPanelItem().hide();\n            }\n        } else if (field === 'footer') {\n            this.footerData.show(value);\n            if (value) {\n                this.footerData.getPanelItem().show();\n            } else {\n                this.footerData.getPanelItem().hide();\n            }\n        } else if (field.indexOf('border') !== -1) {\n            if (field === 'borderWidth') {\n                this.borderWidthVal = utils.convertInputToNumber(value);\n            }\n            this.updateStyle();\n        }\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(x), top: this.rb.toPixel(y) };\n            this.el.css(props);\n        }\n    }\n\n    updateStyle() {\n        let elTable = this.el.find('table');\n        let i;\n        if (this.border === TableElement.border.grid || this.border === TableElement.border.frameRow ||\n                this.border === TableElement.border.frame) {\n            elTable.css({\n                'border-style': 'solid',\n                'border-width': this.borderWidthVal + 'px',\n                'border-color': this.borderColor\n            });\n        } else {\n            elTable.css({ 'border-style': 'none' });\n        }\n        let styleProperties;\n        if (this.border === TableElement.border.grid || this.border === TableElement.border.frameRow ||\n                this.border === TableElement.border.row) {\n            styleProperties = {\n                'border-style': 'solid none solid none',\n                'border-width': this.borderWidthVal + 'px',\n                'border-color': this.borderColor\n            };\n        } else {\n            styleProperties = { 'border-style': 'none' };\n        }\n        this.headerData.getElement().css(styleProperties);\n        for (i=0; i < this.contentDataRows.length; i++) {\n            this.contentDataRows[i].getElement().css(styleProperties);\n        }\n        this.footerData.getElement().css(styleProperties);\n\n        if (this.border === TableElement.border.grid) {\n            styleProperties = {\n                'border-style': 'none solid none solid',\n                'border-width': this.borderWidthVal + 'px',\n                'border-color': this.borderColor\n            };\n        } else {\n            styleProperties = { 'border-style': 'none' };\n        }\n        this.headerData.getElement().find('td').css(styleProperties);\n        for (i=0; i < this.contentDataRows.length; i++) {\n            this.contentDataRows[i].getElement().find('td').css(styleProperties);\n        }\n        this.footerData.getElement().find('td').css(styleProperties);\n\n        this.el.removeClass('rbroBorderTableGrid rbroBorderTableFrameRow rbroBorderTableFrame rbroBorderTableRow rbroBorderTableNone');\n        this.el.addClass('rbroBorderTable' + this.border.charAt(0).toUpperCase() + this.border.slice(1));\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'x', 'y', 'zIndex', 'dataSource', 'columns', 'header', 'contentRows', 'footer',\n            'border', 'borderColor', 'borderWidth',\n            'spreadsheet_hide', 'spreadsheet_column', 'spreadsheet_addEmptyRow'];\n    }\n\n    getElementType() {\n        return DocElement.type.table;\n    }\n\n    select() {\n        super.select();\n        let elSizerContainer = this.getSizerContainerElement();\n        for (let sizer of ['NE', 'SE', 'SW', 'NW']) {\n            elSizerContainer.append($(`<div class=\"rbroSizer rbroSizer${sizer} rbroSizerInactive\"></div>`));\n        }\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return [];\n    }\n\n    getXTagId() {\n        return 'rbro_table_element_position_x';\n    }\n\n    getYTagId() {\n        return 'rbro_table_element_position_y';\n    }\n\n    getWidthTagId() {\n        return 'rbro_table_element_width';\n    }\n\n    getHeightTagId() {\n        return 'rbro_table_element_height';\n    }\n\n    isDroppingAllowed() {\n        return false;\n    }\n\n    createElement() {\n        this.el = $(`<div class=\"rbroDocElement rbroTableElement\">\n                <table id=\"rbro_el_table${this.id}\">\n                    <thead id=\"rbro_el_table_header${this.id}\">\n                    </thead>\n                    <tbody id=\"rbro_el_table_content${this.id}\">\n                    </tbody>\n                    <tfoot id=\"rbro_el_table_footer${this.id}\">\n                    </tfoot>\n                </table>\n            </div>`);\n        this.appendToContainer();\n        this.registerEventHandlers();\n    }\n\n    remove() {\n        super.remove();\n        this.rb.deleteDataObject(this.headerData);\n        this.headerData.remove();\n        this.headerData = null;\n        for (let i=0; i < this.contentDataRows.length; i++) {\n            this.rb.deleteDataObject(this.contentDataRows[i]);\n            this.contentDataRows[i].remove();\n        }\n        this.contentDataRows = [];\n        this.rb.deleteDataObject(this.footerData);\n        this.footerData.remove();\n        this.footerData = null;\n    }\n\n    /**\n     * Is called when column width of a single column was changed to update the column width of all table bands.\n     * @param {Number} columnIndex - index of changed column.\n     * @param {Number} width - new column width.\n     * @param {Boolean} updateTableWidth - if true the table width will be updated as well.\n     */\n    updateColumnWidth(columnIndex, width, updateTableWidth) {\n        if (this.setupComplete) {\n            this.headerData.updateColumnWidth(columnIndex, width);\n            for (let i=0; i < this.contentDataRows.length; i++) {\n                this.contentDataRows[i].updateColumnWidth(columnIndex, width);\n            }\n            this.footerData.updateColumnWidth(columnIndex, width);\n            if (updateTableWidth) {\n                this.updateWidth();\n            }\n        }\n    }\n\n    /**\n     * Update table width based on width of all cells of content band.\n     */\n    updateWidth() {\n        if (this.setupComplete) {\n            let width = this.headerData.getWidth();\n            this.width = '' + width;\n            this.widthVal = width;\n            $(`#rbro_el_table${this.id}`).css('width', (this.widthVal + 1) + 'px');\n        }\n    }\n\n    /**\n     * Is called when column width of a cell was changed to update all DOM elements accordingly.\n     * @param {TableBandElement} tableBand - band containing the changed cell.\n     * @param {Number} columnIndex - column index of changed cell.\n     * @param {Number} newColumnWidth\n     */\n    notifyColumnWidthResized(tableBand, columnIndex, newColumnWidth) {\n        if (!this.setupComplete)\n            return;\n\n        if (tableBand !== this.headerData) {\n            let column = this.headerData.getColumn(columnIndex);\n            if (column !== null) {\n                column.updateDisplayInternalNotify(0, 0, newColumnWidth, column.getValue('heightVal'), false);\n            }\n        }\n        for (let i=0; i < this.contentDataRows.length; i++) {\n            if (tableBand !== this.contentDataRows[i]) {\n                let column = this.contentDataRows[i].getColumn(columnIndex);\n                if (column !== null) {\n                    column.updateDisplayInternalNotify(0, 0, newColumnWidth, column.getValue('heightVal'), false);\n                }\n            }\n        }\n        if (tableBand !== this.footerData) {\n            let column = this.footerData.getColumn(columnIndex);\n            if (column !== null) {\n                column.updateDisplayInternalNotify(0, 0, newColumnWidth, column.getValue('heightVal'), false);\n            }\n        }\n        let width = this.headerData.getWidth();\n        let column = this.headerData.getColumn(columnIndex);\n        if (column !== null) {\n            width -= column.getValue('widthVal') - newColumnWidth;\n        }\n        $(`#rbro_el_table${this.id}`).css('width', (width + 1) + 'px');\n    }\n\n    updateName() {\n        this.name = this.rb.getLabel('docElementTable');\n        if (this.dataSource.trim() !== '') {\n            this.name += ' ' + this.dataSource;\n        }\n        $(`#rbro_menu_item_name${this.id}`).text(this.name);\n    }\n\n    /**\n     * Returns all parameters of the data source (which must be an array parameter).\n     * @returns {[Object]} contains the data source name and all parameters of the data source.\n     */\n    getDataSource() {\n        let parameters = [];\n        let dataSource = this.dataSource.trim();\n        let dataSourceParameter = '';\n        if (dataSource.length >= 3 && dataSource.substr(0, 2) === '${' &&\n                dataSource.charAt(dataSource.length - 1) === '}') {\n            dataSourceParameter = dataSource.substring(2, dataSource.length - 1);\n            let param = this.rb.getParameterByName(dataSourceParameter);\n            if (param !== null && param.getValue('type') === Parameter.type.array) {\n                parameters = param.getChildren();\n            }\n        }\n        return { name: dataSourceParameter, parameters: parameters };\n    }\n\n    addChildren(docElements) {\n        let i;\n        docElements.push(this.headerData);\n        for (i=0; i < this.contentDataRows.length; i++) {\n            docElements.push(this.contentDataRows[i]);\n        }\n        docElements.push(this.footerData);\n        this.headerData.addChildren(docElements);\n        for (i=0; i < this.contentDataRows.length; i++) {\n            this.contentDataRows[i].addChildren(docElements);\n        }\n        this.footerData.addChildren(docElements);\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_table_element_data_source', 'dataSource', cmdGroup);\n    }\n\n    /**\n     * Adds commands to command group parameter to recreate table with new column count.\n     * @param {Number} columns - requested new column count.\n     * @param {CommandGroupCmd} cmdGroup - possible commands will be added to this command group.\n     * @returns {Number} either new column count or existing column count in case there is not enough space\n     * for all column.\n     */\n    addCommandsForChangedColumns(columns, cmdGroup) {\n        const COLUMN_MIN_WIDTH = 20;\n        let existingColumns = utils.convertInputToNumber(this.columns);\n        let maxColumns = Math.floor(this.widthVal / COLUMN_MIN_WIDTH);\n        if (columns > existingColumns && columns > maxColumns) {\n            // not enough space for all columns\n            return existingColumns;\n        }\n\n        // delete table with current settings and restore below with new columns, necessary for undo/redo\n        let cmd = new AddDeleteDocElementCmd(false, this.getPanelItem().getPanelName(),\n            this.toJS(), this.id, this.getContainerId(), -1, this.rb);\n        cmdGroup.addCommand(cmd);\n\n        if (columns > existingColumns) {\n            let newColumns = columns - existingColumns;\n            let spaceNeeded = newColumns * COLUMN_MIN_WIDTH;\n            // reduce width of all existing columns until there is enough space\n            let i = existingColumns - 1;\n            while (i >= 0) {\n                let column = this.headerData.getColumn(i);\n                let freeSpace = column.getValue('widthVal') - COLUMN_MIN_WIDTH;\n                let newWidth = COLUMN_MIN_WIDTH;\n                if (freeSpace > spaceNeeded) {\n                    newWidth = column.getValue('widthVal') - spaceNeeded;\n                }\n                this.updateColumnWidth(i, newWidth, false);\n                spaceNeeded -= freeSpace;\n                if (spaceNeeded <= 0)\n                    break;\n                i--;\n            }\n        } else if (columns < existingColumns) {\n            let usedWidth = 0;\n            for (let i=0; i < columns; i++) {\n                usedWidth += this.headerData.getColumn(i).getValue('widthVal');\n            }\n            // add remaining space to last column\n            let column = this.headerData.getColumn(columns - 1);\n            if (this.widthVal - usedWidth > 0) {\n                this.updateColumnWidth(columns - 1, column.getValue('widthVal') + (this.widthVal - usedWidth), false);\n            }\n        }\n\n        this.columns = columns;\n        this.headerData.createColumns(columns, true);\n        for (let i=0; i < this.contentDataRows.length; i++) {\n            this.contentDataRows[i].createColumns(columns, true);\n        }\n        this.footerData.createColumns(columns, true);\n\n        // restore table with new column count and updated settings\n        cmd = new AddDeleteDocElementCmd(true, this.getPanelItem().getPanelName(),\n            this.toJS(), this.id, this.getContainerId(), -1, this.rb);\n        cmdGroup.addCommand(cmd);\n        \n        return columns;\n    }\n\n    /**\n     * Adds commands to command group parameter to recreate table with new content rows.\n     * @param {Number} contentRows - new content rows count.\n     * @param {CommandGroupCmd} cmdGroup - possible commands will be added to this command group.\n     */\n    addCommandsForChangedContentRows(contentRows, cmdGroup) {\n        if (contentRows === utils.convertInputToNumber(this.contentRows)) {\n            return;\n        }\n        // delete table with current settings and restore below with new columns, necessary for undo/redo\n        let cmd = new AddDeleteDocElementCmd(false, this.getPanelItem().getPanelName(),\n            this.toJS(), this.id, this.getContainerId(), -1, this.rb);\n        cmdGroup.addCommand(cmd);\n\n        let i;\n        if (contentRows < this.contentDataRows.length) {\n            for (i = contentRows; i < this.contentDataRows.length; i++) {\n                this.rb.deleteDataObject(this.contentDataRows[i]);\n                this.contentDataRows[i].remove();\n            }\n            this.contentDataRows.splice(contentRows, this.contentDataRows.length - contentRows);\n        } else {\n            let data;\n            if (this.contentDataRows.length > 0) {\n                data = { height: this.contentDataRows[0].height, columnData: [] };\n                for (let columnData of this.contentDataRows[0].columnData) {\n                    data.columnData.push({ width: columnData.width });\n                }\n            }\n            for (i = this.contentDataRows.length; i < contentRows; i++) {\n                this.contentDataRows.push(this.createBand('content', i, data));\n            }\n        }\n\n        this.contentRows = '' + contentRows;\n        // restore table with new content rows and updated settings\n        cmd = new AddDeleteDocElementCmd(true, this.getPanelItem().getPanelName(),\n            this.toJS(), this.id, this.getContainerId(), -1, this.rb);\n        cmdGroup.addCommand(cmd);\n    }\n\n    toJS() {\n        let ret = super.toJS();\n        ret['headerData'] = this.headerData.toJS();\n        let contentDataRows = [];\n        for (let i=0; i < this.contentDataRows.length; i++) {\n            contentDataRows.push(this.contentDataRows[i].toJS());\n        }\n        ret['contentDataRows'] = contentDataRows;\n        ret['footerData'] = this.footerData.toJS();\n        return ret;\n    }\n\n    static removeIds(data) {\n        for (let bandKey of ['headerData', 'footerData']) {\n            TableElement.removeBandIds(data[bandKey]);\n        }\n        for (let i=0; i < data.contentDataRows.length; i++) {\n            TableElement.removeBandIds(data.contentDataRows[i]);\n        }\n    }\n\n    static removeBandIds(bandData) {\n        delete bandData.id;\n        let columns = bandData.columnData;\n        for (let column of columns) {\n            delete column.id;\n        }\n    }\n}\n\nTableElement.border = {\n    grid: 'grid',\n    frameRow: 'frame_row',\n    frame: 'frame',\n    row: 'row',\n    none: 'none'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/TableElement.js\n// module id = 15\n// module chunks = 0","import DocElement from './DocElement';\nimport TextElement from './TextElement';\nimport Band from '../container/Band';\nimport * as utils from '../utils';\n\n/**\n * Table text doc element. A text element inside a table cell.\n * @class\n */\nexport default class TableTextElement extends TextElement {\n    constructor(id, initialData, rb) {\n        super(id, initialData, rb);\n        this.columnIndex = initialData.columnIndex;\n        this.parentId = initialData.parentId;\n        this.tableId = initialData.tableId;\n    }\n\n    registerEventHandlers() {\n        this.el\n            .dblclick(event => {\n                if (!this.rb.isSelectedObject(this.id)) {\n                    if (this.rb.isSelectedObject(this.tableId)) {\n                        this.rb.selectObject(this.id, !event.shiftKey);\n                        event.stopPropagation();\n                    }\n                }\n            })\n            .mousedown(event => {\n                if (!this.rb.isSelectedObject(this.id)) {\n                    if (this.rb.isTableElementSelected(this.tableId)) {\n                        this.rb.selectObject(this.id, !event.shiftKey);\n                        event.stopPropagation();\n                    }\n                } else {\n                    if (event.shiftKey) {\n                        this.rb.deselectObject(this.id);\n                    }\n                    event.stopPropagation();\n                }\n            });\n    }\n\n    getContainerId() {\n        let table = this.getTable();\n        if (table !== null) {\n            return table.getContainerId();\n        }\n        return null;\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n        if (field === 'width') {\n            let tableObj = this.rb.getDataObject(this.tableId);\n            if (tableObj !== null) {\n                tableObj.updateColumnWidth(this.columnIndex, value, true);\n            }\n        } else if (field === 'height') {\n            this.updateDisplayInternalNotify(0, 0, this.widthVal, this.heightVal, false);\n        }\n    }\n\n    updateColumnWidth(width) {\n        this.width = width;\n        this.widthVal = utils.convertInputToNumber(this.width);\n        this.updateDisplayInternalNotify(0, 0, this.widthVal, this.heightVal, false);\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        let fields = ['id', 'width', 'height', 'content', 'zIndex', 'eval',\n            'styleId', 'bold', 'italic', 'underline',\n            'horizontalAlignment', 'verticalAlignment', 'textColor', 'backgroundColor', 'font', 'fontSize', 'lineSpacing',\n            'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom',\n            'removeEmptyElement', 'alwaysPrintOnSamePage', 'pattern',\n            'cs_condition', 'cs_styleId', 'cs_bold', 'cs_italic', 'cs_underline',\n            'cs_horizontalAlignment', 'cs_verticalAlignment', 'cs_textColor', 'cs_backgroundColor',\n            'cs_font', 'cs_fontSize', 'cs_lineSpacing',\n            'cs_paddingLeft', 'cs_paddingTop', 'cs_paddingRight', 'cs_paddingBottom'];\n        let tableBandObj = this.rb.getDataObject(this.parentId);\n        if (tableBandObj !== null && tableBandObj.getValue('bandType') === Band.bandType.header) {\n            fields.push('printIf');\n        }\n        return fields;\n    }\n\n    getElementType() {\n        return DocElement.type.tableText;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        this.updateDisplayInternalNotify(x, y, width, height, true);\n    }\n\n    updateDisplayInternalNotify(x, y, width, height, notifyTableElement) {\n        if (this.el !== null) {\n            // set td width to width - 1 because border consumes 1 pixel\n            let props = { width: this.rb.toPixel(width - 1) };\n            this.el.css(props);\n        }\n        // update inner text element width\n        let contentSize = this.getContentSize(width, height, this.getStyle());\n        $(`#rbro_el_content_text${this.id}`).css({ width: this.rb.toPixel(contentSize.width), height: this.rb.toPixel(contentSize.height) });\n\n        if (notifyTableElement) {\n            let tableObj = this.rb.getDataObject(this.tableId);\n            if (tableObj !== null) {\n                let tableBandObj = this.rb.getDataObject(this.parentId);\n                tableObj.notifyColumnWidthResized(tableBandObj, this.columnIndex, width);\n            }\n        }\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return ['E'];\n    }\n\n    getXTagId() {\n        return '';\n    }\n\n    getYTagId() {\n        return '';\n    }\n\n    getWidthTagId() {\n        return 'rbro_text_element_width';\n    }\n\n    getHeightTagId() {\n        return '';\n    }\n\n    hasBorderSettings() {\n        return false;\n    }\n\n    isDraggingAllowed() {\n        return false;\n    }\n\n    isDroppingAllowed() {\n        return false;\n    }\n\n    /**\n     * Returns maximum allowed width of element.\n     * This is needed when the element is resized by dragging so the resized element does not overflow its container.\n     * @returns {Number}.\n     */\n    getMaxWidth() {\n        let tableObj = this.rb.getDataObject(this.tableId);\n        let tableBandObj = this.rb.getDataObject(this.parentId);\n        if (tableObj !== null && tableBandObj !== null) {\n            let contentWidth = this.rb.getDocumentProperties().getContentSize().width;\n            let widths = tableBandObj.getColumnWidths();\n            let widthOther = 0;  // width of other cells\n            for (let i = 0; i < widths.length; i++) {\n                if (i !== this.columnIndex) {\n                    widthOther += widths[i];\n                }\n            }\n            return contentWidth - widthOther - tableObj.xVal;\n        }\n        return 0;\n    }\n\n    /**\n     * Returns x-offset relative to table.\n     * @returns {Number}.\n     */\n    getOffsetX() {\n        let tableBandObj = this.rb.getDataObject(this.parentId);\n        if (tableBandObj !== null) {\n            let widths = tableBandObj.getColumnWidths();\n            let offsetX = 0;\n            for (let i = 0; i < this.columnIndex; i++) {\n                offsetX += widths[i];\n            }\n            return offsetX;\n        }\n        return 0;\n    }\n\n    createElement() {\n        this.el = $(`<td id=\"rbro_el${this.id}\" class=\"rbroTableTextElement\"></td>`)\n            .append($(`<div id=\"rbro_el_content${this.id}\" class=\"rbroContentContainerHelper\"></div>`)\n                .append($(`<div id=\"rbro_el_content_text${this.id}\" class=\"rbroDocElementContentText\"></div>`)\n                    .append($(`<span id=\"rbro_el_content_text_data${this.id}\"></span>`))\n            ));\n        $(`#rbro_el_table_band${this.parentId}`).append(this.el);\n        $(`#rbro_el_content_text_data${this.id}`).text(this.content);\n        this.registerEventHandlers();\n    }\n\n    getParent() {\n        return this.rb.getDataObject(this.parentId);\n    }\n\n    getTable() {\n        return this.rb.getDataObject(this.tableId);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/TableTextElement.js\n// module id = 16\n// module chunks = 0","import DocElement from './DocElement';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Style from '../data/Style';\nimport * as utils from '../utils';\n\n/**\n * Text doc element.\n * @class\n */\nexport default class TextElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementText'), id, 100, 20, rb);\n        this.content = '';\n        this.eval = false;\n\n        this.styleId = '';\n        this.bold = false;\n        this.italic = false;\n        this.underline = false;\n        this.horizontalAlignment = Style.alignment.left;\n        this.verticalAlignment = Style.alignment.top;\n        this.textColor = '#000000';\n        this.backgroundColor = '';\n        this.font = Style.font.helvetica;\n        this.fontSize = 12;\n        this.lineSpacing = 1;\n        this.borderColor = '#000000';\n        this.borderWidth = '1';\n        this.borderAll = false;\n        this.borderLeft = false;\n        this.borderTop = false;\n        this.borderRight = false;\n        this.borderBottom = false;\n        this.paddingLeft = '2';\n        this.paddingTop = '2';\n        this.paddingRight = '2';\n        this.paddingBottom = '2';\n        \n        this.cs_condition = '';\n        this.cs_styleId = '';\n        this.cs_bold = false;\n        this.cs_italic = false;\n        this.cs_underline = false;\n        this.cs_horizontalAlignment = Style.alignment.left;\n        this.cs_verticalAlignment = Style.alignment.top;\n        this.cs_textColor = '#000000';\n        this.cs_backgroundColor = '';\n        this.cs_font = Style.font.helvetica;\n        this.cs_fontSize = 12;\n        this.cs_lineSpacing = 1;\n        this.cs_borderColor = '#000000';\n        this.cs_borderWidth = '1';\n        this.cs_borderAll = false;\n        this.cs_borderLeft = false;\n        this.cs_borderTop = false;\n        this.cs_borderRight = false;\n        this.cs_borderBottom = false;\n        this.cs_paddingLeft = '2';\n        this.cs_paddingTop = '2';\n        this.cs_paddingRight = '2';\n        this.cs_paddingBottom = '2';\n        \n        this.alwaysPrintOnSamePage = true;\n        this.pattern = '';\n\n        this.spreadsheet_hide = false;\n        this.spreadsheet_column = '';\n        this.spreadsheet_colspan = '';\n        this.spreadsheet_addEmptyRow = false;\n\n        this.setInitialData(initialData);\n\n        this.borderWidthVal = utils.convertInputToNumber(this.borderWidth);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        this.updateDisplay();\n        this.updateStyle();\n        this.updateContent(this.content);\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        if (field.indexOf('border') !== -1) {\n            // Style.setBorderValue needs to be called before super.setValue because it calls updateStyle() which expects\n            // the correct border settings\n            this[field] = value;\n            if (field.substr(0, 3) === 'cs_') {\n                Style.setBorderValue(this, field, 'cs_', value, elSelector, isShown);\n            } else {\n                if (field === 'borderWidth') {\n                    this.borderWidthVal = utils.convertInputToNumber(value);\n                }\n                Style.setBorderValue(this, field, '', value, elSelector, isShown);\n            }\n        }\n\n        super.setValue(field, value, elSelector, isShown);\n\n        if (field === 'content') {\n            this.updateContent(value);\n        } else if (field === 'width' || field === 'height') {\n            this.updateDisplay();\n        } else if (field === 'styleId') {\n            if (value !== '') {\n                $('#rbro_text_element_style_settings').hide();\n            } else {\n                $('#rbro_text_element_style_settings').show();\n            }\n        } else if (field === 'cs_styleId') {\n            if (value !== '') {\n                $('#rbro_text_element_cs_style_settings').hide();\n            } else {\n                $('#rbro_text_element_cs_style_settings').show();\n            }\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'x', 'y', 'width', 'height', 'zIndex', 'content', 'eval',\n            'styleId', 'bold', 'italic', 'underline',\n            'horizontalAlignment', 'verticalAlignment', 'textColor', 'backgroundColor', 'font', 'fontSize',\n            'lineSpacing', 'borderColor', 'borderWidth',\n            'borderAll', 'borderLeft', 'borderTop', 'borderRight', 'borderBottom',\n            'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom',\n            'printIf', 'removeEmptyElement', 'alwaysPrintOnSamePage', 'pattern',\n            'cs_condition', 'cs_styleId', 'cs_bold', 'cs_italic', 'cs_underline',\n            'cs_horizontalAlignment', 'cs_verticalAlignment', 'cs_textColor', 'cs_backgroundColor', 'cs_font', 'cs_fontSize',\n            'cs_lineSpacing', 'cs_borderColor', 'cs_borderWidth',\n            'cs_borderAll', 'cs_borderLeft', 'cs_borderTop', 'cs_borderRight', 'cs_borderBottom',\n            'cs_paddingLeft', 'cs_paddingTop', 'cs_paddingRight', 'cs_paddingBottom',\n            'spreadsheet_hide', 'spreadsheet_column', 'spreadsheet_colspan', 'spreadsheet_addEmptyRow'];\n    }\n\n    getElementType() {\n        return DocElement.type.text;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(x), top: this.rb.toPixel(y),\n                width: this.rb.toPixel(width), height: this.rb.toPixel(height) };\n            this.el.css(props);\n        }\n        // update inner text element size\n        let contentSize = this.getContentSize(width, height, this.getStyle());\n        let styleProperties = {};\n        styleProperties['width'] = this.rb.toPixel(contentSize.width);\n        styleProperties['height'] = this.rb.toPixel(contentSize.height);\n        $(`#rbro_el_content_text${this.id}`).css(styleProperties);\n    }\n\n    getStyle() {\n        let style = this;\n        if (this.styleId !== '') {\n            let styleObj = this.rb.getDataObject(this.styleId);\n            if (styleObj !== null) {\n                style = styleObj;\n            }\n        }\n        return style;\n    }\n\n    getContentSize(width, height, style) {\n        let borderWidth = style.getValue('borderWidthVal');\n        width -= utils.convertInputToNumber(style.getValue('paddingLeft')) + utils.convertInputToNumber(style.getValue('paddingRight'));\n        if (style.getValue('borderLeft')) {\n            width -= borderWidth;\n        }\n        if (style.getValue('borderRight')) {\n            width -= borderWidth;\n        }\n        height -= utils.convertInputToNumber(style.getValue('paddingTop')) + utils.convertInputToNumber(style.getValue('paddingBottom'));\n        if (style.getValue('borderTop')) {\n            height -= borderWidth;\n        }\n        if (style.getValue('borderBottom')) {\n            height -= borderWidth;\n        }\n        return { width: width, height: height };\n    }\n\n    updateStyle() {\n        let styleProperties = {};\n        let borderStyleProperties = {};\n        let style = this.getStyle();\n        let contentSize = this.getContentSize(this.widthVal, this.heightVal, style);\n        let horizontalAlignment = style.getValue('horizontalAlignment');\n        let verticalAlignment = style.getValue('verticalAlignment');\n        let alignClass = 'rbroDocElementAlign' + horizontalAlignment.charAt(0).toUpperCase() + horizontalAlignment.slice(1);\n        let valignClass = 'rbroDocElementVAlign' + verticalAlignment.charAt(0).toUpperCase() + verticalAlignment.slice(1);\n        styleProperties['width'] = this.rb.toPixel(contentSize.width);\n        styleProperties['height'] = this.rb.toPixel(contentSize.height);\n        styleProperties['text-align'] = horizontalAlignment;\n        styleProperties['vertical-align'] = verticalAlignment;\n        styleProperties['background-color'] = style.getValue('backgroundColor');\n        styleProperties['font-weight'] = style.getValue('bold') ? 'bold' : '';\n        styleProperties['font-style'] = style.getValue('italic') ? 'italic' : 'normal';\n        styleProperties['text-decoration'] = style.getValue('underline') ? 'underline' : 'none';\n        styleProperties['color'] = style.getValue('textColor');\n        styleProperties['font-family'] = style.getValue('font');\n        styleProperties['font-size'] = style.getValue('fontSize') + 'px';\n        styleProperties['line-height'] = (style.getValue('lineSpacing') * 100.0) + '%';\n        if (style.getValue('borderLeft') || style.getValue('borderTop') ||\n                style.getValue('borderRight') || style.getValue('borderBottom')) {\n            borderStyleProperties['border-style'] = style.getValue('borderTop') ? 'solid' : 'none';\n            borderStyleProperties['border-style'] += style.getValue('borderRight') ? ' solid' : ' none';\n            borderStyleProperties['border-style'] += style.getValue('borderBottom') ? ' solid' : ' none';\n            borderStyleProperties['border-style'] += style.getValue('borderLeft') ? ' solid' : ' none';\n            borderStyleProperties['border-width'] = style.getValue('borderWidthVal') + 'px';\n            borderStyleProperties['border-color'] = style.getValue('borderColor');\n        } else {\n            borderStyleProperties['border-style'] = 'none';\n        }\n        if (style.getValue('paddingLeft') !== '' || style.getValue('paddingTop') !== '' ||\n                style.getValue('paddingRight') !== '' || style.getValue('paddingBottom') !== '') {\n            styleProperties['padding'] = this.rb.toPixel(style.getValue('paddingTop'));\n            styleProperties['padding'] += ' ' + this.rb.toPixel(style.getValue('paddingRight'));\n            styleProperties['padding'] += ' ' + this.rb.toPixel(style.getValue('paddingBottom'));\n            styleProperties['padding'] += ' ' + this.rb.toPixel(style.getValue('paddingLeft'));\n        } else {\n            styleProperties['padding'] = '';\n        }\n        $(`#rbro_el_content${this.id}`).css(borderStyleProperties);\n        $(`#rbro_el_content${this.id}`).removeClass().addClass('rbroContentContainerHelper').addClass(alignClass).addClass(valignClass);\n        $(`#rbro_el_content_text${this.id}`).css(styleProperties);\n    }\n\n    getXTagId() {\n        return 'rbro_text_element_position_x';\n    }\n\n    getYTagId() {\n        return 'rbro_text_element_position_y';\n    }\n\n    getWidthTagId() {\n        return 'rbro_text_element_width';\n    }\n\n    getHeightTagId() {\n        return 'rbro_text_element_height';\n    }\n\n    hasBorderSettings() {\n        return true;\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroDocElement rbroTextElement\"></div>`);\n        // rbroContentContainerHelper contains border styles and alignment classes\n        // rbroDocElementContentText contains specific styles\n        // span is needed to preserve whitespaces and word-wrap of actual text content\n        this.el\n            .append($(`<div id=\"rbro_el_content${this.id}\" class=\"rbroContentContainerHelper\"></div>`)\n                .append($(`<div id=\"rbro_el_content_text${this.id}\" class=\"rbroDocElementContentText\"></div>`)\n                    .append($(`<span id=\"rbro_el_content_text_data${this.id}\"></span>`))\n            ));\n        this.appendToContainer();\n        $(`#rbro_el_content_text_data${this.id}`).text(this.content);\n        super.registerEventHandlers();\n    }\n\n    updateContent(value) {\n        if (value.trim() === '') {\n            this.name = this.rb.getLabel('docElementText');\n        } else {\n            this.name = value;\n        }\n        $(`#rbro_menu_item_name${this.id}`).text(this.name);\n        $(`#rbro_menu_item_name${this.id}`).attr('title', this.name);\n        $(`#rbro_el_content_text_data${this.id}`).text(value);\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_text_element_content', 'content', cmdGroup);\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_text_element_print_if', 'printIf', cmdGroup);\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_text_element_cs_condition', 'cs_condition', cmdGroup);\n    }\n\n    toJS() {\n        let ret = super.toJS();\n        for (let field of ['borderWidth', 'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom',\n                'cs_paddingLeft', 'cs_paddingTop', 'cs_paddingRight', 'cs_paddingBottom']) {\n            ret[field] = utils.convertInputToNumber(this.getValue(field));\n        }\n        return ret;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/TextElement.js\n// module id = 17\n// module chunks = 0","import Command from './Command';\nimport Parameter from '../data/Parameter';\nimport MainPanelItem from '../menu/MainPanelItem';\n\n/**\n * Command to add and delete a parameter.\n * @class\n */\nexport default class AddDeleteParameterCmd {\n    constructor(add, initialData, id, parentId, position, rb) {\n        this.add = add;\n        this.initialData = initialData;\n        this.parentId = parentId;\n        this.position = position;\n        this.rb = rb;\n        this.id = id;\n    }\n\n    getName() {\n        if (this.add) {\n            return 'Add parameter';\n        } else {\n            return 'Delete parameter';\n        }\n    }\n\n    do() {\n        if (this.add) {\n            this.addParameter();\n        } else {\n            this.deleteParameter();\n        }\n    }\n\n    undo() {\n        if (this.add) {\n            this.deleteParameter();\n        } else {\n            this.addParameter();\n        }\n    }\n\n    addParameter() {\n        let parent = this.rb.getDataObject(this.parentId);\n        if (parent !== null) {\n            let parameter = new Parameter(this.id, this.initialData, this.rb);\n            this.rb.addParameter(parameter);\n            let panelItem = new MainPanelItem(\n                'parameter', parent.getPanelItem(), parameter, { hasChildren: true, showAdd: true, draggable: true }, this.rb);\n            panelItem.openParentItems();\n            parameter.setPanelItem(panelItem);\n            parent.getPanelItem().insertChild(this.position, panelItem);\n            parameter.setup();\n            this.rb.notifyEvent(parameter, Command.operation.add);\n        }\n    }\n\n    deleteParameter() {\n        let parameter = this.rb.getDataObject(this.id);\n        if (parameter !== null) {\n            this.initialData = parameter.toJS();\n            this.rb.notifyEvent(parameter, Command.operation.remove);\n            this.rb.deleteParameter(parameter);\n            parameter.getPanelItem().getParent().removeChild(parameter.getPanelItem());\n        }\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/AddDeleteParameterCmd.js\n// module id = 18\n// module chunks = 0","import Command from './Command';\nimport Style from '../data/Style';\nimport MainPanelItem from '../menu/MainPanelItem';\n\n/**\n * Command to add and delete a style.\n * @class\n */\nexport default class AddDeleteStyleCmd {\n    constructor(add, initialData, id, parentId, position, rb) {\n        this.add = add;\n        this.initialData = initialData;\n        this.parentId = parentId;\n        this.position = position;\n        this.rb = rb;\n        this.id = id;\n    }\n\n    getName() {\n        if (this.add) {\n            return 'Add style';\n        } else {\n            return 'Delete style';\n        }\n    }\n\n    do() {\n        if (this.add) {\n            this.addStyle();\n        } else {\n            this.deleteStyle();\n        }\n    }\n\n    undo() {\n        if (this.add) {\n            this.deleteStyle();\n        } else {\n            this.addStyle();\n        }\n    }\n\n    addStyle() {\n        let parent = this.rb.getDataObject(this.parentId);\n        if (parent !== null) {\n            let style = new Style(this.id, this.initialData, this.rb);\n            let panelItem = new MainPanelItem('style', parent.getPanelItem(), style, { draggable: true }, this.rb);\n            panelItem.openParentItems();\n            style.setPanelItem(panelItem);\n            parent.getPanelItem().insertChild(this.position, panelItem);\n            this.rb.addStyle(style);\n        }\n    }\n\n    deleteStyle() {\n        let style = this.rb.getDataObject(this.id);\n        if (style !== null) {\n            this.initialData = style.toJS();\n            this.rb.deleteStyle(style);\n            style.getPanelItem().getParent().removeChild(style.getPanelItem());\n        }\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/AddDeleteStyleCmd.js\n// module id = 19\n// module chunks = 0","import Command from './Command';\nimport DocElement from '../elements/DocElement';\nimport Document from '../Document';\n\n/**\n * Command to move a menu panel item. In case the item is moved to a different container (e.g. from content to header band)\n * the corresponding doc element is moved to the new container as well.\n * @class\n */\nexport default class MovePanelItemCmd {\n    constructor(panelItem, moveToParentPanel, moveToPosition, rb) {\n        this.objId = panelItem.getId();\n        this.moveToParentId = moveToParentPanel.getId();\n        this.moveToPosition = moveToPosition;\n        this.oldParentId = panelItem.getParent().getId();\n        this.oldPosition = panelItem.getSiblingPosition();\n        this.oldContainerId = null;\n        this.moveToContainerId = null;\n        if (panelItem.getData() instanceof DocElement) {\n            let docElement = panelItem.getData();\n            this.oldContainerId = docElement.getValue('containerId');\n            let moveToContainer = rb.getMainPanel().getContainerByItem(moveToParentPanel);\n            if (moveToContainer !== null) {\n                this.moveToContainerId = moveToContainer.getId();\n            }\n        }\n        this.rb = rb;\n    }\n\n    getName() {\n        return 'Move panel item';\n    }\n\n    do() {\n        let pos = this.moveToPosition;\n        if (this.moveToParentId === this.oldParentId && this.oldPosition < pos) {\n            pos--;\n        }\n        this.moveTo(this.moveToParentId, pos, (this.moveToContainerId !== this.oldContainerId) ? this.moveToContainerId : null);\n    }\n\n    undo() {\n        this.moveTo(this.oldParentId, this.oldPosition, (this.moveToContainerId !== this.oldContainerId) ? this.oldContainerId : null);\n    }\n\n    moveTo(toParentId, toPosition, toContainerId) {\n        let obj = this.rb.getDataObject(this.objId);\n        let parent = this.rb.getDataObject(toParentId);\n        if (obj !== null && parent !== null) {\n            obj.getPanelItem().moveToPosition(parent.getPanelItem(), toPosition);\n            obj.getPanelItem().openParentItems();\n            this.rb.notifyEvent(obj, Command.operation.move);\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/commands/MovePanelItemCmd.js\n// module id = 20\n// module chunks = 0","import DocElement from './DocElement';\nimport AddDeleteDocElementCmd from '../commands/AddDeleteDocElementCmd';\nimport Frame from '../container/Frame';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Style from '../data/Style';\nimport MainPanelItem from '../menu/MainPanelItem';\nimport * as utils from '../utils';\n\n/**\n * Frame element. Frames can contain any number of other doc element. These doc elements\n * are positioned relative to the frame.\n * @class\n */\nexport default class FrameElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementFrame'), id, 100, 100, rb);\n        this.frame = null;\n        this.setupComplete = false;\n        this.label = '';\n        this.backgroundColor = '';\n        this.borderAll = false;\n        this.borderLeft = false;\n        this.borderTop = false;\n        this.borderRight = false;\n        this.borderBottom = false;\n        this.borderColor = '#000000';\n        this.borderWidth = '1';\n        \n        this.shrinkToContentHeight = false;\n\n        this.spreadsheet_hide = false;\n        this.spreadsheet_column = '';\n        this.spreadsheet_addEmptyRow = false;\n        \n        this.setInitialData(initialData);\n\n        this.borderWidthVal = utils.convertInputToNumber(this.borderWidth);\n    }\n\n    setup(openPanelItem) {\n        this.borderWidthVal = utils.convertInputToNumber(this.borderWidth);\n        super.setup();\n        this.createElement();\n        this.updateDisplay();\n\n        if (this.linkedContainerId === null) {\n            this.linkedContainerId = this.rb.getUniqueId();\n        }\n        this.frame = new Frame(this.linkedContainerId, 'frame_' + this.linkedContainerId, this.rb);\n        this.frame.init(this);\n        this.rb.addContainer(this.frame);\n\n        this.setupComplete = true;\n        this.updateStyle();\n        this.updateName();\n        if (openPanelItem){\n            this.panelItem.open();\n        }\n    }\n\n    /**\n     * Returns highest id of this component, this is the id of the linked container because it is\n     * created after the frame element.\n     * @returns {Number}\n     */\n    getMaxId() {\n        return this.linkedContainerId;\n    }\n    \n    setValue(field, value, elSelector, isShown) {\n        if (field.indexOf('border') !== -1) {\n            // Style.setBorderValue needs to be called before super.setValue because it calls updateStyle() which expects\n            // the correct border settings\n            this[field] = value;\n            if (field === 'borderWidth') {\n                this.borderWidthVal = utils.convertInputToNumber(value);\n            }\n            Style.setBorderValue(this, field, '', value, elSelector, isShown);\n        }\n\n        super.setValue(field, value, elSelector, isShown);\n\n        if (field === 'label') {\n            this.updateName();\n        }\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(x), top: this.rb.toPixel(y),\n                width: this.rb.toPixel(width), height: this.rb.toPixel(height) };\n            this.el.css(props);\n        }\n        // update inner frame element size\n        if (this.borderLeft) {\n            width -= this.borderWidthVal;\n        }\n        if (this.borderRight) {\n            width -= this.borderWidthVal;\n        }\n        if (this.borderTop) {\n            height -= this.borderWidthVal;\n        }\n        if (this.borderBottom) {\n            height -= this.borderWidthVal;\n        }\n\n        let styleProperties = {};\n        styleProperties['width'] = this.rb.toPixel(width);\n        styleProperties['height'] = this.rb.toPixel(height);\n        $(`#rbro_el_content_frame${this.id}`).css(styleProperties);\n    }\n\n    updateStyle() {\n        let styleProperties = {};\n        let borderStyleProperties = {};\n        styleProperties['background-color'] = this.getValue('backgroundColor');\n        if (this.getValue('borderLeft') || this.getValue('borderTop') ||\n                this.getValue('borderRight') || this.getValue('borderBottom')) {\n            borderStyleProperties['border-style'] = this.getValue('borderTop') ? 'solid' : 'none';\n            borderStyleProperties['border-style'] += this.getValue('borderRight') ? ' solid' : ' none';\n            borderStyleProperties['border-style'] += this.getValue('borderBottom') ? ' solid' : ' none';\n            borderStyleProperties['border-style'] += this.getValue('borderLeft') ? ' solid' : ' none';\n            borderStyleProperties['border-width'] = this.getValue('borderWidthVal') + 'px';\n            borderStyleProperties['border-color'] = this.getValue('borderColor');\n        } else {\n            borderStyleProperties['border-style'] = 'none';\n        }\n        $(`#rbro_el_content${this.id}`).css(borderStyleProperties);\n        this.el.css(styleProperties);\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'linkedContainerId', 'label',\n            'x', 'y', 'width', 'height', 'zIndex', 'backgroundColor',\n            'borderAll', 'borderLeft', 'borderTop', 'borderRight', 'borderBottom', 'borderColor', 'borderWidth',\n            'printIf', 'removeEmptyElement', 'shrinkToContentHeight',\n            'spreadsheet_hide', 'spreadsheet_column', 'spreadsheet_addEmptyRow'];\n    }\n\n    getElementType() {\n        return DocElement.type.frame;\n    }\n\n    getXTagId() {\n        return 'rbro_frame_element_position_x';\n    }\n\n    getYTagId() {\n        return 'rbro_frame_element_position_y';\n    }\n\n    getWidthTagId() {\n        return 'rbro_frame_element_width';\n    }\n\n    getHeightTagId() {\n        return 'rbro_frame_element_height';\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroDocElement rbroFrameElement rbroElementContainer\"></div>`);\n        // rbroContentContainerHelper contains border styles\n        // rbroDocElementContentFrame contains width and height\n        this.el\n            .append($(`<div id=\"rbro_el_content${this.id}\" class=\"rbroContentContainerHelper\"></div>`)\n                .append($(`<div id=\"rbro_el_content_frame${this.id}\" class=\"rbroDocElementContentFrame\"></div>`))\n            );\n        this.appendToContainer();\n        this.registerEventHandlers();\n    }\n\n    getContentElement() {\n        return $(`#rbro_el_content_frame${this.id}`);\n    }\n\n    remove() {\n        super.remove();\n        this.rb.deleteContainer(this.frame);\n    }\n\n    updateName() {\n        if (this.label.trim() !== '') {\n            this.name = this.label;\n        } else {\n            this.name = this.rb.getLabel('docElementFrame');\n        }\n        $(`#rbro_menu_item_name${this.id}`).text(this.name);\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_frame_element_print_if', 'printIf', cmdGroup);\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/FrameElement.js\n// module id = 21\n// module chunks = 0","import DocElement from './DocElement';\n\n/**\n * Page break doc element. A page break triggers a new page when the document is printed.\n * @class\n */\nexport default class PageBreakElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementPageBreak'), id, -1, 1, rb);\n        this.setInitialData(initialData);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        this.updateDisplay();\n        this.updateStyle();\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'y', 'zIndex'];\n    }\n\n    getElementType() {\n        return DocElement.type.pageBreak;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(0), top: this.rb.toPixel(y),\n                width: '100%', height: this.rb.toPixel(1) };\n            this.el.css(props);\n        }\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return [];\n    }\n\n    getYTagId() {\n        return 'rbro_page_break_element_position_y';\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroDocElement rbroPageBreakElement\"></div>`);\n        this.appendToContainer();\n        super.registerEventHandlers();\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/PageBreakElement.js\n// module id = 22\n// module chunks = 0","import DocElement from './DocElement';\nimport SectionBandElement from './SectionBandElement';\nimport Band from '../container/Band';\nimport Parameter from '../data/Parameter';\nimport MainPanelItem from '../menu/MainPanelItem';\n\n/**\n * Section element. Sections can be added to the content band and contain a content band and optional\n * header/footer bands.\n * @class\n */\nexport default class SectionElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementSection'), id, -1, 60, rb);\n        this.setupComplete = false;\n        this.dataSource = '';\n        this.label = '';\n        this.header = false;\n        this.footer = false;\n        this.headerData = null;\n        this.contentData = null;\n        this.footerData = null;\n\n        this.setInitialData(initialData);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        this.updateDisplay();\n\n        this.headerData = this.createBand(Band.bandType.header, null);\n        this.contentData = this.createBand(Band.bandType.content, null);\n        this.footerData = this.createBand(Band.bandType.footer, null);\n        this.updateHeight();\n\n        this.setupComplete = true;\n        this.updateName();\n        if (openPanelItem) {\n            this.panelItem.open();\n        }\n    }\n\n    createBand(bandType, dataValues) {\n        let data;\n        let dataKey = bandType + 'Data';\n        let dataId;\n        let panelItemProperties = { hasChildren: true, showDelete: false };\n        if (dataValues) {\n            data = dataValues;\n        } else if (this[dataKey]) {\n            data = this[dataKey];\n            dataId = data.id;\n        } else {\n            data = {};\n        }\n        data.parentId = this.id;\n        data.containerId = this.containerId;\n        if (!dataId) {\n            dataId = this.rb.getUniqueId();\n        }\n        let y = 0;\n        if (bandType === Band.bandType.header) {\n            data.y = '' + y;\n        } else if (bandType === Band.bandType.content) {\n            if (this.header && this.headerData !== null) {\n                y += this.headerData.getValue('heightVal');\n            }\n            data.y = '' + y;\n        } else if (bandType === Band.bandType.footer) {\n            if (this.header && this.headerData !== null) {\n                y += this.headerData.getValue('heightVal');\n            }\n            if (this.contentData !== null) {\n                y += this.contentData.getValue('heightVal');\n            }\n            data.y = '' + y;\n        }\n        if ((bandType === Band.bandType.header && !this.header) || (bandType === Band.bandType.footer && !this.footer)) {\n            panelItemProperties.visible = false;\n        }\n        let bandElement = new SectionBandElement(dataId, data, bandType, this.rb);\n        this.rb.addDataObject(bandElement);\n        let panelItemBand = new MainPanelItem('section_band', this.panelItem, bandElement, panelItemProperties, this.rb);\n        bandElement.setPanelItem(panelItemBand);\n        this.panelItem.appendChild(panelItemBand);\n        bandElement.setup();\n\n        if (bandType === Band.bandType.header) {\n            bandElement.show(this.header);\n        } else if (bandType === Band.bandType.footer) {\n            bandElement.show(this.footer);\n        }\n        return bandElement;\n    }\n\n    /**\n     * Do not register any event handlers so element cannot be selected.\n     */\n    registerEventHandlers() {\n    }\n    \n    /**\n     * Returns highest id of this component, this is the max id of the footer band because it is created last.\n     * @returns {Number}\n     */\n    getMaxId() {\n        let id = this.id;\n        if (this.footerData !== null) {\n            id = this.footerData.getMaxId();\n        }\n        return id;\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n\n        if (field === 'label' || field === 'dataSource') {\n            this.updateName();\n        } else if (field === 'header') {\n            this.headerData.show(value);\n            if (value) {\n                this.headerData.getPanelItem().show();\n            } else {\n                this.headerData.getPanelItem().hide();\n            }\n        } else if (field === 'footer') {\n            this.footerData.show(value);\n            if (value) {\n                this.footerData.getPanelItem().show();\n            } else {\n                this.footerData.getPanelItem().hide();\n            }\n        } else if (field === 'containerId') {\n            this.headerData.containerId = value;\n            this.contentData.containerId = value;\n            this.footerData.containerId = value;\n        }\n        if (field === 'header' || field === 'footer') {\n            this.updateBands(null);\n        }\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { top: this.rb.toPixel(y), width: '100%', height: this.rb.toPixel(height) };\n            this.el.css(props);\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'y', 'zIndex', 'label', 'dataSource', 'header', 'footer', 'printIf'];\n    }\n\n    getElementType() {\n        return DocElement.type.section;\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return [];\n    }\n\n    getYTagId() {\n        return 'rbro_section_element_position_y';\n    }\n\n    getHeightTagId() {\n        return '';\n    }\n\n    isDroppingAllowed() {\n        return false;\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroSectionElement\"></div>`);\n        this.el.append($(`<div id=\"rbro_divider_section_top${this.id}\" class=\"rbroDivider rbroDividerSection\" style=\"top: 0px\"></div>`));\n        this.el.append($(`<div id=\"rbro_divider_section_header${this.id}\" class=\"rbroDivider rbroDividerSectionBand rbroHidden\"></div>`));\n        this.el.append($(`<div id=\"rbro_divider_section_footer${this.id}\" class=\"rbroDivider rbroDividerSectionBand rbroHidden\"></div>`));\n        this.el.append($(`<div id=\"rbro_divider_section_bottom${this.id}\" class=\"rbroDivider rbroDividerSection\"></div>`));\n        this.appendToContainer();\n    }\n\n    updateName() {\n        if (this.label.trim() !== '') {\n            this.name = this.label;\n        } else {\n            this.name = this.rb.getLabel('docElementSection');\n            if (this.dataSource.trim() !== '') {\n                this.name += ' ' + this.dataSource;\n            }\n        }\n        $(`#rbro_menu_item_name${this.id}`).text(this.name);\n    }\n\n    /**\n     * Update section element height and position, visibility of dividers for header/footer bands.\n    */\n    updateHeight() {\n        let height = 0;\n        if (this.header && this.headerData !== null) {\n            height += this.headerData.getValue('heightVal');\n            $(`#rbro_divider_section_header${this.id}`).css({ top: this.rb.toPixel(height) }).removeClass('rbroHidden');\n        } else {\n            $(`#rbro_divider_section_header${this.id}`).addClass('rbroHidden');\n        }\n        if (this.contentData !== null) {\n            height += this.contentData.getValue('heightVal');\n        }\n        if (this.footer && this.footerData !== null) {\n            $(`#rbro_divider_section_footer${this.id}`).css({ top: this.rb.toPixel(height) }).removeClass('rbroHidden');\n            height += this.footerData.getValue('heightVal');\n        } else {\n            $(`#rbro_divider_section_footer${this.id}`).addClass('rbroHidden');\n        }\n        $(`#rbro_divider_section_bottom${this.id}`).css({ top: this.rb.toPixel(height) });\n        this.height = '' + height;\n        this.heightVal = height;\n        this.updateDisplay();\n    }\n\n    /**\n     * Update height and y-coordinate of all sub-bands (header, content, footer).\n     */\n    updateBands(ignoreBandData) {\n        if (this.setupComplete) {\n            let y = 0;\n            if (this.header) {\n                if (this.headerData !== ignoreBandData) {\n                    this.headerData.setValue('y', '' + y, null, true);\n                }\n                y += this.headerData.getValue('heightVal');\n            }\n            if (this.contentData !== ignoreBandData) {\n                this.contentData.setValue('y', '' + y, null, true);\n            }\n            y += this.contentData.getValue('heightVal');\n            if (this.footer && this.footerData !== ignoreBandData) {\n                this.footerData.setValue('y', '' + y, null, true);\n            }\n        }\n        this.updateHeight();\n    }\n\n    /**\n     * Get linked containers of all bands.\n     * @returns {Container[]} array with all linked containers of header/content/footer section bands.\n     */\n    getLinkedContainers() {\n        let containers = [];\n        let container;\n        for (let band of ['headerData', 'contentData', 'footerData']) {\n            if (this[band] !== null) {\n                container = this[band].getLinkedContainer();\n                if (container !== null) {\n                    containers.push(container);\n                }\n            }\n        }\n        return containers;\n    }\n\n    /**\n     * Returns all parameters of the data source (which must be an array parameter).\n     * @returns {[Object]} contains the data source name and all parameters of the data source.\n     */\n    getDataSource() {\n        let parameters = [];\n        let dataSource = this.dataSource.trim();\n        let dataSourceParameter = '';\n        if (dataSource.length >= 3 && dataSource.substr(0, 2) === '${' &&\n                dataSource.charAt(dataSource.length - 1) === '}') {\n            dataSourceParameter = dataSource.substring(2, dataSource.length - 1);\n            let param = this.rb.getParameterByName(dataSourceParameter);\n            if (param !== null && param.getValue('type') === Parameter.type.array) {\n                parameters = param.getChildren();\n            }\n        }\n        return { name: dataSourceParameter, parameters: parameters };\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_section_element_data_source', 'dataSource', cmdGroup);\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_section_element_print_if', 'printIf', cmdGroup);\n    }\n\n    toJS() {\n        let ret = super.toJS();\n        ret['headerData'] = this.headerData.toJS();\n        ret['contentData'] = this.contentData.toJS();\n        ret['footerData'] = this.footerData.toJS();\n        return ret;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/SectionElement.js\n// module id = 23\n// module chunks = 0","import DocElement from './DocElement';\nimport TableTextElement from './TableTextElement';\nimport Band from '../container/Band';\nimport MainPanelItem from '../menu/MainPanelItem';\nimport * as utils from '../utils';\n\n/**\n * Table band doc element. This is the header, content or footer of a table.\n * @class\n */\nexport default class TableBandElement extends DocElement {\n    constructor(id, initialData, bandType, rb) {\n        let name = (bandType === 'header') ? rb.getLabel('bandHeader') : ((bandType === 'footer') ? rb.getLabel('bandFooter') : rb.getLabel('bandContent'));\n        super(name, id, 0, 20, rb);\n        this.bandType = bandType;\n        this.repeatHeader = false;\n        this.alwaysPrintOnSamePage = true;\n        this.backgroundColor = '';\n        this.alternateBackgroundColor = '';\n        this.groupExpression = '';\n        this.parentId = initialData.parentId;\n        this.columnData = [];\n\n        this.heightVal = 0;\n        \n        this.setInitialData(initialData);\n    }\n\n    setInitialData(initialData) {\n        for (let key in initialData) {\n            if (initialData.hasOwnProperty(key) && this.hasOwnProperty(key)) {\n                this[key] = initialData[key];\n            }\n        }\n        this.heightVal = utils.convertInputToNumber(this.height);\n    }\n\n    setup() {\n        this.createElement();\n        this.updateStyle();\n    }\n\n    registerEventHandlers() {\n    }\n\n    /**\n     * Returns highest id of this component including all its child components.\n     * @returns {Number}\n     */\n    getMaxId() {\n        let maxId = this.id;\n        for (let col of this.columnData) {\n            if (col.getId() > maxId) {\n                maxId = col.getId();\n            }\n        }\n        return maxId;\n    }\n\n    getContainerId() {\n        let parent = this.getParent();\n        if (parent !== null) {\n            return parent.getContainerId();\n        }\n        return null;\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        this[field] = value;\n        if (field === 'height') {\n            let height = utils.convertInputToNumber(value);\n            this[field + 'Val'] = height;\n            // set td height to height - 1 because border consumes 1 pixel\n            this.getElement().find('td').css({ height: this.rb.toPixel(height - 1) });\n            for (let col of this.columnData) {\n                col.setValue(field, value, elSelector, isShown);\n            }\n        } else if (field === 'backgroundColor') {\n            this.updateStyle();\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        let fields = ['id', 'height', 'zIndex', 'backgroundColor'];\n        if (this.bandType === Band.bandType.header) {\n            fields.push('repeatHeader');\n        } else if (this.bandType === Band.bandType.content) {\n            fields.push('alternateBackgroundColor');\n            fields.push('groupExpression');\n            fields.push('printIf');\n            fields.push('alwaysPrintOnSamePage');\n        }\n        return fields;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n    }\n\n    updateStyle() {\n        this.el.css('background-color', this.backgroundColor);\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return [];\n    }\n\n    getHeightTagId() {\n        return 'rbro_table_band_element_height';\n    }\n\n    getHeight() {\n        return this.heightVal;\n    }\n\n    isDraggingAllowed() {\n        return false;\n    }\n\n    isDroppingAllowed() {\n        return false;\n    }\n\n    createElement() {\n        this.el = $(`<tr id=\"rbro_el_table_band${this.id}\" class=\"rbroTableBandElement\"></tr>`);\n        $(`#rbro_el_table_${this.bandType}${this.parentId}`).append(this.el);\n    }\n\n    remove() {\n        super.remove();\n        for (let i=0; i < this.columnData.length; i++) {\n            this.rb.deleteDataObject(this.columnData[i]);\n        }\n    }\n\n    getParent() {\n        return this.rb.getDataObject(this.parentId);\n    }\n\n    createColumns(columns, isUpdate) {\n        if (this.panelItem === null) {\n            return;\n        }\n\n        if (isUpdate) {\n            for (let i=0; i < this.columnData.length; i++) {\n                this.columnData[i].remove();\n                if (i >= columns) {\n                    this.rb.deleteDataObject(this.columnData[i]);\n                }\n            }\n        }\n        let newColumnData = [];\n        for (let i=0; i < columns; i++) {\n            let data;\n            let dataId;\n            if (i < this.columnData.length) {\n                data = this.columnData[i];\n                dataId = data.id;\n                if (!isUpdate) {\n                    data.band = this.band;\n                    data.columnIndex = i;\n                    data.parentId = this.id;\n                    data.tableId = this.parentId;\n                }\n            } else {\n                data = { band: this.band, columnIndex: i, parentId: this.id, tableId: this.parentId,\n                        width: isUpdate ? 20 : 100, height: this.height };\n            }\n            if (!dataId) {\n                dataId = this.rb.getUniqueId();\n            }\n\n            let textElement = new TableTextElement(dataId, data, this.rb);\n            newColumnData.push(textElement);\n        \tthis.rb.addDataObject(textElement);\n            let panelItemText = new MainPanelItem(DocElement.type.text, this.panelItem, textElement, { showDelete: false }, this.rb);\n            textElement.setPanelItem(panelItemText);\n            this.panelItem.appendChild(panelItemText);\n            textElement.setup(true);\n        }\n        this.columnData = newColumnData;\n        this.getElement().find('td').css({ height: this.rb.toPixel(this.heightVal - 1) });\n    }\n\n    show(visible) {\n        if (visible) {\n            $(`#rbro_el_table_band${this.id}`).removeClass('rbroHidden');\n        } else {\n            $(`#rbro_el_table_band${this.id}`).addClass('rbroHidden');\n        }\n    }\n\n    updateColumnWidth(columnIndex, width) {\n        if (columnIndex < this.columnData.length) {\n            let colData = this.columnData[columnIndex];\n            colData.updateColumnWidth(width);\n        }\n    }\n\n    getColumn(columnIndex) {\n        if (columnIndex >= 0 && columnIndex < this.columnData.length) {\n            return this.columnData[columnIndex];\n        }\n        return null;\n    }\n\n    getWidth() {\n        let width = 0;\n        for (let col of this.columnData) {\n            width += col.getValue('widthVal');\n        }\n        return width;\n    }\n\n    getColumnWidths() {\n        let widths = [];\n        for (let col of this.columnData) {\n            widths.push(col.getValue('widthVal'));\n        }\n        return widths;\n    }\n\n    addChildren(docElements) {\n        for (let column of this.columnData) {\n            docElements.push(column);\n        }\n    }\n\n    toJS() {\n        let ret = super.toJS();\n        ret['columnData'] = [];\n        for (let column of this.columnData) {\n            ret['columnData'].push(column.toJS());\n        }\n        return ret;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/TableBandElement.js\n// module id = 24\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/iconfonts/style.css\n// module id = 25\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.css\n// module id = 26\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/toggle-switch.css\n// module id = 27\n// module chunks = 0","//\n// Copyright (C) 2018 jobsta\n//\n// This file is part of ReportBro, a library to generate PDF and Excel reports.\n// Demos can be found at https://www.reportbro.com\n//\n// Dual licensed under AGPLv3 and ReportBro commercial license:\n// https://www.reportbro.com/license\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program. If not, see https://www.gnu.org/licenses/\n//\n// Details for ReportBro commercial license can be found at\n// https://www.reportbro.com/license/agreement\n//\n\n\nimport ReportBro from './ReportBro';\n\n$.fn.reportBro = function(options) {\n    var args = Array.prototype.slice.call(arguments, 1); // arguments for method call\n    var rv = null;\n\n    this.each(function(i, _element) {\n        var element = $(_element);\n        var reportBro = element.data('reportBro');\n        var currentResult;\n\n        // method call\n        if (typeof options === 'string') {\n            if (reportBro && $.isFunction(reportBro[options])) {\n                currentResult = reportBro[options].apply(reportBro, args);\n                if (i === 0) {\n                    rv = currentResult;\n                }\n                if (options === 'destroy') {\n                    element.removeData('reportBro');\n                }\n            }\n        } else {\n            // new ReportBro instance\n            if (!reportBro) {\n                reportBro = new ReportBro(element, options);\n                element.data('reportBro', reportBro);\n                reportBro.render();\n                reportBro.setup();\n            }\n            // return ReportBro instance\n            rv = reportBro;\n        }\n    });\n    \n    return rv;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.js\n// module id = 28\n// module chunks = 0","import Document from './Document';\nimport PopupWindow from './PopupWindow';\nimport AddDeleteDocElementCmd from './commands/AddDeleteDocElementCmd';\nimport AddDeleteParameterCmd from './commands/AddDeleteParameterCmd';\nimport AddDeleteStyleCmd from './commands/AddDeleteStyleCmd';\nimport Command from './commands/Command';\nimport CommandGroupCmd from './commands/CommandGroupCmd';\nimport SetValueCmd from './commands/SetValueCmd';\nimport Band from './container/Band';\nimport Container from './container/Container';\nimport DocumentProperties from './data/DocumentProperties';\nimport Parameter from './data/Parameter';\nimport Style from './data/Style';\nimport DocElement from './elements/DocElement';\nimport FrameElement from './elements/FrameElement';\nimport PageBreakElement from './elements/PageBreakElement';\nimport SectionElement from './elements/SectionElement';\nimport TableBandElement from './elements/TableBandElement';\nimport TableElement from './elements/TableElement';\nimport TableTextElement from './elements/TableTextElement';\nimport TextElement from './elements/TextElement';\nimport BarCodeElementPanel from './panels/BarCodeElementPanel';\nimport DocumentPropertiesPanel from './panels/DocumentPropertiesPanel';\nimport EmptyDetailPanel from './panels/EmptyDetailPanel';\nimport FrameElementPanel from './panels/FrameElementPanel';\nimport ImageElementPanel from './panels/ImageElementPanel';\nimport LineElementPanel from './panels/LineElementPanel';\nimport SectionBandElementPanel from './panels/SectionBandElementPanel';\nimport SectionElementPanel from './panels/SectionElementPanel';\nimport MainPanel from './menu/MainPanel';\nimport MainPanelItem from './menu/MainPanelItem';\nimport MenuPanel from './menu/MenuPanel';\nimport PageBreakElementPanel from './panels/PageBreakElementPanel';\nimport ParameterPanel from './panels/ParameterPanel';\nimport StylePanel from './panels/StylePanel';\nimport TableElementPanel from './panels/TableElementPanel';\nimport TableBandElementPanel from './panels/TableBandElementPanel';\nimport TextElementPanel from './panels/TextElementPanel';\n\n/**\n * Used for the main ReportBro instance.\n * @class\n */\nexport default class ReportBro {\n    constructor(element, properties) {\n        this.element = element;\n        this.nextId = 1;\n        this.locale = {\n            bandContent: 'Content',\n            bandFooter: 'Footer',\n            bandHeader: 'Header',\n            barCodeElementContent: 'Content',\n            barCodeElementDisplayValue: 'Display value',\n            barCodeElementFormat: 'Format',\n            contentHeight: 'Content height',\n            contentHeightInfo: 'affects only GUI size to place elements and not the real page size',\n            docElementAlwaysPrintOnSamePage: 'Always on same page',\n            docElementBarCode: 'Bar code',\n            docElementColor: 'Color',\n            docElementConditionalStyle: 'Conditional style',\n            docElementConditionalStyleCondition: 'Condition',\n            docElementDataSource: 'Data source',\n            docElementFrame: 'Frame',\n            docElementHeight: 'Height',\n            docElementImage: 'Image',\n            docElementLabel: 'Label',\n            docElementLine: 'Line',\n            docElementPageBreak: 'Page break',\n            docElementPosition: 'Position (x, y)',\n            docElementPositionX: 'Position (x)',\n            docElementPositionY: 'Position (y)',\n            docElementPrintIf: 'Print if',\n            docElementPrintSettings: 'Print settings',\n            docElementRemoveEmptyElement: 'Remove when empty',\n            docElementRoot: 'Document',\n            docElementSection: 'Section',\n            docElementSize: 'Size (width, height)',\n            docElementSpreadsheet: 'Spreadsheet',\n            docElementSpreadsheetAddEmptyRow: 'Add empty row below',\n            docElementSpreadsheetColspan: 'Column range',\n            docElementSpreadsheetColumn: 'Fixed column',\n            docElementSpreadsheetHide: 'Hide',\n            docElementWidth: 'Width',\n            docElementStyle: 'Style',\n            docElementTable: 'Table',\n            docElementText: 'Text',\n            documentProperties: 'Document properties',\n            documentTabClose: 'Close',\n            documentTabPdfLayout: 'PDF Layout',\n            documentTabPdfPreview: 'PDF Preview',\n            documentTabXlsxDownload: 'XLSX Download',\n            emptyPanel: 'Empty panel',\n            errorMsgDuplicateParameterField: 'Field already exists',\n            errorMsgInvalidArray: 'Invalid list',\n            errorMsgInvalidAvgSumExpression: 'Expression must contain number field of a list parameter',\n            errorMsgInvalidBarCode: 'Invalid bar code content',\n            errorMsgInvalidDataSource: 'Invalid data source',\n            errorMsgInvalidDataSourceParameter: 'Parameter must be a list',\n            errorMsgInvalidDate: 'Invalid date, expected format is YYYY-MM-DD ( or YYYY-MM-DD hh:mm for date with time)',\n            errorMsgInvalidExpression: 'Invalid expression: ${info}',\n            errorMsgInvalidExpressionFuncNotDefined: 'Function ${info} not defined',\n            errorMsgInvalidExpressionNameNotDefined: 'Name ${info} not defined',\n            errorMsgInvalidImage: 'Invalid image data, image must be base64 encoded',\n            errorMsgInvalidImageSource: 'Invalid source, expected url starting with http:// or https://',\n            errorMsgInvalidImageSourceParameter: 'Parameter must be an image or string (containing a url)',\n            errorMsgInvalidMap: 'Invalid collection',\n            errorMsgInvalidNumber: 'Invalid number',\n            errorMsgInvalidPageSize: 'Invalid page size',\n            errorMsgInvalidParameterData: 'Data does not match parameter',\n            errorMsgInvalidParameterName: 'Name must start with a character or underscore, and must only contain characters, digits and underscores (_)',\n            errorMsgInvalidPattern: 'Invalid pattern',\n            errorMsgInvalidPosition: 'The position is outside the area',\n            errorMsgInvalidSize: 'The element is outside the area',\n            errorMsgInvalidTestData: 'Invalid test data',\n            errorMsgMissingData: 'Missing data',\n            errorMsgMissingDataSourceParameter: 'Data source parameter not found',\n            errorMsgMissingExpression: 'Expression must be set',\n            errorMsgMissingImage: 'Missing image, no source or image file specified',\n            errorMsgMissingParameter: 'Parameter not found',\n            errorMsgMissingParameterData: 'Data for parameter {info} not found',\n            errorMsgSectionBandNotOnSamePage: 'Section band does not fit on same page',\n            errorMsgUnicodeEncodeError: 'Text contains non printable character',\n            errorMsgUnsupportedImageType: 'Image does not have supported image type (.jpg, .png)',\n            footer: 'Footer',\n            footerDisplay: 'Display',\n            footerSize: 'Footer size',\n            frameElementShrinkToContentHeight: 'Shrink to content height',\n            imageElementImage: 'Image file',\n            imageElementLoadErrorMsg: 'Loading image failed',\n            imageElementSource: 'Source',\n            header: 'Header',\n            headerDisplay: 'Display',\n            headerFooterDisplayAlways: 'Always',\n            headerFooterDisplayNotOnFirstPage: 'Do not show on first page',\n            headerSize: 'Header size',\n            menuAlignBottom: 'Align bottom',\n            menuAlignCenter: 'Align center',\n            menuAlignLeft: 'Align left',\n            menuAlignMiddle: 'Align middle',\n            menuAlignRight: 'Align right',\n            menuAlignTop: 'Align top',\n            menuPreview: 'PREVIEW',\n            menuPreviewTip: 'Preview report',\n            menuRedo: 'REDO',\n            menuRedoTip: 'Repeat last undone command',\n            menuSave: 'SAVE',\n            menuSaveTip: 'Save report',\n            menuToggleGrid: 'Show/Hide grid',\n            menuUndo: 'UNDO',\n            menuUndoTip: 'Undo last command',\n            orientation: 'Orientation',\n            orientationBottom: 'bottom',\n            orientationLandscape: 'Landscape',\n            orientationLeft: 'left',\n            orientationPortrait: 'Portrait',\n            orientationRight: 'right',\n            orientationTop: 'top',\n            pageFormat: 'Page format',\n            pageFormatA4: 'DIN A4 (210 x 297 mm)',\n            pageFormatA5: 'DIN A5 (148 x 210 mm)',\n            pageFormatLetter: 'Letter (8.5 x 11.0 inches)',\n            pageFormatUserDefined: 'Own dimensions',\n            pageHeight: 'height',\n            pageMargins: 'Page margins',\n            pageWidth: 'width',\n            parameter: 'Parameter',\n            parameterAddTestData: 'Add row',\n            parameterArrayItemType: 'List item type',\n            parameterEditTestData: 'Edit',\n            parameterEditTestDataNoFields: 'No fields defined for this list',\n            parameterEval: 'Evaluate',\n            parameterExpression: 'Expression',\n            parameterListType: 'List type',\n            parameterName: 'Name',\n            parameterNullable: 'Nullable',\n            parameterPattern: 'Pattern',\n            parameterSearchPlaceholder: 'Search parameters...',\n            parameterTestData: 'Test data',\n            parameterTestDataDatePattern: 'YYYY-MM-DD',\n            parameterType: 'Type',\n            parameterTypeArray: 'List',\n            parameterTypeAverage: 'Average',\n            parameterTypeBoolean: 'Boolean',\n            parameterTypeDate: 'Date',\n            parameterTypeImage: 'Image',\n            parameterTypeMap: 'Collection',\n            parameterTypeNumber: 'Number',\n            parameterTypeSimpleArray: 'Simple List',\n            parameterTypeString: 'Text',\n            parameterTypeSum: 'Sum',\n            parameters: 'Parameters',\n            parametersDataSource: 'Data source parameters',\n            patternCurrencySymbol: 'Pattern currency symbol',\n            patternDate1: 'day.month.year, e.g. 1.6.1980',\n            patternDate2: 'day.month.year (2-digit), hour(24h):minute, e.g. 1.6.80, 14:30',\n            patternDate3: 'day/month/year (month abbreviation), e.g. 1/Jun/1980',\n            patternDate4: 'month/day/year (day and month with leading zero if single digit), e.g. 06/01/1980',\n            patternLocale: 'Pattern locale',\n            patternNumber1: 'Show thousand separator',\n            patternNumber2: 'Show decimal point followed by 3 decimal places',\n            patternNumber3: 'Show decimal point followed by minimum of 2 and maximum of 4 decimal places',\n            patternNumber4: 'Show thousand separator and decimal point followed by 2 decimal places',\n            patternNumber5: 'Show currency symbol in front of number',\n            patternSeparatorDates: '--- Date patterns ---',\n            patternSeparatorNumbers: '--- Number patterns ---',\n            select: 'select...',\n            style: 'Style',\n            styleAlignment: 'Alignment',\n            styleBackgroundColor: 'Background color',\n            styleBold: 'Bold',\n            styleBorder: 'Border',\n            styleBorderAll: 'borders',\n            styleBorderColor: 'Border color',\n            styleBorderWidth: 'Border width',\n            styleFont: 'Font',\n            styleFontSizeUnit: 'pt',\n            styleHAlignmentCenter: 'Center',\n            styleHAlignmentLeft: 'Left',\n            styleHAlignmentJustify: 'Justify',\n            styleHAlignmentRight: 'Right',\n            styleItalic: 'Italic',\n            styleLineSpacing: 'Line spacing',\n            styleName: 'Name',\n            styleNone: 'None',\n            stylePadding: 'Padding',\n            styleTextColor: 'Text color',\n            styleTextStyle: 'Text style',\n            styleUnderline: 'Underline',\n            styleVAlignmentBottom: 'Bottom',\n            styleVAlignmentMiddle: 'Middle',\n            styleVAlignmentTop: 'Top',\n            styles: 'Styles',\n            tableElementAlternateBackgroundColor: 'Alternate background color',\n            tableElementBorderFrame: 'Frame',\n            tableElementBorderFrameRow: 'Frame and row',\n            tableElementBorderGrid: 'Grid',\n            tableElementBorderNone: 'None',\n            tableElementBorderRow: 'Row',\n            tableElementColumns: 'Columns',\n            tableElementContentRows: 'Content rows',\n            tableElementGroupExpression: 'Group expression',\n            tableElementRepeatHeader: 'Repeat header',\n            textElementContent: 'Text',\n            textElementEval: 'Evaluate',\n            textElementPattern: 'Pattern'\n        };\n\n        this.properties = {\n            additionalFonts: [],\n            adminMode: true,\n            enableSpreadsheet: true,\n            fonts: [\n                { name: 'Courier', value: 'courier' },\n                { name: 'Helvetica', value: 'helvetica' },\n                { name: 'Times New Roman', value: 'times' }\n            ],\n            localStorageReportKey: null,\n            menuShowButtonLabels: false,\n            menuSidebar: false,\n            saveCallback: null,\n            showGrid: true,\n            patternAdditionalDates: [],\n            patternAdditionalNumbers: [],\n            patternCurrencySymbol: '$',\n            patternDates: [\n                { name: 'd.M.yyyy', description: this.locale['patternDate1'] },\n                { name: 'd.M.yy, H:mm', description: this.locale['patternDate2'] },\n                { name: 'd/MMM/yyyy', description: this.locale['patternDate3'] },\n                { name: 'MM/dd/yyyy', description: this.locale['patternDate4'] }\n            ],\n            patternLocale: 'en',\n            patternNumbers: [\n                { name: '#,##0', description: this.locale['patternNumber1'] },\n                { name: '0.000', description: this.locale['patternNumber2'] },\n                { name: '0.00##', description: this.locale['patternNumber3'] },\n                { name: '#,##0.00', description: this.locale['patternNumber4'] },\n                { name: '$ #,##0.00', description: this.locale['patternNumber5'] }\n            ],\n            reportServerTimeout: 20000,\n            reportServerUrl: 'https://www.reportbro.com/report/run',\n            reportServerUrlCrossDomain: false\n        };\n        if (properties) {\n            for (let prop in properties) {\n                if (this.properties.hasOwnProperty(prop)) {\n                    this.properties[prop] = properties[prop];\n                }\n            }\n            $.extend( this.locale, properties['locale'] || {} );\n        }\n        if (this.properties.additionalFonts.length > 0) {\n            this.properties.fonts = this.properties.fonts.concat(this.properties.additionalFonts);\n        }\n        if (this.properties.patternAdditionalDates.length > 0) {\n            this.properties.patternDates = this.properties.patternDates.concat(this.properties.patternAdditionalDates);\n        }\n        if (this.properties.patternAdditionalNumbers.length > 0) {\n            this.properties.patternNumbers = this.properties.patternNumbers.concat(this.properties.patternAdditionalNumbers);\n        }\n\n        this.detailData = null;\n        this.document = new Document(element, this.properties.showGrid, this);\n        this.popupWindow = new PopupWindow(element, this);\n        this.docElements = [];\n        this.headerBand = new Band(Band.bandType.header, false, '', '', this);\n        this.contentBand = new Band(Band.bandType.content, false, '', '', this);\n        this.footerBand = new Band(Band.bandType.footer, false, '', '', this);\n        this.parameterContainer = new Container('0_parameters', this.getLabel('parameters'), this);\n        this.styleContainer = new Container('0_styles', this.getLabel('styles'), this);\n        this.documentProperties = new DocumentProperties(this);\n        this.clipboardElements = [];\n\n        this.mainPanel = new MainPanel(element, this.headerBand, this.contentBand, this.footerBand,\n                this.parameterContainer, this.styleContainer, this);\n        this.menuPanel = new MenuPanel(element, this);\n        this.activeDetailPanel = 'none';\n        this.detailPanels = {\n            'none': new EmptyDetailPanel(element, this),\n            'bar_code': new BarCodeElementPanel(element, this),\n            'frame': new FrameElementPanel(element, this),\n            'text': new TextElementPanel(element, this),\n            'line': new LineElementPanel(element, this),\n            'image': new ImageElementPanel(element, this),\n            'page_break': new PageBreakElementPanel(element, this),\n            'table': new TableElementPanel(element, this),\n            'table_band': new TableBandElementPanel(element, this),\n            'parameter': new ParameterPanel(element, this),\n            'section': new SectionElementPanel(element, this),\n            'section_band': new SectionBandElementPanel(element, this),\n            'style': new StylePanel(element, this),\n            'documentProperties': new DocumentPropertiesPanel(this.documentProperties, element, this)\n        };\n        this.commandStack = [];\n        this.lastCommandIndex = -1;\n        this.modified = false;\n        this.selectionSinceLastCommand = false;\n        this.objectMap = {};\n        this.containers = [this.headerBand, this.contentBand, this.footerBand];\n        this.selections = [];\n        this.reportKey = null;  // key of last report preview to allow download of xlsx file for this report\n\n        this.browserDragType = '';\n        this.browserDragId = '';\n\n        this.documentProperties.setPanelItem(this.mainPanel.getDocumentPropertiesItem());\n        this.initObjectMap();\n\n        $(document).keydown(event => {\n            // check metaKey instead of ctrl for Mac\n            if (event.metaKey || event.ctrlKey) {\n                switch (event.which) {\n                    case 67: {\n                        // Ctrl + C: copy\n                        if (!(event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement)) {\n                            let cleared = false;\n                            let idMap = {};\n                            let serializedObj;\n                            let i;\n                            for (let selectionId of this.selections) {\n                                let obj = this.getDataObject(selectionId);\n                                if ((obj instanceof DocElement && !(obj instanceof TableTextElement)) ||\n                                        (obj instanceof Parameter && !obj.showOnlyNameType) ||\n                                        (obj instanceof Style)) {\n                                    if (!cleared) {\n                                        this.clipboardElements = [];\n                                        cleared = true;\n                                    }\n                                    if (!(obj.getId() in idMap)) {\n                                        idMap[obj.getId()] = true;\n                                        serializedObj = obj.toJS();\n                                        this.clipboardElements.push(serializedObj);\n                                        if (obj instanceof DocElement) {\n                                            serializedObj.baseClass = 'DocElement';\n                                            if (obj instanceof FrameElement) {\n                                                let nestedElements = [];\n                                                obj.appendContainerChildren(nestedElements);\n                                                for (let nestedElement of nestedElements) {\n                                                    if (nestedElement.getId() in idMap) {\n                                                        // in case a nested element is also selected we make sure to add it only once to\n                                                        // the clipboard objects and to add it after its parent element\n                                                        for (i = 0; i < this.clipboardElements.length; i++) {\n                                                            if (nestedElement.getId() === this.clipboardElements[i].id) {\n                                                                this.clipboardElements.splice(i, 1);\n                                                                break;\n                                                            }\n                                                        }\n                                                    } else {\n                                                        idMap[nestedElement.getId()] = true;\n                                                    }\n                                                    serializedObj = nestedElement.toJS();\n                                                    serializedObj.baseClass = 'DocElement';\n                                                    this.clipboardElements.push(serializedObj);\n                                                }\n                                            }\n                                        } else if (obj instanceof Parameter) {\n                                            serializedObj.baseClass = 'Parameter';\n                                        } else if (obj instanceof Style) {\n                                            serializedObj.baseClass = 'Style';\n                                        }\n                                    }\n                                }\n                            }\n                            event.preventDefault();\n                        }\n                        break;\n                    }\n                    case 86: {\n                        // Ctrl + V: paste\n                        if (!(event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement)) {\n                            let cmd;\n                            let cmdGroup = new CommandGroupCmd('Paste from clipboard', this);\n                            let mappedContainerIds = {};\n                            for (let clipboardElement of this.clipboardElements) {\n                                clipboardElement.id = this.getUniqueId();\n                                if (clipboardElement.baseClass === 'DocElement') {\n                                    if (clipboardElement.linkedContainerId) {\n                                        let linkedContainerId = this.getUniqueId();\n                                        mappedContainerIds[clipboardElement.linkedContainerId] = linkedContainerId;\n                                        clipboardElement.linkedContainerId = linkedContainerId;\n                                    }\n                                    if (clipboardElement.elementType === DocElement.type.table) {\n                                        TableElement.removeIds(clipboardElement);\n                                    }\n                                }\n                            }\n                            for (let clipboardElement of this.clipboardElements) {\n                                if (clipboardElement.baseClass === 'DocElement') {\n                                    // map id of container in case element is inside other pasted container (frame/band)\n                                    if (clipboardElement.containerId in mappedContainerIds) {\n                                        clipboardElement.containerId = mappedContainerIds[clipboardElement.containerId];\n                                        // since element is inside pasted container we can keep x/y coordinates\n                                    } else {\n                                        // paste new element at top/left of container\n                                        clipboardElement.x = clipboardElement.y = 0;\n                                    }\n                                    cmd = new AddDeleteDocElementCmd(\n                                        true, clipboardElement.elementType, clipboardElement,\n                                        clipboardElement.id, clipboardElement.containerId, -1, this);\n                                    cmdGroup.addCommand(cmd);\n\n                                } else if (clipboardElement.baseClass === 'Parameter') {\n                                    Parameter.removeIds(clipboardElement);\n                                    cmd = new AddDeleteParameterCmd(\n                                        true, clipboardElement, clipboardElement.id,\n                                        this.parameterContainer.getId(), -1, this);\n                                    cmdGroup.addCommand(cmd);\n                                } else if (clipboardElement.baseClass === 'Style') {\n                                    cmd = new AddDeleteStyleCmd(\n                                        true, clipboardElement, clipboardElement.id,\n                                        this.styleContainer.getId(), -1, this);\n                                    cmdGroup.addCommand(cmd);\n                                }\n                            }\n                            if (!cmdGroup.isEmpty()) {\n                                this.executeCommand(cmdGroup);\n                                let clearSelection = true;\n                                for (let clipboardElement of this.clipboardElements) {\n                                    this.selectObject(clipboardElement.id, clearSelection);\n                                    clearSelection = false;\n                                }\n                            }\n                            event.preventDefault();\n                        }\n                        break;\n                    }\n                    case 89: {\n                        // Ctrl + Y: redo\n                        this.redoCommand();\n                        event.preventDefault();\n                        break; \n                    }\n                    case 90: {\n                        // Ctrl + Z: undo\n                        this.undoCommand();\n                        event.preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                if (event.which === 27) {  // escape\n                    this.popupWindow.hide();\n                }\n                else if (!(event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement)) {\n                    switch (event.which) {\n                        case 8:  // backspace\n                        case 46: {  // delete\n                            let cmdGroup = new CommandGroupCmd('Delete', this);\n                            for (let selectionId of this.selections) {\n                                let obj = this.getDataObject(selectionId);\n                                if (obj instanceof DocElement) {\n                                    obj.addCommandsForDelete(cmdGroup);\n                                }\n                            }\n                            if (!cmdGroup.isEmpty()) {\n                                this.executeCommand(cmdGroup);\n                            }\n                            event.preventDefault();\n                            break;\n                        }\n                        case 37:  // left\n                        case 38:  // up\n                        case 39:  // right\n                        case 40: {  // down\n                            let cmdGroup = new CommandGroupCmd('Move element', this);\n                            let tagId;\n                            let field = (event.which === 37 || event.which === 39) ? 'x' : 'y';\n                            let bandWidth = this.getDocumentProperties().getContentSize().width;\n                            for (let selectionId of this.selections) {\n                                let obj = this.getDataObject(selectionId);\n                                if (obj instanceof DocElement) {\n                                    if (event.which === 37 || event.which === 39) {\n                                        tagId = obj.getXTagId();\n                                    } else {\n                                        tagId = obj.getYTagId();\n                                    }\n                                    if (tagId !== '') {\n                                        let val = null;\n                                        if (event.which === 37) {\n                                            if (obj.getValue('xVal') > 0) {\n                                                val = obj.getValue('xVal') - 1;\n                                            }\n                                        } else if (event.which === 38) {\n                                            if (obj.getValue('yVal') > 0) {\n                                                val = obj.getValue('yVal') - 1;\n                                            }\n                                        } else if (event.which === 39) {\n                                            let containerSize = obj.getContainerContentSize();\n                                            if ((obj.getValue('xVal') + obj.getValue('widthVal')) < containerSize.width) {\n                                                val = obj.getValue('xVal') + 1;\n                                            }\n                                        } else if (event.which === 40) {\n                                            let containerSize = obj.getContainerContentSize();\n                                            if ((obj.getValue('yVal') + obj.getValue('heightVal')) < containerSize.height) {\n                                                val = obj.getValue('yVal') + 1;\t\t\t\t\t\t\t\t\t\t\t\n                                            }\n                                        }\n                                        if (val !== null) {\n                                            let cmd = new SetValueCmd(selectionId, tagId, field,\n                                                val, SetValueCmd.type.text, this);\n                                            cmdGroup.addCommand(cmd);\n                                        }\n                                    }\n                                }\n                            }\n                            if (!cmdGroup.isEmpty()) {\n                                this.executeCommand(cmdGroup);\n                            }\n                            event.preventDefault();\n                            break;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Adds default parameters like page count/number.\n     */\n    addDefaultParameters() {\n        for (let parameterData of [\n                { name: 'page_count', type: Parameter.type.number, eval: false, editable: false, showOnlyNameType: true },\n                { name: 'page_number', type: Parameter.type.number, eval: false, editable: false, showOnlyNameType: true }]) {\n            let parameter = new Parameter(this.getUniqueId(), parameterData, this);\n            let parentPanel = this.mainPanel.getParametersItem();\n            let panelItem = new MainPanelItem(\n                'parameter', parentPanel, parameter, { hasChildren: false, showAdd: false, showDelete: false, draggable: false }, this);\n            parameter.setPanelItem(panelItem);\n            parentPanel.appendChild(panelItem);\n            parameter.setup();\n            this.addParameter(parameter);\n        }\n    }\n\n    render() {\n        this.element.empty();\n        if (this.getProperty('menuSidebar')) {\n            this.element.addClass('rbroMenuPanelSidebar');\n        }\n        this.element.append('<div class=\"rbroLogo\"></div>');\n        this.element.append('<div class=\"rbroMenuPanel\" id=\"rbro_menu_panel\"></div>');\n        this.element.append(\n            `<div class=\"rbroContainer\">\n                <div class=\"rbroMainPanel\" id=\"rbro_main_panel\"><ul id=\"rbro_main_panel_list\"></ul></div>\n                <div class=\"rbroDetailPanel\" id=\"rbro_detail_panel\"></div>\n                <div class=\"rbroDocumentPanel\" id=\"rbro_document_panel\"></div>\n            </div>`);\n        this.mainPanel.render();\n        this.menuPanel.render();\n        for (let panelName in this.detailPanels) {\n            this.detailPanels[panelName].render();\n        }\n        this.detailPanels[this.activeDetailPanel].show(this.detailData);\n        this.document.render();\n        this.popupWindow.render();\n        this.updateMenuButtons();\n\n        $(document).mouseup(event => {\n            this.document.mouseUp(event);\n            this.popupWindow.hide();\n        });\n        this.element\n            .on('dragstart', event => {\n                // disable dragging per default, otherwise e.g. a text selection can be dragged in Chrome\n                event.preventDefault();\n           });\n    }\n\n    setup() {\n        this.addDefaultParameters();\n        this.headerBand.setup();\n        this.contentBand.setup();\n        this.footerBand.setup();\n        this.documentProperties.setup();\n    }\n\n    initObjectMap() {\n        this.addDataObject(this.headerBand);\n        this.addDataObject(this.contentBand);\n        this.addDataObject(this.footerBand);\n        this.addDataObject(this.parameterContainer);\n        this.addDataObject(this.styleContainer);\n        this.addDataObject(this.documentProperties);\n    }\n\n    /**\n     * Returns the label for given key.\n     * @param {String} key\n     * @returns {String} Label for given key, if it does not exist then the key is returned.\n     */\n    getLabel(key) {\n        if (key in this.locale) {\n            return this.locale[key];\n        }\n        return key;\n    }\n\n    getProperty(key) {\n        return this.properties[key];\n    }\n\n    /**\n     * Returns a new unique id which can be used for any data object.\n     * @returns {Number}\n     */\n    getUniqueId() {\n        return this.nextId++;\n    }\n\n    getMainPanel() {\n        return this.mainPanel;\n    }\n\n    getDocument() {\n        return this.document;\n    }\n\n    getPopupWindow() {\n        return this.popupWindow;\n    }\n\n    getFonts() {\n        return this.properties.fonts;\n    }\n\n    /**\n     * Returns a list of all number and date patterns.\n     * @returns {Object[]} Each item contains name (String), optional description (String) and optional separator (Boolean).\n     */\n    getPatterns() {\n        let patterns = [];\n        if (this.properties.patternNumbers.length > 0) {\n            patterns.push({ separator: true, name: this.getLabel('patternSeparatorNumbers') });\n            for (let pattern of this.properties.patternNumbers) {\n                patterns.push(pattern);\n            }\n        }\n        if (this.properties.patternDates.length > 0) {\n            patterns.push({ separator: true, name: this.getLabel('patternSeparatorDates') });\n            for (let pattern of this.properties.patternDates) {\n                patterns.push(pattern);\n            }\n        }\n        return patterns;\n    }\n\n    /**\n     * Returns a list of parameter items.\n     * Used for parameter popup window.\n     * @param {DocElement|Parameter} obj - adds all parameters available for this object (which is either a doc element or a parameter).\n     * For doc elements the parameters from the data source are included (e.g. array field parameters of a table data source).\n     * @param {String[]} allowedTypes - specify allowed parameter types which will be added to the\n     * parameters list. If not set all parameter types are allowed.\n     * @returns {Object[]} Each item contains name (String), optional description (String) and\n     * optional separator (Boolean).\n     */\n    getParameterItems(obj, allowedTypes) {\n        let parameters = [];\n        let parameterItems = this.getMainPanel().getParametersItem().getChildren();\n        // dataSourceIndex is only needed for separator id which is used to hide the separator\n        // when there are no data source parameters available (due to search filter)\n        let dataSourceIndex = 0;\n        let dataSources = [];\n        if (obj instanceof DocElement) {\n            obj.getAllDataSources(dataSources, null);\n            for (let dataSource of dataSources) {\n                if (dataSource.parameters.length > 0) {\n                    parameters.push({\n                        separator: true, separatorClass: 'rbroParameterDataSourceGroup', id: 'ds' + dataSourceIndex,\n                        name: this.getLabel('parametersDataSource')\n                    });\n                    dataSourceIndex++;\n                    for (let dataSourceParameter of dataSource.parameters) {\n                        dataSourceParameter.appendParameterItems(parameters, allowedTypes);\n                    }\n                }\n            }\n        }\n\n        parameters.push({ separator: true, name: this.getLabel('parameters') });\n        let mapParameters = []; // add all parameters of collections at end of list with a header containing the collection name\n        for (let parameterItem of parameterItems) {\n            let parameter = parameterItem.getData();\n            if (parameter.getValue('type') === Parameter.type.map) {\n                parameter.appendParameterItems(mapParameters, allowedTypes);\n            } else {\n                parameter.appendParameterItems(parameters, allowedTypes);\n            }\n        }\n        return parameters.concat(mapParameters);\n    }\n\n    /**\n     * Returns a list of all array field parameter items.\n     * Used for parameter popup window.\n     * @param {String} fieldType - allowed parameter type which will be added to the\n     * parameter list. If empty all parameter types are allowed.\n     * @returns {Object[]} Each item contains name (String), optional description (String) and\n     * optional separator (Boolean).\n     */\n    getArrayFieldParameterItems(fieldType) {\n        let parameters = [];\n        let parameterItems = this.getMainPanel().getParametersItem().getChildren();\n        parameters.push({ separator: true, name: this.getLabel('parameters') });\n        for (let parameterItem of parameterItems) {\n            let parameter = parameterItem.getData();\n            if (parameter.getValue('type') === Parameter.type.array) {\n                parameter.appendFieldParameterItems(parameters, fieldType);\n            }\n        }\n        return parameters;\n    }\n\n    getParameterByName(parameterName) {\n        let parameters = this.getParameters();\n        for (let parameter of parameters) {\n            if (parameter.getValue('name') === parameterName) {\n                return parameter;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Append document elements of given container.\n     * @param {Container} container\n     * @param {Boolean} asObjects - if true the document element instances are returned, otherwise\n     * each instance is transformed to a js map.\n     * @param {DocElement[]} docElements - list where document elements will be appended to.\n     */\n    appendContainerDocElements(container, asObjects, docElements) {\n        let children = container.getPanelItem().getChildren();\n        for (let child of children) {\n            if (child.getData() instanceof DocElement) {\n                let docElement = child.getData();\n                if (asObjects) {\n                    docElements.push(docElement);\n                    // we are also adding all internal children (document elements which belong\n                    // to other document elements and cannot be created independently),\n                    // e.g. a table band or a table cell (table text) of a table element.\n                    docElement.addChildren(docElements);\n                } else {\n                    // js map also includes data of internal children\n                    docElements.push(docElement.toJS());\n                }\n                let containers = [];\n                if (docElement instanceof SectionElement) {\n                    containers = docElement.getLinkedContainers();\n                } else {\n                    let linkedContainer = docElement.getLinkedContainer();\n                    if (linkedContainer !== null) {\n                        containers.push(linkedContainer);\n                    }\n                }\n                // add children of doc elements which represent containers, e.g. frames or section bands\n                for (let container of containers) {\n                    this.appendContainerDocElements(container, asObjects, docElements);\n                }\n            }\n        }\n    };\n\n    /**\n     * Get document elements of all bands.\n     * @param {Boolean} asObjects - if true the document element instances are returned, otherwise\n     * each instance is transformed to a js map.\n     * @returns {DocElement[]} List of document elements.\n     */\n    getDocElements(asObjects) {\n        let docElements = [];\n        this.appendContainerDocElements(this.headerBand, asObjects, docElements);\n        this.appendContainerDocElements(this.contentBand, asObjects, docElements);\n        this.appendContainerDocElements(this.footerBand, asObjects, docElements);\n        return docElements;\n    }\n\n    setDetailPanel(panelName, data) {\n        this.detailPanels[this.activeDetailPanel].hide();\n        this.activeDetailPanel = panelName;\n        this.detailData = data;\n        this.detailPanels[panelName].show(data);\n    }\n\n    updateDetailPanel() {\n        this.detailPanels[this.activeDetailPanel].updateData(this.detailData);\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     * @param {[String]} field - affected field in case of change operation.\n     */\n    notifyEvent(obj, operation, field) {\n        if (obj instanceof Parameter) {\n            if (obj.getValue('type') === Parameter.type.array || obj.getValue('type') === Parameter.type.map) {\n                $(`#rbro_menu_item_add${obj.getId()}`).show();\n                $(`#rbro_menu_item_children${obj.getId()}`).show();\n                $(`#rbro_menu_item_children_toggle${obj.getId()}`).show();\n            } else {\n                $(`#rbro_menu_item_add${obj.getId()}`).hide();\n                $(`#rbro_menu_item_children${obj.getId()}`).hide();\n                $(`#rbro_menu_item_children_toggle${obj.getId()}`).hide();\n            }\n        } else if (obj instanceof Style) {\n            for (let docElement of this.docElements) {\n                docElement.updateChangedStyle(obj.getId());\n            }\n            \n        }\n        for (let panelName in this.detailPanels) {\n            this.detailPanels[panelName].notifyEvent(obj, operation);\n        }\n    }\t\n\n    addParameter(parameter) {\n        this.addDataObject(parameter);\n    }\n\n    deleteParameter(parameter) {\n        this.deleteDataObject(parameter);\n    }\n\n    addStyle(style) {\n        this.addDataObject(style);\n        this.notifyEvent(style, Command.operation.add);\n    }\n\n    deleteStyle(style) {\n        this.deleteDataObject(style);\n        this.notifyEvent(style, Command.operation.remove);\n    }\n\n    getStyles() {\n        let styles = [];\n        for (let styleItem of this.getMainPanel().getStylesItem().getChildren()) {\n            styles.push(styleItem.getData());\n        }\n        return styles;\n    }\n\n    getParameters() {\n        let parameters = [];\n        for (let parameterItem of this.getMainPanel().getParametersItem().getChildren()) {\n            parameters.push(parameterItem.getData());\n        }\n        return parameters;\n    }\n\n    addDocElement(element) {\n        this.docElements.push(element);\n        this.addDataObject(element);\n    }\n\n    deleteDocElement(element) {\n        for (let i=0; i < this.docElements.length; i++) {\n            if (this.docElements[i].getId() === element.getId()) {\n                if (this.detailData === this.docElements[i]) {\n                    this.setDetailPanel('none', null);\n                }\n                this.docElements.splice(i, 1);\n                this.deleteDataObject(element);\n                break;\n            }\n        }\n    }\n\n    getDetailData() {\n        return this.detailData;\n    }\n\n    getDocumentProperties() {\n        return this.documentProperties;\n    }\n\n    executeCommand(cmd) {\n        cmd.do();\n        if (this.lastCommandIndex < (this.commandStack.length - 1)) {\n            this.commandStack = this.commandStack.slice(0, this.lastCommandIndex + 1);\n        }\n        if (!this.selectionSinceLastCommand && cmd instanceof SetValueCmd && this.commandStack.length > 0) {\n            // if previous and current command are both SetValueCmds and target the same text field,\n            // we can discard the previous command and only keep the latest update\n            let prevCmd = this.commandStack[this.commandStack.length - 1];\n            if (prevCmd instanceof SetValueCmd && prevCmd.allowReplace(cmd)) {\n                cmd.oldValue = prevCmd.oldValue;\n                this.commandStack = this.commandStack.slice(0, this.commandStack.length - 1);\n                this.lastCommandIndex--;\n            }\n        }\n        this.commandStack.push(cmd);\n        this.lastCommandIndex++;\n        this.modified = true;\n        this.selectionSinceLastCommand = false;\n        this.updateMenuButtons();\n    }\n\n    undoCommand() {\n        if (this.lastCommandIndex >= 0) {\n            this.commandStack[this.lastCommandIndex].undo();\n            this.lastCommandIndex--;\n            this.modified = true;\n            this.updateMenuButtons();\n        }\n    }\n\n    redoCommand() {\n        if (this.lastCommandIndex < (this.commandStack.length - 1)) {\n            this.lastCommandIndex++;\n            this.commandStack[this.lastCommandIndex].do();\n            this.modified = true;\n            this.updateMenuButtons();\n        }\n    }\n\n    updateMenuButtons() {\n        $('#rbro_menu_save').prop('disabled', (this.commandStack.length === 0 || !this.modified));\n        $('#rbro_menu_undo').prop('disabled', (this.lastCommandIndex < 0));\n        $('#rbro_menu_redo').prop('disabled', (this.lastCommandIndex >= (this.commandStack.length - 1)));\n    }\n\n    updateMenuAlignButtons() {\n        let elementCount = 0;\n        let previousContainerOffset = { x: 0, y: 0 };\n        let elementSameContainerOffsetX = true;\n        let elementSameContainerOffsetY = true;\n        for (let selectionId of this.selections) {\n            let obj = this.getDataObject(selectionId);\n            if (obj instanceof DocElement && obj.getXTagId() !== '') {\n                elementCount++;\n                let container = obj.getContainer();\n                let offset = container.getOffset();\n                if (elementCount === 1) {\n                    previousContainerOffset = offset;\n                } else {\n                    if (offset.x !== previousContainerOffset.x) {\n                        elementSameContainerOffsetX = false;\n                    }\n                    if (offset.y !== previousContainerOffset.y) {\n                        elementSameContainerOffsetY = false;\n                    }\n                }\n            }\n        }\n        if (elementCount > 1) {\n            // allow alignment of elements if their parent container has the same x/y offset\n            if (elementSameContainerOffsetX) {\n                $('#rbro_menu_align').show();\n            } else {\n                $('#rbro_menu_align').hide();\n            }\n            if (elementSameContainerOffsetY) {\n                $('#rbro_menu_valign').show();\n            } else {\n                $('#rbro_menu_valign').hide();\n            }\n            $('#rbo_menu_elements .rbroMenuButton').hide();\n        } else {\n            $('#rbro_menu_align').hide();\n            $('#rbro_menu_valign').hide();\n            $('#rbo_menu_elements .rbroMenuButton').show();\n        }\n    }\n\n    debugCommandStack() {\n        console.clear();\t\t\n        for (let i=0; i < this.commandStack.length; i++) {\n            if (i > this.lastCommandIndex) {\n                console.log('( ' + i + ' ' + this.commandStack[i].getName() + ' )');\n            } else {\n                console.log(i + ' ' + this.commandStack[i].getName());\n            }\n        }\n    }\n\n    addDataObject(obj) {\n        this.objectMap[obj.getId()] = obj;\n    }\n\n    deleteDataObject(obj) {\n        if (this.isSelectedObject(obj.getId())) {\n            this.deselectObject(obj.getId());\n        }\n        if (obj.getId() in this.objectMap) {\n            obj.remove();\n            delete this.objectMap[obj.getId()];\n        }\n    }\n\n    getDataObject(id) {\n        if (id !== null && id in this.objectMap) {\n            return this.objectMap[id];\n        }\n        return null;\n    }\n\n    isSelectedObject(id) {\n        return this.selections.indexOf(id) !== -1;\n    }\n\n    isDocElementSelected() {\n        for (let selectionId of this.selections) {\n            let obj = this.getDataObject(selectionId);\n            if (obj instanceof DocElement) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isTableElementSelected(tableId) {\n        for (let selectionId of this.selections) {\n            let obj = this.getDataObject(selectionId);\n            if (obj instanceof TableTextElement) {\n                if (obj.getValue('tableId') === tableId) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    selectObject(id, clearSelection) {\n        if (clearSelection) {\n            this.deselectAll();\n        }\n        let obj = this.getDataObject(id);\n        if (obj !== null) {\n            this.selections.push(id);\n            obj.select();\n            if (obj.getPanelItem() !== null) {\n                obj.getPanelItem().openParentItems();\n                obj.getPanelItem().setActive();\n            }\n        }\n        this.selectionSinceLastCommand = true;\n        this.updateMenuAlignButtons();\n    }\n\n    deselectObject(id) {\n        this.deselectObjectInternal(id, true);\n        this.updateMenuAlignButtons();\n    }\n\n    deselectObjectInternal(id, updateSelections) {\n        let obj = this.getDataObject(id);\n        if (obj !== null) {\n            obj.deselect();\n            if (this.detailData === obj) {\n                this.setDetailPanel('none', null);\n                $('.rbroMenuItem').removeClass('rbroMenuItemActive');\n            }\n        }\n        if (updateSelections) {\n            let selectionIndex = this.selections.indexOf(id);\n            if (selectionIndex !== -1) {\n                this.selections.splice(selectionIndex, 1);\n            }\n        }\n    }\n\n    deselectAll() {\n        for (let selectionId of this.selections) {\n            this.deselectObjectInternal(selectionId, false);\n        }\n        this.selections = [];\n        this.updateMenuAlignButtons();\n    }\n\n    getContainer(posX, posY, elementType) {\n        let bestMatch = null;\n        let bestMatchLevel = -1;\n        for (let i = 0; i < this.containers.length; i++) {\n            let container = this.containers[i];\n            if (container.getLevel() > bestMatchLevel && container.isElementAllowed(elementType) &&\n                    container.isInside(posX, posY)) {\n                bestMatch = container;\n                bestMatchLevel = container.getLevel();\n            }\n        }\n        return bestMatch;\n    }\n\n    addContainer(container) {\n        this.containers.push(container);\n        this.addDataObject(container);\n    }\n\n    deleteContainer(container) {\n        for (let i = 0; i < this.containers.length; i++) {\n            if (this.containers[i].getId() === container.getId()) {\n                this.containers.splice(i, 1);\n                break;\n            }\n        }\n        this.deleteDataObject(container);\n    }\n\n    /**\n     * Store our own drag data because dataTransfer data of event is not available in\n     * dragenter/dragover/dragleave events (in some browsers).\n     */\n    startBrowserDrag(browserDragType, browserDragElementType, browserDragId) {\n        this.browserDragType = browserDragType;\n        this.browserDragId = browserDragId;\n        this.getDocument().startBrowserDrag(browserDragElementType);\n    }\n\n    isBrowserDragActive(browserDragType) {\n        return this.browserDragType === browserDragType;\n    }\n\n    getBrowserDragId() {\n        return this.browserDragId;\n    }\n\n    updateSelectionDrag(diffX, diffY, dragType, dragContainer, store) {\n        let cmdGroup;\n        if (store) {\n            cmdGroup = new CommandGroupCmd(dragType === DocElement.dragType.element ? 'Update position' : 'Resize', this);\n        }\n        for (let selectionId of this.selections) {\n            let obj = this.getDataObject(selectionId);\n            if (obj !== null) {\n                if (dragType !== DocElement.dragType.element || obj.isDraggingAllowed()) {\n                    obj.updateDrag(diffX, diffY, dragType, dragContainer, store ? cmdGroup : null);\n                }\n            }\n        }\n        if (store && !cmdGroup.isEmpty()) {\n            this.executeCommand(cmdGroup);\n        }\n    }\n\n    /**\n     * Aligns all currently selected doc elements to each other.\n     * @param {Style.alignment} alignment\n     */\n    alignSelections(alignment) {\n        let alignVal = NaN;\n        let x, y, width, height;\n        let minX = Number.MAX_VALUE, maxX = Number.MIN_VALUE, minY = Number.MAX_VALUE, maxY = Number.MIN_VALUE;\n        let elementCount = 0;\n        for (let selectionId of this.selections) {\n            let obj = this.getDataObject(selectionId);\n            if (obj instanceof DocElement && obj.getXTagId() !== '') {\n                elementCount++;\n                x = obj.getValue('xVal');\n                y = obj.getValue('yVal');\n                width = obj.getValue('widthVal');\n                height = obj.getValue('heightVal');\n                if (x < minX) {\n                    minX = x;\n                }\n                if ((x + width) > maxX) {\n                    maxX = x + width;\n                }\n                if (y < minY) {\n                    minY = y;\n                }\n                if ((y + height) > maxY) {\n                    maxY = y + height;\n                }\n            }\n        }\n        let center = minX + ((maxX - minX) / 2);\n        let vcenter  = minY + ((maxY - minY) / 2);\n        if (elementCount > 1) {\n            let cmdGroup = new CommandGroupCmd('Align elements', this);\n            for (let selectionId of this.selections) {\n                let obj = this.getDataObject(selectionId);\n                if (obj instanceof DocElement && !(obj instanceof PageBreakElement)) {\n                    switch (alignment) {\n                        case Style.alignment.left: {\n                            let cmd = new SetValueCmd(obj.getId(), obj.getXTagId(), 'x',\n                                '' + minX, SetValueCmd.type.text, this);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        break;\n                        case Style.alignment.center: {\n                            let cmd = new SetValueCmd(obj.getId(), obj.getXTagId(), 'x',\n                                '' + (center - (obj.getValue('widthVal') / 2)), SetValueCmd.type.text, this);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        break;\n                        case Style.alignment.right: {\n                            let cmd = new SetValueCmd(obj.getId(), obj.getXTagId(), 'x',\n                                '' + (maxX - obj.getValue('widthVal')), SetValueCmd.type.text, this);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        break;\n                        case Style.alignment.top: {\n                            let cmd = new SetValueCmd(obj.getId(), obj.getYTagId(), 'y',\n                                '' + minY, SetValueCmd.type.text, this);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        break;\n                        case Style.alignment.middle: {\n                            let cmd = new SetValueCmd(obj.getId(), obj.getYTagId(), 'y',\n                                '' + (vcenter - (obj.getValue('heightVal') / 2)), SetValueCmd.type.text, this);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        break;\n                        case Style.alignment.bottom: {\n                            let cmd = new SetValueCmd(obj.getId(), obj.getYTagId(), 'y',\n                                '' + (maxY - obj.getValue('heightVal')), SetValueCmd.type.text, this);\n                            cmdGroup.addCommand(cmd);\n                        }\n                        break;\n                    }\n                }\n            }\n            this.executeCommand(cmdGroup);\n        }\n    }\n\n    /**\n     * Converts given value to a string which can be used in css style attribute\n     * where a position or size must be specified.\n     * @param {String|Number} val - a number value, can also be given as a string.\n     * @returns {String}\n     */\n    toPixel(val) {\n        if (val === '') {\n            return '0px';\n        }\n        if ($.type(val) === 'string') {\n            val = parseFloat(val.replace(',', '.'));\n            if (isNaN(val)) {\n                return '0px';\n            }\n        }\n        return val + 'px';\n    }\n\n    createDocElement(docElementData) {\n        let element = AddDeleteDocElementCmd.createElement(\n            docElementData.id, docElementData, docElementData.elementType, -1, false, this);\n        let maxId = element.getMaxId();\n        if (maxId >= this.nextId) {\n            this.nextId = maxId + 1;\n        }\n        return element;\n    }\n\n    createParameter(parameterData) {\n        let parameter = new Parameter(parameterData.id, parameterData, this);\n        let parentPanel = this.mainPanel.getParametersItem();\n        let panelItem = new MainPanelItem(\n            'parameter', parentPanel, parameter,\n            { hasChildren: true, showAdd: parameter.getValue('editable'), showDelete: parameter.getValue('editable'), draggable: true }, this);\n        parameter.setPanelItem(panelItem);\n        parentPanel.appendChild(panelItem);\n        parameter.setup();\n        if (parameter.getValue('type') !== Parameter.type.array && parameter.getValue('type') !== Parameter.type.map) {\n            $(`#rbro_menu_item_add${parameter.getId()}`).hide();\n            $(`#rbro_menu_item_children${parameter.getId()}`).hide();\n            $(`#rbro_menu_item_children_toggle${parameter.getId()}`).hide();\n        }\n        this.addParameter(parameter);\n        let maxId = parameter.getMaxId();\n        if (maxId >= this.nextId) {\n            this.nextId = maxId + 1;\n        }\n    }\n\n    createStyle(styleData) {\n        let style = new Style(styleData.id, styleData, this);\n        let parentPanel = this.mainPanel.getStylesItem();\n        let panelItem = new MainPanelItem('style', parentPanel, style, { draggable: true }, this);\n        style.setPanelItem(panelItem);\n        parentPanel.appendChild(panelItem);\n        this.addStyle(style);\n        if (styleData.id >= this.nextId) {\n            this.nextId = styleData.id + 1;\n        }\n    }\n\n    /**\n     * Shows a global loading image which disables all controls.\n     */\n    showLoading() {\n        if ($('#rbro_loading_div').length == 0) {\n            $('body').append('<div id=\"rbro_loading_div\" class=\"rbroLoadingIndicator\"></div>');\n        }\n    }\n\n    /**\n     * Hides global loading image.\n     */\n    hideLoading() {\n        $('#rbro_loading_div').remove();\n    }\n\n    getTestData() {\n        let ret = {};\n        for (let parameter of this.getParameters()) {\n            if (!parameter.getValue('showOnlyNameType')) {\n                let type = parameter.getValue('type');\n                if (type === Parameter.type.map) {\n                    let testData = {};\n                    for (let child of parameter.getChildren()) {\n                        testData[child.getName()] = child.getValue('testData');\n                    }\n                    ret[parameter.getName()] = testData;\n                } else if (type === Parameter.type.array) {\n                    ret[parameter.getName()] = parameter.getTestDataRows(false);\n                } else if (type === Parameter.type.simpleArray) {\n                    let testDataRows = [];\n                    // because test data rows are stored as map items we convert the list to a list of simple values\n                    for (let testDataRow of parameter.getTestDataRows(false)) {\n                        if ('data' in testDataRow) {\n                            testDataRows.push(testDataRow['data']);\n                        }\n                    }\n                    ret[parameter.getName()] = testDataRows;\n                } else if (type === Parameter.type.string || type === Parameter.type.number || type === Parameter.type.date) {\n                    ret[parameter.getName()] = parameter.getValue('testData');\n                }\n            }\n        }\n        return ret;\n    }\n\n    processErrors(errors) {\n        for (let error of errors) {\n            if (error.object_id) {\n                $(`#rbro_menu_item${error.object_id}`).addClass('rbroError');\n                let obj = this.getDataObject(error.object_id);\n                if (obj !== null) {\n                    obj.addError(error);\n                }\n            }\n        }\n        if (errors.length > 0) {\n            this.detailPanels[this.activeDetailPanel].updateErrors();\n            this.selectObject(errors[0].object_id, true);\n        }\n    }\n\n    /**\n     * Performs ajax request to upload the report and either update displayed errors or\n     * display report pdf in case report is valid.\n     * @param {Object} data - report data.\n     * @param {Boolean} isTestData - true if data contains test data from parameters.\n     */\n    previewInternal(data, isTestData) {\n        let self = this;\n        $('.rbroMenuItem').removeClass('rbroError');\n        for (let objId in this.objectMap) {\n            this.objectMap[objId].clearErrors();\n        }\n        this.detailPanels[this.activeDetailPanel].updateErrors();\n        this.showLoading();\n        $.ajax(this.properties.reportServerUrl, {\n            data: JSON.stringify({\n                report: this.getReport(),\n                outputFormat: DocumentProperties.outputFormat.pdf,\n                data: data,\n                isTestData: isTestData\n            }),\n            type: \"PUT\", contentType: \"application/json\",\n            timeout: this.properties.reportServerTimeout,\n            crossDomain: this.properties.reportServerUrlCrossDomain,\n            success: function(data) {\n                self.hideLoading();\n                let pdfPrefix = 'data:application/pdf';\n                if (data.substr(0, 4) === 'key:') {\n                    self.reportKey = data.substr(4);\n                    var append = self.properties.reportServerUrl.indexOf('?') !== -1 ? '&' : '?';\n                    self.getDocument().openPdfPreviewTab(self.properties.reportServerUrl + append + 'key=' + self.reportKey + '&outputFormat=pdf');\n                } else {\n                    self.reportKey = null;\n                    try {\n                        let obj = JSON.parse(data);\n                        if (obj.errors.length > 0) {\n                            self.processErrors(obj.errors);\n                        }\n                    } catch (e) {\n                        alert('preview failed');\n                    }\n                }\n            },\n            error: function(jqXHR, textStatus, errorThrown) {\n                self.hideLoading();\n                if (textStatus === \"timeout\") {\n                    alert('preview failed (timeout)');\n                } else {\n                    alert('preview failed');\n                }\n            }\n        });\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // API functions\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Sets the internal modified flag.\n     * If true the save button is enabled, otherwise the save button is disabled.\n     * @param {Boolean} modified\n     */\n    setModified(modified) {\n        this.modified = modified;\n        this.updateMenuButtons();\n    }\n\n    /**\n     * Returns report object containing everything needed for the report.\n     * @returns {Object}\n     */\n    getReport() {\n        let ret = { docElements: [], parameters: [], styles: [], version: 2 };\n        let i;\n        ret.docElements = this.getDocElements(false);\n        for (let parameter of this.getParameters()) {\n            ret.parameters.push(parameter.toJS());\n        }\n        for (let style of this.getStyles()) {\n            ret.styles.push(style.toJS());\n        }\n        ret.documentProperties = this.documentProperties.toJS();\n        \n        return ret;\n    }\n\n    /**\n     * Either calls saveCallback (if available) or stores report in local storage (if key is available).\n     */\n    save() {\n        if (this.properties.saveCallback) {\n            this.properties.saveCallback();\n        } else if (this.properties.localStorageReportKey) {\n            if ('localStorage' in window && window['localStorage'] !== null) {\n                try {\n                    let report = this.getReport();\n                    // console.log(JSON.stringify(report));\n                    window.localStorage.setItem(this.properties.localStorageReportKey, JSON.stringify(report));\n                    this.modified = false;\n                } catch (e) {\n                }\n            }\n        }\n        this.updateMenuButtons();\n    }\n\n    /**\n     * Loads report object into ReportBro Designer.\n     * @param {Object} report - the report object.\n     */\n    load(report) {\n        for (let parameter of this.getParameters()) {\n            this.deleteParameter(parameter);\n        }\n        for (let style of this.getStyles()) {\n            this.deleteStyle(style);\n        }\n        \n        this.nextId = 1;\n        this.setDetailPanel('none', null);\n        this.docElements = [];\n        this.objectMap = {};\n        this.initObjectMap();\n        this.selections = [];\n        this.getMainPanel().clearAll();\n        this.getMainPanel().getHeaderItem().close();\n        this.getMainPanel().getDocumentItem().close();\n        this.getMainPanel().getFooterItem().close();\n        this.getMainPanel().getParametersItem().close();\n        this.getMainPanel().getStylesItem().close();\n\n        if (report.version < 2) {\n            for (let docElementData of report.docElements) {\n                if (docElementData.elementType === DocElement.type.table) {\n                    docElementData.contentDataRows = [docElementData.contentData];\n                    docElementData.contentRows = '1';\n                }\n            }\n        }\n\n        this.documentProperties.setInitialData(report.documentProperties);\n        this.documentProperties.setup();\n\n        for (let styleData of report.styles) {\n            this.createStyle(styleData);\n        }\n        for (let parameterData of report.parameters) {\n            this.createParameter(parameterData);\n        }\n        for (const [key, docElementData] of Object.entries(report.docElements)) {\n            this.createDocElement(docElementData, key);\n        }\n        this.browserDragType = '';\n        this.browserDragId = '';\n\n        this.commandStack = [];\n        this.lastCommandIndex = -1;\n        this.modified = false;\n        this.updateMenuButtons();\n        this.updateIndexes();\n    }\n\n    updateIndexes() {\n        var prevIndex = 0;\n        var zIndex = this.headerBand.panelItem.children.length + this.contentBand.panelItem.children.length + this.footerBand.panelItem.children.length;\n        for (const [key, MainPanelItem] of Object.entries(this.headerBand.panelItem.children)) {\n            if (MainPanelItem.data instanceof DocElement) {\n                MainPanelItem.data.zIndex = zIndex - parseInt(key);\n                prevIndex = MainPanelItem.data.zIndex;\n                if($(`#rbro_el${MainPanelItem.data.id}`).css('z-index') !== '999999') {\n                    $(`#rbro_el${MainPanelItem.data.id}`).css({'z-index': MainPanelItem.data.zIndex});\n                }\n            }\n        }\n        zIndex = (prevIndex - 1) > 0 ? prevIndex - 1 : zIndex;\n        for (const [key, MainPanelItem] of Object.entries(this.contentBand.panelItem.children)) {\n            if (MainPanelItem.data instanceof DocElement) {\n                MainPanelItem.data.zIndex = zIndex - parseInt(key);\n                prevIndex = MainPanelItem.data.zIndex;\n                if($(`#rbro_el${MainPanelItem.data.id}`).css('z-index') !== '999999') {\n                    $(`#rbro_el${MainPanelItem.data.id}`).css({'z-index': MainPanelItem.data.zIndex});\n                }\n                if($(`#rbro_el_table${MainPanelItem.data.id}`).parent().css('z-index') !== '999999') {\n                    $(`#rbro_el_table${MainPanelItem.data.id}`).parent().css({'z-index': MainPanelItem.data.zIndex});\n                }\n            }\n        }\n        \n        zIndex = (prevIndex - 1) > 0 ? prevIndex - 1 : zIndex;\n        for (const [key, MainPanelItem] of Object.entries(this.footerBand.panelItem.children)) {\n            if (MainPanelItem.data instanceof DocElement) {\n                MainPanelItem.data.zIndex = zIndex - parseInt(key);\n                if($(`#rbro_el${MainPanelItem.data.id}`).css('z-index') !== '999999') {\n                    $(`#rbro_el${MainPanelItem.data.id}`).css({'z-index': MainPanelItem.data.zIndex});\n                }\n            }\n        }\n    }\n\n    /**\n     * Loads report from local storage (if key and report is available).\n     */\n    loadLocalReport() {\n        if (this.properties.localStorageReportKey) {\n            if ('localStorage' in window && window['localStorage'] !== null) {\n                let report = null;\n                try {\n                    report = JSON.parse(window.localStorage[this.properties.localStorageReportKey]);\n                } catch (e) {\n                }\n                if (report !== null) {\n                    this.load(report);\n                }\n            }\n        }\n    }\n  \n    preview() {\n        this.previewInternal(this.getTestData(), true);\n    }\n\n    previewWithData(data) {\n        this.previewInternal(data, false);\n    }\n\n    /**\n     * Downloads spreadsheet file for a report where a preview was executed before.\n     */\n    downloadSpreadsheet() {\n        if (this.reportKey !== null) {\n            var append = self.properties.reportServerUrl.indexOf('?') !== -1 ? '&' : '?';\n            window.open(this.properties.reportServerUrl + append + 'key=' + this.reportKey + '&outputFormat=xlsx', '_blank');\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ReportBro.js\n// module id = 29\n// module chunks = 0","import Container from './Container';\nimport DocElement from '../elements/DocElement';\nimport Document from '../Document';\nimport * as utils from '../utils';\n\n/**\n * A frame container which can contain various doc elements.\n * @class\n */\nexport default class Frame extends Container {\n    constructor(id, name, rb) {\n        super(id, name, rb);\n    }\n\n    /**\n     * Called after initialization is finished.\n     */\n    setup() {\n        this.el = this.rb.getDocument().getElement(this.band);\n    }\n\n    /**\n     * Returns true if the given element type can be added to this container.\n     * @param {String} elementType\n     */\n    isElementAllowed(elementType) {\n        return elementType !== DocElement.type.pageBreak && elementType !== DocElement.type.frame &&\n            elementType !== DocElement.type.section;\n    }\n\n    /**\n     * Returns absolute container offset.\n     * @returns {Object} x and y offset coordinates.\n     */\n    getOffset() {\n        let x = 0, y = 0;\n        if (this.owner !== null) {\n            x = this.owner.getValue('xVal');\n            y = this.owner.getValue('yVal');\n        }\n        if (this.parent !== null) {\n            let offset = this.parent.getOffset();\n            x += offset.x;\n            y += offset.y;\n        }\n        return { x: x, y: y };\n    }\n\n    /**\n     * Returns container size.\n     * @returns {Object} width and height of container.\n     */\n    getSize() {\n        let width = 0, height = 0;\n        if (this.owner !== null) {\n            width = this.owner.getValue('widthVal');\n            height = this.owner.getValue('heightVal');\n        }\n        return { width: width, height: height };\n    }\n    \n    /**\n     * Returns container content size.\n     * This is the container minus optional borders, thus the available area for\n     * elements inside the frame.\n     * @returns {Object} width and height of container content area.\n     */\n    getContentSize() {\n        let width = 0, height = 0;\n        if (this.owner !== null) {\n            width = this.owner.getValue('widthVal');\n            height = this.owner.getValue('heightVal');\n            let borderWidth = this.owner.getValue('borderWidthVal');\n            if (this.owner.getValue('borderLeft')) {\n                width -= borderWidth;\n            }\n            if (this.owner.getValue('borderRight')) {\n                width -= borderWidth;\n            }\n            if (this.owner.getValue('borderTop')) {\n                height -= borderWidth;\n            }\n            if (this.owner.getValue('borderBottom')) {\n                height -= borderWidth;\n            }\n        }\n        return { width: width, height: height };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/container/Frame.js\n// module id = 30\n// module chunks = 0","import DocElement from './DocElement';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Style from '../data/Style';\nimport * as utils from '../utils';\n\n/**\n * Barcode doc element. Currently only Code-128 is supported.\n * @class\n */\nexport default class BarCodeElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementImage'), id, 80, 80, rb);\n        this.elBarCode = null;\n        this.content = '';\n        this.format = 'CODE128';\n        this.displayValue = true;\n        this.spreadsheet_hide = false;\n        this.spreadsheet_column = '';\n        this.spreadsheet_colspan = '';\n        this.spreadsheet_addEmptyRow = false;\n        this.setInitialData(initialData);\n        this.name = this.rb.getLabel('docElementBarCode');\n        $(`#rbro_menu_item_name${this.id}`).text(this.name);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        if (this.content !== '') {\n            this.updateBarCode();\n        }\n        this.updateDisplay();\n        this.updateStyle();\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n        if (field === 'content' ||field === 'format' || field === 'displayValue' || field === 'height') {\n            this.updateBarCode();\n            this.updateDisplay();\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'x', 'y', 'height', 'zIndex', 'content', 'format', 'displayValue',\n            'printIf', 'removeEmptyElement',\n            'spreadsheet_hide', 'spreadsheet_column', 'spreadsheet_colspan', 'spreadsheet_addEmptyRow'];\n    }\n\n    getElementType() {\n        return DocElement.type.barCode;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(x), top: this.rb.toPixel(y),\n                width: this.rb.toPixel(width), height: this.rb.toPixel(height) };\n            this.el.css(props);\n        }\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return ['N', 'S'];\n    }\n\n    getXTagId() {\n        return 'rbro_bar_code_element_position_x';\n    }\n\n    getYTagId() {\n        return 'rbro_bar_code_element_position_y';\n    }\n\n    getHeightTagId() {\n        return 'rbro_bar_code_element_height';\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroDocElement rbroBarCodeElement\"></div>`);\n        this.elBarCode = $('<canvas></canvas>');\n        this.el.append(this.elBarCode);\n        this.appendToContainer();\n        this.updateBarCode();\n        super.registerEventHandlers();\n    }\n\n    remove() {\n        super.remove();\n    }\n\n    updateBarCode() {\n        let valid = false;\n        let options = { format: this.format, height: this.displayValue ? (this.heightVal - 22) : this.heightVal,\n                margin: 0, displayValue: this.displayValue };\n        if (this.content !== '' && this.content.indexOf('${') === -1) {\n            try {\n                this.elBarCode.JsBarcode(this.content, options);\n                valid = true;\n            } catch (ex) {\n            }\n        }\n        if (!valid) {\n            // in case barcode cannot be created because of invalid input use default content appropriate\n            // for selected format\n            let content = '';\n            if (this.format === 'CODE39' || this.format === 'CODE128') {\n                content = '12345678';\n            } else if (this.format === 'EAN13') {\n                content = '5901234123457';\n            } else if (this.format === 'EAN8') {\n                content = '96385074';\n            } else if (this.format === 'EAN5') {\n                content = '12345';\n            } else if (this.format === 'EAN2') {\n                content = '12';\n            } else if (this.format === 'ITF14') {\n                content = '12345678901231';\n            } else if (this.format === 'MSI' ||this.format === 'MSI10' || this.format === 'MSI11' ||\n                    this.format === 'MSI1010' || this.format === 'MSI1110' || this.format == 'pharmacode') {\n                content = '1234';\n            }\n            this.elBarCode.JsBarcode(content, options);\n        }\n        this.widthVal = this.elBarCode.width();\n        this.width = '' + this.widthVal;\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_bar_code_element_content', 'content', cmdGroup);\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_bar_code_element_print_if', 'printIf', cmdGroup);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/BarCodeElement.js\n// module id = 31\n// module chunks = 0","import DocElement from './DocElement';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Style from '../data/Style';\nimport * as utils from '../utils';\n\n/**\n * Image doc element. Supported formats are png and jpg.\n * @class\n */\nexport default class ImageElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementImage'), id, 80, 80, rb);\n        this.source = '';\n        this.image = '';\n        this.imageWidth = 0;\n        this.imageHeight = 0;\n        this.imageRatio = 0;\n        this.imageFilename = '';\n        this.elImg = null;\n        this.horizontalAlignment = Style.alignment.left;\n        this.verticalAlignment = Style.alignment.top;\n        this.backgroundColor = '';\n        this.spreadsheet_hide = false;\n        this.spreadsheet_column = '';\n        this.spreadsheet_addEmptyRow = false;\n        this.setInitialData(initialData);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        if (this.image !== '') {\n            // setImage must be called after createElement so load event handler of image element is triggered\n            this.setImage(this.image);\n        }\n        this.updateDisplay();\n        this.updateStyle();\n        this.updateName();\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n        if (field === 'source' || field === 'imageFilename') {\n            this.updateName();\n        } else if (field === 'image') {\n            this.setImage(value);\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'x', 'y', 'width', 'height', 'zIndex', 'source', 'image', 'imageFilename',\n            'horizontalAlignment', 'verticalAlignment', 'backgroundColor',\n            'printIf', 'removeEmptyElement',\n            'spreadsheet_hide', 'spreadsheet_column', 'spreadsheet_addEmptyRow'];\n    }\n\n    getElementType() {\n        return DocElement.type.image;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { left: this.rb.toPixel(x), top: this.rb.toPixel(y),\n                width: this.rb.toPixel(width), height: this.rb.toPixel(height) };\n            this.el.css(props);\n\n            let imgWidth = 0;\n            let imgHeight = 0;\n            if (this.imageRatio !== 0) {\n                imgWidth = (this.imageWidth < width) ? this.imageWidth : width;\n                imgHeight = (this.imageHeight < height) ? this.imageHeight : height;\n                if (imgWidth !== this.imageWidth || imgHeight !== this.imageHeight) {\n                    let scaledWidth = Math.floor(imgHeight * this.imageRatio);\n                    if (scaledWidth < width) {\n                        imgWidth = scaledWidth;\n                    } else {\n                        imgHeight = Math.floor(imgWidth / this.imageRatio);\n                    }\n                }\n            }\n            this.elImg.css({ width: this.rb.toPixel(imgWidth), height: this.rb.toPixel(imgHeight) });\n        }\n    }\n\n    updateStyle() {\n        let styleProperties = {};\n        let horizontalAlignment = this.getValue('horizontalAlignment');\n        let verticalAlignment = this.getValue('verticalAlignment');\n        let alignClass = 'rbroDocElementAlign' + horizontalAlignment.charAt(0).toUpperCase() + horizontalAlignment.slice(1);\n        let valignClass = 'rbroDocElementVAlign' + verticalAlignment.charAt(0).toUpperCase() + verticalAlignment.slice(1);\n        styleProperties['text-align'] = horizontalAlignment;\n        styleProperties['vertical-align'] = verticalAlignment;\n        styleProperties['background-color'] = this.getValue('backgroundColor');\n        $(`#rbro_el_content${this.id}`).css(styleProperties);\n        $(`#rbro_el_content${this.id}`).removeClass().addClass('rbroContentContainerHelper').addClass(alignClass).addClass(valignClass);\n    }\n\n    getXTagId() {\n        return 'rbro_image_element_position_x';\n    }\n\n    getYTagId() {\n        return 'rbro_image_element_position_y';\n    }\n\n    getWidthTagId() {\n        return 'rbro_image_element_width';\n    }\n\n    getHeightTagId() {\n        return 'rbro_image_element_height';\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroDocElement rbroImageElement\"></div>`);\n        this.elImg = $('<img src=\"\">')\n            .on('load', event => {\n                // get image width and height in load event, because width/height are not\n                // directly available in some browsers after setting src\n                this.imageWidth = this.elImg.get(0).naturalWidth;\n                this.imageHeight = this.elImg.get(0).naturalHeight;\n                if (this.imageHeight !== 0) {\n                    this.imageRatio = this.imageWidth / this.imageHeight;\n                } else {\n                    this.imageRatio = 0;\n                }\n                this.updateDisplay();\n            });\n        this.el\n            .append($(`<div id=\"rbro_el_content${this.id}\" class=\"rbroContentContainerHelper\"></div>`)\n                .append(this.elImg)\n            );\n        this.appendToContainer();\n        this.setImage(this.image);\n        super.registerEventHandlers();\n    }\n\n    remove() {\n        this.elImg = null;\n        super.remove();\n    }\n\n    setImage(imgBase64) {\n        this.elImg.attr('src', '');\n        if (imgBase64 !== '') {\n            this.elImg.attr('src', imgBase64);\n        } else {\n            this.imageWidth = 0;\n            this.imageHeight = 0;\n            this.imageRatio = 0;\n            this.updateDisplay();\n        }\n    }\n\n    updateName() {\n        if (this.getValue('imageFilename').trim() !== '') {\n            this.name = this.getValue('imageFilename')\n        } else if (this.getValue('source').trim() !== '') {\n            this.name = this.getValue('source');\n        } else {\n            this.name = this.rb.getLabel('docElementImage');\n        }\n        $(`#rbro_menu_item_name${this.id}`).text(this.name);\n        $(`#rbro_menu_item_name${this.id}`).attr('title', this.name);\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_image_element_source', 'source', cmdGroup);\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_image_element_print_if', 'printIf', cmdGroup);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/ImageElement.js\n// module id = 32\n// module chunks = 0","import DocElement from './DocElement';\n\n/**\n * Line doc element. Currently only horizontal lines are supported.\n * @class\n */\nexport default class LineElement extends DocElement {\n    constructor(id, initialData, rb) {\n        super(rb.getLabel('docElementLine'), id, 100, 1, rb);\n        this.color = '#000000';\n        this.setInitialData(initialData);\n    }\n\n    setup(openPanelItem) {\n        super.setup(openPanelItem);\n        this.createElement();\n        this.updateDisplay();\n        this.updateStyle();\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n        if (field === 'color') {\n            this.updateStyle();\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        return ['id', 'containerId', 'x', 'y', 'width', 'height', 'zIndex', 'color', 'printIf'];\n    }\n\n    getElementType() {\n        return DocElement.type.line;\n    }\n\n    updateStyle() {\n        let styleProperties = {};\n        styleProperties['background-color'] = this.getValue('color');\n        this.el.css(styleProperties);\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return ['E', 'W'];\n    }\n\n    getXTagId() {\n        return 'rbro_line_element_position_x';\n    }\n\n    getYTagId() {\n        return 'rbro_line_element_position_y';\n    }\n\n    getWidthTagId() {\n        return 'rbro_line_element_width';\n    }\n\n    getHeightTagId() {\n        return 'rbro_line_element_height';\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroDocElement rbroLineElement\"></div>`);\n        this.appendToContainer();\n        super.registerEventHandlers();\n    }\n\n    /**\n     * Adds SetValue commands to command group parameter in case the specified parameter is used in any of\n     * the object fields.\n     * @param {Parameter} parameter - parameter which will be renamed.\n     * @param {String} newParameterName - new name of the parameter.\n     * @param {CommandGroupCmd} cmdGroup - possible SetValue commands will be added to this command group.\n     */\n    addCommandsForChangedParameterName(parameter, newParameterName, cmdGroup) {\n        this.addCommandForChangedParameterName(parameter, newParameterName, 'rbro_line_element_print_if', 'printIf', cmdGroup);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/LineElement.js\n// module id = 33\n// module chunks = 0","import DocElement from './DocElement';\nimport Band from '../container/Band';\nimport Document from '../Document';\nimport * as utils from '../utils';\n\n/**\n * Section band doc element. This is the header, content or footer of a custom section.\n *  All Elements inside the band are positioned relative.\n * @class\n */\nexport default class SectionBandElement extends DocElement {\n    constructor(id, initialData, bandType, rb) {\n        let name = (bandType === Band.bandType.header) ?\n            rb.getLabel('bandHeader') : ((bandType === Band.bandType.footer) ? rb.getLabel('bandFooter') : rb.getLabel('bandContent'));\n        super(name, id, 0, 100, rb);\n        this.band = null;\n        this.bandType = bandType;\n        this.repeatHeader = false;\n        this.alwaysPrintOnSamePage = true;\n        this.shrinkToContentHeight = false;\n        this.parentId = initialData.parentId;\n\n        this.heightVal = 0;\n        this.visible = (bandType === Band.bandType.content);\n\n        this.setInitialData(initialData);\n    }\n\n    setup() {\n        this.createElement();\n        this.updateDisplay();\n        this.updateStyle();\n\n        if (this.linkedContainerId === null) {\n            this.linkedContainerId = this.rb.getUniqueId();\n        }\n        this.band = new Band(this.bandType, true, this.linkedContainerId, 'section_' + this.bandType + '_' + this.linkedContainerId, this.rb);\n        this.band.init(this);\n        this.rb.addContainer(this.band);\n    }\n\n    /**\n     * Do not register any event handlers so element cannot be selected.\n     */\n    registerEventHandlers() {\n    }\n\n    /**\n     * Returns highest id of this component, this is the id of the linked container because it is\n     * created after the band element.\n     * @returns {Number}\n     */\n    getMaxId() {\n        return this.linkedContainerId;\n    }\n\n    /**\n     * Returns absolute position inside document.\n     * @returns {Object} x and y coordinates.\n     */\n    getAbsolutePosition() {\n        let pos = { x: 0, y: 0 };\n        let parent = this.rb.getDataObject(this.parentId);\n        if (parent !== null) {\n            pos = parent.getAbsolutePosition();\n        }\n        pos.y += this.yVal;\n        return pos;\n    }\n\n    setValue(field, value, elSelector, isShown) {\n        super.setValue(field, value, elSelector, isShown);\n\n        if (field === 'height') {\n            this[field + 'Val'] = utils.convertInputToNumber(value);\n            let parent = this.rb.getDataObject(this.parentId);\n            if (parent !== null) {\n                parent.updateBands(this);\n            }\n        }\n    }\n\n    /**\n     * Returns all data fields of this object. The fields are used when serializing the object.\n     * @returns {String[]}\n     */\n    getFields() {\n        let fields = ['id', 'containerId', 'linkedContainerId', 'height', 'zIndex', 'alwaysPrintOnSamePage', 'shrinkToContentHeight'];\n        if (this.bandType === Band.bandType.header) {\n            fields.push('repeatHeader');\n        }\n        return fields;\n    }\n\n    updateDisplayInternal(x, y, width, height) {\n        if (this.el !== null) {\n            let props = { top: this.rb.toPixel(y), width: '100%', height: this.rb.toPixel(height) };\n            this.el.css(props);\n        }\n    }\n\n    /**\n     * Returns allowed sizers when element is selected.\n     * @returns {String[]}\n     */\n    getSizers() {\n        return [];\n    }\n\n    getHeightTagId() {\n        return 'rbro_section_band_element_height';\n    }\n\n    getHeight() {\n        return this.heightVal;\n    }\n\n    isDraggingAllowed() {\n        return false;\n    }\n\n    createElement() {\n        this.el = $(`<div id=\"rbro_el${this.id}\" class=\"rbroSectionBandElement rbroElementContainer\"></div>`);\n        this.el.append($(`<div class=\"rbroDocumentBandDescription\">${this.rb.getLabel('docElementSection')} ${this.name}</div>`));\n        $(`#rbro_el${this.parentId}`).append(this.el);\n    }\n\n    getContentElement() {\n        return this.el;\n    }\n\n    getParent() {\n        return this.rb.getDataObject(this.parentId);\n    }\n\n    show(visible) {\n        this.visible = visible;\n        if (visible) {\n            $(`#rbro_el${this.id}`).removeClass('rbroHidden');\n        } else {\n            $(`#rbro_el${this.id}`).addClass('rbroHidden');\n        }\n    }\n\n    isVisible() {\n        return this.visible;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/elements/SectionBandElement.js\n// module id = 34\n// module chunks = 0","import MainPanelItem from './MainPanelItem';\nimport Container from '../container/Container';\nimport Document from '../Document';\n\n/**\n * Main panel which contains all report elements like doc elements, parameters and styles.\n * The main panel shows the structure and all components of the report.\n * @class\n */\nexport default class MainPanel {\n    constructor(rootElement, headerBand, contentBand, footerBand, parameterContainer, styleContainer, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.headerItem = new MainPanelItem(\n            'band', null, headerBand,\n            { hasChildren: true, showAdd: false, showDelete: false, hasDetails: false, visible: this.rb.getDocumentProperties().getValue('header') }, rb);\n        \n        this.documentItem = new MainPanelItem(\n            'band', null, contentBand,\n            { hasChildren: true, showAdd: false, showDelete: false, hasDetails: false }, rb);\n        \n        this.footerItem = new MainPanelItem(\n            'band', null, footerBand,\n            { hasChildren: true, showAdd: false, showDelete: false, hasDetails: false, visible: this.rb.getDocumentProperties().getValue('footer') }, rb);\n\n        this.parametersItem = new MainPanelItem(\n            'parameter', null, parameterContainer,\n            { hasChildren: true, showAdd: rb.getProperty('adminMode'), showDelete: false, hasDetails: false }, rb);\n\n        this.stylesItem = new MainPanelItem(\n            'style', null, styleContainer,\n            { hasChildren: true, showAdd: true, showDelete: false, hasDetails: false }, rb);\n        \n        this.documentPropertiesItem = new MainPanelItem(\n            'documentProperties', null, rb.getDocumentProperties(), { showDelete: false, hasDetails: true }, rb);\n        \n        this.items = [\n            this.headerItem,\n            this.documentItem,\n            this.footerItem,\n            this.parametersItem,\n            this.stylesItem,\n            this.documentPropertiesItem\n        ];\n\n        headerBand.setPanelItem(this.headerItem);\n        contentBand.setPanelItem(this.documentItem);\n        footerBand.setPanelItem(this.footerItem);\n        parameterContainer.setPanelItem(this.parametersItem);\n        styleContainer.setPanelItem(this.stylesItem);\n    }\n\n    getHeaderItem() {\n        return this.headerItem;\n    }\n\n    getDocumentItem() {\n        return this.documentItem;\n    }\n\n    getFooterItem() {\n        return this.footerItem;\n    }\n\n    getParametersItem() {\n        return this.parametersItem;\n    }\n\n    getStylesItem() {\n        return this.stylesItem;\n    }\n\n    getContainerByItem(item) {\n        while (item !== null) {\n            if (item.getData() instanceof Container) {\n                return item.getData();\n            }\n            item = item.getParent();\n        }\n        return null;\n    }\n\n    getDocumentPropertiesItem() {\n        return this.documentPropertiesItem;\n    }\n\n    render() {\n        let panel = $('#rbro_main_panel_list');\n        this.appendChildren(panel, this.items);\n    }\n\n    appendChildren(el, items) {\n        for (let item of items) {\n            el.append(item.getElement());\n            let children = item.getChildren();\n            if (children.length > 0) {\n                let elChildren = $(`#${item.getId()}_children`);\n                this.appendChildren(el, children);\n            }\n        }\n    }\n\n    showHeader() {\n        this.headerItem.show();\n    }\n\n    hideHeader() {\n        this.headerItem.hide();\n    }\n\n    showFooter() {\n        this.footerItem.show();\n    }\n\n    hideFooter() {\n        this.footerItem.hide();\n    }\n\n    clearAll() {\n        for (let item of this.items) {\n            item.clear();\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/menu/MainPanel.js\n// module id = 35\n// module chunks = 0","import Style from '../data/Style';\nimport DocElement from '../elements/DocElement';\n\n/**\n * The menu panel contains all menu buttons.\n * @class\n */\nexport default class MenuPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n    }\n\n    render() {\n        let menuShowButtonLabels = this.rb.getProperty('menuShowButtonLabels');\n        let menuButtonClass = menuShowButtonLabels ? '' : 'rbroHidden';\n        let panel = $('#rbro_menu_panel');\n        let panelLeft = $('<div class=\"rbroToolButtonContainer\"></div>');\n        if (this.rb.getProperty('saveCallback') || this.rb.getProperty('localStorageReportKey')) {\n            panelLeft.append($(`<button id=\"rbro_menu_save\" class=\"rbroButton rbroMenuButton\" title=\"${this.rb.getLabel('menuSaveTip')}\">\n                    <span class=\"rbroIcon-save\"></span><span class=\"${menuButtonClass}\">${this.rb.getLabel('menuSave')}</span></button>`)\n                .click(event => {\n                    this.rb.save();\n                })\n            );\n        }\n        panelLeft.append($(`<button id=\"rbro_menu_undo\" class=\"rbroButton rbroMenuButton\" title=\"${this.rb.getLabel('menuUndoTip')}\">\n                <span class=\"rbroIcon-undo\"></span><span class=\"${menuButtonClass}\">${this.rb.getLabel('menuUndo')}</span></button>`)\n            .click(event => {\n                this.rb.undoCommand();\n            })\n        );\n        panelLeft.append($(`<button id=\"rbro_menu_redo\" class=\"rbroButton rbroMenuButton\" title=\"${this.rb.getLabel('menuRedoTip')}\">\n                <span class=\"rbroIcon-redo\"></span><span class=\"${menuButtonClass}\">${this.rb.getLabel('menuRedo')}</span></button>`)\n            .click(event => {\n                this.rb.redoCommand();\n            })\n        );\n        panelLeft.append($(`<button id=\"rbro_menu_preview\" class=\"rbroButton rbroMenuButton\" title=\"${this.rb.getLabel('menuPreviewTip')}\">\n                <span class=\"rbroIcon-play\"></span><span class=\"${menuButtonClass}\">${this.rb.getLabel('menuPreview')}</span></button>`)\n            .click(event => {\n                this.rb.preview();\n            })\n        );\n        panel.append(panelLeft);\n\n        let panelRight = $('<div class=\"rbroElementButtonContainer\"></div>');\n        let elElementsDiv = $('<div id=\"rbo_menu_elements\" class=\"rbroElementButtons\"></div>');\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_text\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementText')}\">\n                    <span class=\"rbroIcon-text\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');  // without setData dragging does not work in FF\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n\n                this.rb.startBrowserDrag('docElement', DocElement.type.text, '');\n\n                // avoid calling dragstart handler for main div which disables dragging for all other elements\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_line\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementLine')}\">\n                    <span class=\"rbroIcon-line\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.line, '');\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_image\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementImage')}\">\n                    <span class=\"rbroIcon-image\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.image, '');\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_bar_code\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementBarCode')}\">\n                    <span class=\"rbroIcon-barcode\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.barCode, '');\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_table\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementTable')}\">\n                    <span class=\"rbroIcon-table\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.table, '');\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_frame\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementFrame')}\">\n                    <span class=\"rbroIcon-frame\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.frame, '');\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_section\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementSection')}\">\n                    <span class=\"rbroIcon-section\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.section, '');\n                event.stopPropagation();\n            })\n        );\n        elElementsDiv.append($(`<div id=\"rbro_menu_element_page_break\" class=\"rbroButton rbroMenuButton\" draggable=\"true\"\n                title=\"${this.rb.getLabel('docElementPageBreak')}\">\n                    <span class=\"rbroIcon-page-break\"></span>\n                </div>`)\n            .on('dragstart', event => {\n                event.originalEvent.dataTransfer.setData('text/plain', '');\n                event.originalEvent.dataTransfer.effectAllowed = 'copy';\n                this.rb.startBrowserDrag('docElement', DocElement.type.pageBreak, '');\n                event.stopPropagation();\n            })\n        );\n        panelRight.append(elElementsDiv);\n        \n        let elActionsDiv = $('<div class=\"rbroActionButtons\"></div>');\n        let elAlignDiv = $('<div id=\"rbro_menu_align\" style=\"display: none;\"></div>');\n        let elAlignLeft = $(`<button id=\"rbro_menu_align_left\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-left\" type=\"button\"\n                title=\"${this.rb.getLabel('menuAlignLeft')}\"></button>`)\n            .click(event => {\n                this.rb.alignSelections(Style.alignment.left);\n            });\n        elAlignDiv.append(elAlignLeft);\n        let elAlignCenter = $(`<button id=\"rbro_menu_align_center\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-center\" type=\"button\"\n                title=\"${this.rb.getLabel('menuAlignCenter')}\"></button>`)\n            .click(event => {\n                this.rb.alignSelections(Style.alignment.center);\n            });\n        elAlignDiv.append(elAlignCenter);\n        let elAlignRight = $(`<button id=\"rbro_menu_align_right\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-right\" type=\"button\"\n                title=\"${this.rb.getLabel('menuAlignRight')}\"></button>`)\n            .click(event => {\n                this.rb.alignSelections(Style.alignment.right);\n            });\n        elAlignDiv.append(elAlignRight);\n        elActionsDiv.append(elAlignDiv);\n        let elVAlignDiv = $('<div id=\"rbro_menu_valign\" style=\"display: none;\"></div>');\n        let elAlignTop = $(`<button id=\"rbro_menu_align_top\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-top\" type=\"button\"\n                title=\"${this.rb.getLabel('menuAlignTop')}\"></button>`)\n            .click(event => {\n                this.rb.alignSelections(Style.alignment.top);\n            });\n        elVAlignDiv.append(elAlignTop);\n        let elAlignMiddle = $(`<button id=\"rbro_menu_align_middle\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-middle\" type=\"button\"\n                title=\"${this.rb.getLabel('menuAlignMiddle')}\"></button>`)\n            .click(event => {\n                this.rb.alignSelections(Style.alignment.middle);\n            });\n        elVAlignDiv.append(elAlignMiddle);\n        let elAlignBottom = $(`<button id=\"rbro_menu_align_bottom\"\n                class=\"rbroButton rbroActionButton rbroIcon-align-bottom\" type=\"button\"\n                title=\"${this.rb.getLabel('menuAlignBottom')}\"></button>`)\n            .click(event => {\n                this.rb.alignSelections(Style.alignment.bottom);\n            });\n        elVAlignDiv.append(elAlignBottom);\n        elActionsDiv.append(elVAlignDiv);\n\n        let elMenuToggleGrid = $(`<button id=\"rbro_menu_toggle_grid\"\n                class=\"rbroButton rbroGridButton rbroActionButton rbroIcon-grid ${this.rb.getProperty('showGrid') ? 'rbroButtonActive' : ''}\" type=\"button\"\n                title=\"${this.rb.getLabel('menuToggleGrid')}\"></button>`)\n            .click(event => {\n                elMenuToggleGrid.toggleClass('rbroButtonActive');\n                this.rb.getDocument().toggleGrid();\n            });\n        elActionsDiv.append(elMenuToggleGrid);\n        panelRight.append(elActionsDiv);\n        panel.append(panelRight);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/menu/MenuPanel.js\n// module id = 36\n// module chunks = 0","import StylePanel from './StylePanel';\nimport CommandGroupCmd from '../commands/CommandGroupCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport DocElement from '../elements/DocElement';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all barcode properties.\n * @class\n */\nexport default class BarCodeElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_bar_code_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_bar_code_element_content_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_content\">${this.rb.getLabel('barCodeElementContent')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elContent = $(`<textarea id=\"rbro_bar_code_element_content\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_content', 'content',\n                        elContent.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elContent);\n        elFormField.append(elContent);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_bar_code_element_content', 'content', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_bar_code_element_content_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_bar_code_element_format_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_format\">${this.rb.getLabel('barCodeElementFormat')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elFormat = $(`<select id=\"rbro_bar_code_element_format\" disabled=\"disabled\">\n                <option value=\"CODE128\">CODE128</option>\n            </select>`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_format',\n                        'format', elFormat.val(), SetValueCmd.type.select, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elFormat);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_bar_code_element_display_value_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_display_value\">${this.rb.getLabel('barCodeElementDisplayValue')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elDisplayValue = $(`<input id=\"rbro_bar_code_element_display_value\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_bar_code_element_display_value', 'displayValue',\n                        elDisplayValue.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elDisplayValue);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_bar_code_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_position\">${this.rb.getLabel('docElementPosition')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elPosX = $(`<input id=\"rbro_bar_code_element_position_x\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('x') !== elPosX.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_position_x', 'x',\n                        elPosX.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosX);\n        elFormField.append(elPosX);\n        let elPosY = $(`<input id=\"rbro_bar_code_element_position_y\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('y') !== elPosY.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_bar_code_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_bar_code_element_size_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_size\">${this.rb.getLabel('docElementHeight')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elHeight = $(`<input id=\"rbro_bar_code_element_height\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('height') !== elHeight.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_height', 'height',\n                        elHeight.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elFormField.append('<div id=\"rbro_bar_code_element_size_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        let elPrintHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elPrintHeaderIcon = $('<span id=\"rbro_bar_code_element_print_header_icon\" class=\"rbroIcon-plus\"></span>');\n        elDiv = $('<div id=\"rbro_bar_code_element_print_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    $('#rbro_bar_code_element_print_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_bar_code_element_print_section').toggleClass('rbroHidden');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-plus');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elPrintHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop(elPrintHeader.position().top);\n                    }\n                    autosize.update($('#rbro_bar_code_element_print_if'));\n                });\n        elPrintHeader.append(elPrintHeaderIcon);\n        elPrintHeader.append(`<span>${this.rb.getLabel('docElementPrintSettings')}</span>`);\n        elDiv.append(elPrintHeader);\n        panel.append(elDiv);\n\n        let elPrintSectionDiv = $('<div id=\"rbro_bar_code_element_print_section\" class=\"rbroHidden\"></div>');\n        elDiv = $('<div id=\"rbro_bar_code_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_bar_code_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_bar_code_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_bar_code_element_print_if', 'printIf', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_bar_code_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_bar_code_element_remove_empty_element\">${this.rb.getLabel('docElementRemoveEmptyElement')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elRemoveEmptyElement = $(`<input id=\"rbro_bar_code_element_remove_empty_element\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_bar_code_element_remove_empty_element', 'removeEmptyElement',\n                        elRemoveEmptyElement.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elRemoveEmptyElement);\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n\n        if (this.rb.getProperty('enableSpreadsheet')) {\n            let elSpreadsheetHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n            let elSpreadsheetHeaderIcon = $('<span id=\"rbro_bar_code_element_spreadsheet_header_icon\" class=\"rbroIcon-plus\"></span>');\n            elDiv = $('<div id=\"rbro_bar_code_element_spreadsheet_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        $('#rbro_bar_code_element_spreadsheet_header').toggleClass('rbroPanelSectionHeaderOpen');\n                        $('#rbro_bar_code_element_spreadsheet_section').toggleClass('rbroHidden');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-plus');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-minus');\n                        if (elSpreadsheetHeaderIcon.hasClass('rbroIcon-minus')) {\n                            $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elSpreadsheetHeader.position().top);\n                        }\n                    }\n                });\n            elSpreadsheetHeader.append(elSpreadsheetHeaderIcon);\n            elSpreadsheetHeader.append(`<span>${this.rb.getLabel('docElementSpreadsheet')}</span>`);\n            elDiv.append(elSpreadsheetHeader);\n            panel.append(elDiv);\n\n            let elSpreadsheetSectionDiv = $('<div id=\"rbro_bar_code_element_spreadsheet_section\" class=\"rbroHidden\"></div>');\n            elDiv = $('<div id=\"rbro_bar_code_element_spreadsheet_hide_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_bar_code_element_spreadsheet_hide\">${this.rb.getLabel('docElementSpreadsheetHide')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetHide = $(`<input id=\"rbro_bar_code_element_spreadsheet_hide\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_bar_code_element_spreadsheet_hide', 'spreadsheet_hide',\n                            elSpreadsheetHide.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetHide);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_bar_code_element_spreadsheet_column_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_bar_code_element_spreadsheet_column\">${this.rb.getLabel('docElementSpreadsheetColumn')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColumn = $(`<input id=\"rbro_bar_code_element_spreadsheet_column\">`)\n                .on('input', event => {\n                    let obj = this.rb.getDataObject(this.selectedObjId);\n                    if (obj !== null && obj.getValue('spreadsheet_column') !== elSpreadsheetColumn.val()) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_spreadsheet_column', 'spreadsheet_column',\n                            elSpreadsheetColumn.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColumn);\n            elFormField.append(elSpreadsheetColumn);\n            elFormField.append('<div id=\"rbro_bar_code_element_spreadsheet_column_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_bar_code_element_spreadsheet_colspan_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_bar_code_element_spreadsheet_colspan\">${this.rb.getLabel('docElementSpreadsheetColspan')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColspan = $(`<input id=\"rbro_bar_code_element_spreadsheet_colspan\">`)\n                .on('input', event => {\n                    let obj = this.rb.getDataObject(this.selectedObjId);\n                    if (obj !== null && obj.getValue('spreadsheet_colspan') !== elSpreadsheetColspan.val()) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_bar_code_element_spreadsheet_colspan', 'spreadsheet_colspan',\n                            elSpreadsheetColspan.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColspan);\n            elFormField.append(elSpreadsheetColspan);\n            elFormField.append('<div id=\"rbro_bar_code_element_spreadsheet_colspan_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_bar_code_element_spreadsheet_add_empty_row_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_bar_code_element_spreadsheet_add_empty_row\">${this.rb.getLabel('docElementSpreadsheetAddEmptyRow')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetAddEmptyRow = $(`<input id=\"rbro_bar_code_element_spreadsheet_add_empty_row\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_bar_code_element_spreadsheet_add_empty_row', 'spreadsheet_addEmptyRow',\n                            elSpreadsheetAddEmptyRow.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetAddEmptyRow);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n            panel.append(elSpreadsheetSectionDiv);\n        }\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_bar_code_element_content'));\n        autosize.update($('#rbro_bar_code_element_print_if'));\n    }\n\n    show(data) {\n        this.updateData(data);\n        $('#rbro_bar_code_element_panel').removeClass('rbroHidden');\n        this.updateAutosizeInputs();\n    }\n\n    hide() {\n        $('#rbro_bar_code_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {BarCodeElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_bar_code_element_content').prop('disabled', false);\n            $('#rbro_bar_code_element_display_value').prop('disabled', false);\n            $('#rbro_bar_code_element_position_x').prop('disabled', false);\n            $('#rbro_bar_code_element_position_y').prop('disabled', false);\n            $('#rbro_bar_code_element_width').prop('disabled', false);\n            $('#rbro_bar_code_element_height').prop('disabled', false);\n            $('#rbro_bar_code_element_print_if').prop('disabled', false);\n            $('#rbro_bar_code_element_remove_empty_element').prop('disabled', false);\n            $('#rbro_bar_code_element_spreadsheet_hide').prop('disabled', false);\n            $('#rbro_bar_code_element_spreadsheet_column').prop('disabled', false);\n            $('#rbro_bar_code_element_spreadsheet_colspan').prop('disabled', false);\n            $('#rbro_bar_code_element_spreadsheet_add_empty_row').prop('disabled', false);\n\n            $('#rbro_bar_code_element_content').val(data.getValue('content'));\n            $('#rbro_bar_code_element_format').val(data.getValue('format'));\n            $('#rbro_bar_code_element_display_value').prop('checked', data.getValue('displayValue'));\n            $('#rbro_bar_code_element_position_x').val(data.getValue('x'));\n            $('#rbro_bar_code_element_position_y').val(data.getValue('y'));\n            $('#rbro_bar_code_element_width').val(data.getValue('width'));\n            $('#rbro_bar_code_element_height').val(data.getValue('height'));\n            $('#rbro_bar_code_element_print_if').val(data.getValue('printIf'));\n            $('#rbro_bar_code_element_remove_empty_element').prop('checked', data.getValue('removeEmptyElement'));\n            $('#rbro_bar_code_element_spreadsheet_hide').prop('checked', data.getValue('spreadsheet_hide'));\n            $('#rbro_bar_code_element_spreadsheet_column').val(data.getValue('spreadsheet_column'));\n            $('#rbro_bar_code_element_spreadsheet_colspan').val(data.getValue('spreadsheet_colspan'));\n            $('#rbro_bar_code_element_spreadsheet_add_empty_row').prop('checked', data.getValue('spreadsheet_addEmptyRow'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_bar_code_element_content').prop('disabled', true);\n            $('#rbro_bar_code_element_display_value').prop('disabled', true);\n            $('#rbro_bar_code_element_position_x').prop('disabled', true);\n            $('#rbro_bar_code_element_position_y').prop('disabled', true);\n            $('#rbro_bar_code_element_width').prop('disabled', true);\n            $('#rbro_bar_code_element_height').prop('disabled', true);\n            $('#rbro_bar_code_element_print_if').prop('disabled', true);\n            $('#rbro_bar_code_element_remove_empty_element').prop('disabled', true);\n            $('#rbro_bar_code_element_spreadsheet_hide').prop('disabled', true);\n            $('#rbro_bar_code_element_spreadsheet_column').prop('disabled', true);\n            $('#rbro_bar_code_element_spreadsheet_colspan').prop('disabled', true);\n            $('#rbro_bar_code_element_spreadsheet_add_empty_row').prop('disabled', true);\n        }\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_bar_code_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_bar_code_element_panel .rbroPanelSection').removeClass('rbroError');\n        $('#rbro_bar_code_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_bar_code_element_' + error.field + '_row';\n                let errorId = 'rbro_bar_code_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n                if (error.field === 'print_if') {\n                    $('#rbro_bar_code_element_print_header').addClass('rbroError');\n                    if (!$('#rbro_bar_code_element_print_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_bar_code_element_print_header').trigger('click');\n                    }\n                } else if (error.field === 'spreadsheet_column' || error.field === 'spreadsheet_colspan') {\n                    $('#rbro_bar_code_element_spreadsheet_header').addClass('rbroError');\n                    if (!$('#rbro_bar_code_element_spreadsheet_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_bar_code_element_spreadsheet_header').trigger('click');\n                    }\n                }\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/BarCodeElementPanel.js\n// module id = 37\n// module chunks = 0","import Command from '../commands/Command';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport DocumentProperties from '../data/DocumentProperties';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all document properties.\n * @class\n */\nexport default class DocumentPropertiesPanel {\n    constructor(documentProperties, rootElement, rb) {\n        this.documentProperties = documentProperties;\n        this.rootElement = rootElement;\n        this.rb = rb;\n    }\n\n    render(data) {\n        let panel = $('<div id=\"rbro_document_properties_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_document_properties_page_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_page_format\">${this.rb.getLabel('pageFormat')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elPageFormat = $(`<select id=\"rbro_document_properties_page_format\">\n                <option value=\"A4\">${this.rb.getLabel('pageFormatA4')}</option>\n                <option value=\"A5\">${this.rb.getLabel('pageFormatA5')}</option>\n                <option value=\"letter\">${this.rb.getLabel('pageFormatLetter')}</option>\n                <option value=\"user_defined\">${this.rb.getLabel('pageFormatUserDefined')}</option>\n            </select>`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_format', 'pageFormat',\n                    elPageFormat.val(), SetValueCmd.type.select, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFormField.append(elPageFormat);\n\n        let elPageSizeDiv = $('<div id=\"rbro_document_properties_page_size_row\" class=\"rbroTripleSplit\"></div>');\n        let elPageWidth = $('<input id=\"rbro_document_properties_page_width\" maxlength=\"5\">')\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_width', 'pageWidth',\n                    elPageWidth.val(), SetValueCmd.type.select, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elPageWidth);\n        elPageSizeDiv.append(elPageWidth);\n        let elPageHeight = $('<input id=\"rbro_document_properties_page_height\" maxlength=\"5\">')\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_height', 'pageHeight',\n                    elPageHeight.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elPageHeight);\n        elPageSizeDiv.append(elPageHeight);\n        let elUnit = $(`<select id=\"rbro_document_properties_unit\">\n            <option value=\"mm\">mm</option>\n            <option value=\"inch\">inch</option>\n        </select>`)\n        .change(event => {\n            let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_unit', 'unit',\n                elUnit.val(), SetValueCmd.type.select, this.rb);\n            this.rb.executeCommand(cmd);\n        });\n        elPageSizeDiv.append(elUnit);\n        elFormField.append(elPageSizeDiv);\n        elFormField.append('<div id=\"rbro_document_properties_page_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        if (this.documentProperties.getValue('pageFormat') !== DocumentProperties.pageFormat.userDefined) {\n            elPageSizeDiv.hide();\n        }\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_orientation\">${this.rb.getLabel('orientation')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elOrientation = $(`<select id=\"rbro_document_properties_orientation\">\n                <option value=\"portrait\">${this.rb.getLabel('orientationPortrait')}</option>\n                <option value=\"landscape\">${this.rb.getLabel('orientationLandscape')}</option>\n            </select>`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_orientation', 'orientation',\n                    elOrientation.val(), SetValueCmd.type.select, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFormField.append(elOrientation);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_content_height\">${this.rb.getLabel('contentHeight')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elContentHeight = $('<input id=\"rbro_document_properties_content_height\">')\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_content_height', 'contentHeight',\n                    elContentHeight.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elContentHeight);\n        elFormField.append(elContentHeight);\n        elFormField.append(`<div class=\"rbroInfo\">${this.rb.getLabel('contentHeightInfo')}</div>`);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        this.renderMarginControls(panel);\n        this.renderHeaderFooter(panel);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_pattern_locale\">${this.rb.getLabel('patternLocale')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elPatternLocale = $(`<select id=\"rbro_document_properties_pattern_locale\">\n                <option value=\"de\">de</option>\n                <option value=\"en\">en</option>\n                <option value=\"es\">es</option>\n                <option value=\"fr\">fr</option>\n                <option value=\"it\">it</option>\n            </select>`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_pattern_locale', 'patternLocale',\n                    elPatternLocale.val(), SetValueCmd.type.select, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFormField.append(elPatternLocale);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_pattern_currency_symbol\">${this.rb.getLabel('patternCurrencySymbol')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elPatternCurrencySymbol = $('<input id=\"rbro_document_properties_pattern_currency_symbol\">')\n            .change(event => {\n                let cmd = new SetValueCmd(this.rb.getDetailData().getId(),\n                    'rbro_document_properties_pattern_currency_symbol', 'patternCurrencySymbol',\n                    elPatternCurrencySymbol.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFormField.append(elPatternCurrencySymbol);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        $('#rbro_detail_panel').append(panel);\n\n        this.updateData(this.documentProperties);\n    }\n\n    renderMarginControls(panel) {\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_page_margin_top\">${this.rb.getLabel('pageMargins')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSmallInput\"></div>');\n        \n        let elMarginTopDiv = $('<div class=\"rbroColumnCenter\"></div>');\n        let elMarginTop = $(`<input id=\"rbro_document_properties_page_margin_top\" placeholder=\"${this.rb.getLabel('orientationTop')}\">`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_margin_top', 'marginTop',\n                    elMarginTop.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elMarginTop);\n        elMarginTopDiv.append(elMarginTop);\n        elFormField.append(elMarginTopDiv);\n\n        let elDiv2 = $('<div class=\"rbroSplit\"></div>');\n        let elMarginLeft = $(`<input id=\"rbro_document_properties_page_margin_left\" placeholder=\"${this.rb.getLabel('orientationLeft')}\">`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_margin_left', 'marginLeft',\n                    elMarginLeft.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elMarginLeft);\n        elDiv2.append(elMarginLeft);\n        let elMarginRight = $(`<input id=\"rbro_document_properties_page_margin_right\" placeholder=\"${this.rb.getLabel('orientationRight')}\">`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_margin_right', 'marginRight',\n                    elMarginRight.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elMarginRight);\n        elDiv2.append(elMarginRight);\n        elFormField.append(elDiv2);\n\n        let elMarginBottomDiv = $('<div class=\"rbroColumnCenter\"></div>');\n        let elMarginBottom = $(`<input id=\"rbro_document_properties_page_margin_bottom\" placeholder=\"${this.rb.getLabel('orientationBottom')}\">`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_page_margin_bottom', 'marginBottom',\n                    elMarginBottom.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elMarginBottom);\n        elMarginBottomDiv.append(elMarginBottom);\n        elFormField.append(elMarginBottomDiv);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n    }\n\n    renderHeaderFooter(panel) {\n        let elHeaderDiv = $('<div class=\"rbroFormRowContainer\"></div>');\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_header\">${this.rb.getLabel('header')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeaderLabel = $(`<label class=\"switch-light switch-material\"></label>`);\n        let elHeader = $(`<input id=\"rbro_document_properties_header\" type=\"checkbox\">`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_header', 'header',\n                    elHeader.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elHeaderLabel.append(elHeader);\n        let elHeaderSpan = $('<span></span>');\n        elHeaderSpan.append($('<span></span>'));\n        elHeaderSpan.append($('<span></span>'));\n        elHeaderSpan.append($('<a></a>'));\n        elHeaderLabel.append(elHeaderSpan);\n        elFormField.append(elHeaderLabel);\n        elDiv.append(elFormField);\n        elHeaderDiv.append(elDiv);\n        let elHeaderSettings = $('<div id=\"rbro_document_properties_header_settings\"></div>');\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_header_size\">${this.rb.getLabel('headerSize')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeaderSize = $('<input id=\"rbro_document_properties_header_size\">')\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_header_size', 'headerSize',\n                    elHeaderSize.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elHeaderSize);\n        elFormField.append(elHeaderSize);\n        elDiv.append(elFormField);\n        elHeaderSettings.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_header_display\">${this.rb.getLabel('headerDisplay')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeaderDisplay = $(`<select id=\"rbro_document_properties_header_display\">\n                <option value=\"always\">${this.rb.getLabel('headerFooterDisplayAlways')}</option>\n                <option value=\"not_on_first_page\">${this.rb.getLabel('headerFooterDisplayNotOnFirstPage')}</option>\n            </select>`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_header_display', 'headerDisplay',\n                    elHeaderDisplay.val(), SetValueCmd.type.select, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFormField.append(elHeaderDisplay);\n        elDiv.append(elFormField);\n        elHeaderSettings.append(elDiv);\n        elHeaderDiv.append(elHeaderSettings);\n        panel.append(elHeaderDiv);\n\n        let elFooterDiv = $('<div class=\"rbroFormRowContainer\"></div>');\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_footer\">${this.rb.getLabel('footer')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elFooterLabel = $(`<label class=\"switch-light switch-material\"></label>`);\n        let elFooter = $(`<input id=\"rbro_document_properties_footer\" type=\"checkbox\">`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_footer', 'footer',\n                    elFooter.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFooterLabel.append(elFooter);\n        let elFooterSpan = $('<span></span>');\n        elFooterSpan.append($('<span></span>'));\n        elFooterSpan.append($('<span></span>'));\n        elFooterSpan.append($('<a></a>'));\n        elFooterLabel.append(elFooterSpan);\n        elFormField.append(elFooterLabel);\n        elDiv.append(elFormField);\n        elFooterDiv.append(elDiv);\n        let elFooterSettings = $('<div id=\"rbro_document_properties_footer_settings\"></div>');\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_footer_size\">${this.rb.getLabel('footerSize')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elFooterSize = $('<input id=\"rbro_document_properties_footer_size\">')\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_footer_size', 'footerSize',\n                    elFooterSize.val(), SetValueCmd.type.text, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        utils.setInputPositiveInteger(elFooterSize);\n        elFormField.append(elFooterSize);\n        elDiv.append(elFormField);\n        elFooterSettings.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_document_properties_footer_display\">${this.rb.getLabel('footerDisplay')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elFooterDisplay = $(`<select id=\"rbro_document_properties_footer_display\">\n                <option value=\"always\">${this.rb.getLabel('headerFooterDisplayAlways')}</option>\n                <option value=\"not_on_first_page\">${this.rb.getLabel('headerFooterDisplayNotOnFirstPage')}</option>\n            </select>`)\n            .change(event => {\n                let cmd = new SetValueCmd(this.documentProperties.getId(), 'rbro_document_properties_footer_display', 'footerDisplay',\n                    elFooterDisplay.val(), SetValueCmd.type.select, this.rb);\n                this.rb.executeCommand(cmd);\n            });\n        elFormField.append(elFooterDisplay);\n        elDiv.append(elFormField);\n        elFooterSettings.append(elDiv);\n        elFooterDiv.append(elFooterSettings);\n        panel.append(elFooterDiv);\n    }\n\n    show(data) {\n        $('#rbro_document_properties_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_document_properties_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {DocumentProperties} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_document_properties_page_format').val(data.getValue('pageFormat'));\n            $('#rbro_document_properties_page_width').val(data.getValue('pageWidth'));\n            $('#rbro_document_properties_page_height').val(data.getValue('pageHeight'));\n            $('#rbro_document_properties_unit').val(data.getValue('unit'));\n            $('#rbro_document_properties_orientation').val(data.getValue('orientation'));\n            $('#rbro_document_properties_content_height').val(data.getValue('contentHeight'));\n            $('#rbro_document_properties_page_margin_top').val(data.getValue('marginTop'));\n            $('#rbro_document_properties_page_margin_left').val(data.getValue('marginLeft'));\n            $('#rbro_document_properties_page_margin_right').val(data.getValue('marginRight'));\n            $('#rbro_document_properties_page_margin_bottom').val(data.getValue('marginBottom'));\n            $('#rbro_document_properties_header').prop('checked', data.getValue('header'));\n            $('#rbro_document_properties_header_size').val(data.getValue('headerSize'));\n            $('#rbro_document_properties_header_display').val(data.getValue('headerDisplay'));\n            $('#rbro_document_properties_footer').prop('checked', data.getValue('footer'));\n            $('#rbro_document_properties_footer_size').val(data.getValue('footerSize'));\n            $('#rbro_document_properties_footer_display').val(data.getValue('footerDisplay'));\n            $('#rbro_document_properties_pattern_locale').val(data.getValue('patternLocale'));\n            $('#rbro_document_properties_pattern_currency_symbol').val(data.getValue('patternCurrencySymbol'));\n            this.updateVisibility(data);\n        }\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n        if (obj instanceof DocumentProperties && obj === this.rb.getDetailData() && operation === Command.operation.change) {\n            this.updateVisibility(obj);\n        }\n    }\n\n    updateVisibility(obj) {\n        if (obj.getValue('pageFormat') === DocumentProperties.pageFormat.userDefined) {\n            $('#rbro_document_properties_page_size_row').show();\n        } else {\n            $('#rbro_document_properties_page_size_row').hide();\n        }\n        if (obj.getValue('header')) {\n            $('#rbro_document_properties_header_settings').show();\n        } else {\n            $('#rbro_document_properties_header_settings').hide();\n        }\n        if (obj.getValue('footer')) {\n            $('#rbro_document_properties_footer_settings').show();\n        } else {\n            $('#rbro_document_properties_footer_settings').hide();\n        }\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_document_properties_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_document_properties_panel .rbroErrorMessage').text('');\n        for (let error of this.documentProperties.getErrors()) {\n            let rowId = 'rbro_document_properties_' + error.field + '_row';\n            let errorId = 'rbro_document_properties_' + error.field + '_error';\n            let errorMsg = this.rb.getLabel(error.msg_key);\n            if (error.info) {\n                errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n            }\n            $('#' + rowId).addClass('rbroError');\n            $('#' + errorId).html(errorMsg);\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/DocumentPropertiesPanel.js\n// module id = 38\n// module chunks = 0","/**\n * Empty panel which is shown when no data object is selected.\n * @class\n */\nexport default class EmptyDetailPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n    }\n\n    render() {\n        let panel = $('#rbro_detail_panel');\n        $('#rbro_detail_panel').append(`<div id=\"rbro_empty_detail_panel\" class=\"rbroEmptyDetailPanel rbroHidden\">\n                <div class=\"rbroLogo\"></div>\n            </div>`);\n    }\n\n    show(data) {\n        $('#rbro_empty_detail_panel').removeClass('rbroHidden');\n    }\n\n    hide() {\n        $('#rbro_empty_detail_panel').addClass('rbroHidden');\n    }\n\n    notifyEvent(obj, operation) {\n    }\n\n    updateErrors() {\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/EmptyDetailPanel.js\n// module id = 39\n// module chunks = 0","import SetValueCmd from '../commands/SetValueCmd';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all frame properties.\n * @class\n */\nexport default class FrameElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_frame_element_panel\" class=\"rbroHidden\"></div>');\n\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_label\">${this.rb.getLabel('docElementLabel')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elLabel = $(`<input id=\"rbro_frame_element_label\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(this.getSelectedObjId(), 'rbro_frame_element_label',\n                        'label', elLabel.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elLabel);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div id=\"rbro_frame_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_position_x\">${this.rb.getLabel('docElementPosition')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elPosX = $(`<input id=\"rbro_frame_element_position_x\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('x') !== elPosX.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_position_x', 'x',\n                        elPosX.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosX);\n        elFormField.append(elPosX);\n        let elPosY = $(`<input id=\"rbro_frame_element_position_y\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('y') !== elPosY.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_frame_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_frame_element_size_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_width\">${this.rb.getLabel('docElementSize')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elWidth = $(`<input id=\"rbro_frame_element_width\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('width') !== elWidth.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_width', 'width',\n                        elWidth.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elWidth);\n        elFormField.append(elWidth);\n        let elHeight = $(`<input id=\"rbro_frame_element_height\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('height') !== elHeight.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_height', 'height',\n                        elHeight.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elFormField.append('<div id=\"rbro_frame_element_size_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_background_color\">${this.rb.getLabel('styleBackgroundColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBgColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elBgColor = $('<input id=\"rbro_frame_element_background_color\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_background_color',\n                        'backgroundColor', elBgColor.val(), SetValueCmd.type.color, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBgColorContainer.append(elBgColor);\n        elFormField.append(elBgColorContainer);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        utils.initColorPicker(elBgColor, this.rb, { allowEmpty: true });\n\n        let elBorderDiv = $(`<div id=\"rbro_frame_element_border_div\"></div>`);\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label>${this.rb.getLabel('styleBorder')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBorderStyle = $('<div id=\"rbro_frame_element_border\"></div>');\n        let elBorderAll = $(`<button id=\"rbro_frame_element_border_all\"\n                class=\"rbroButton rbroActionButton rbroIcon-border-all\"\n                type=\"button\" value=\"borderAll\"\n                title=\"${this.rb.getLabel('styleBorderAll')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_border_all',\n                        'borderAll', !elBorderAll.hasClass('rbroButtonActive'),\n                        SetValueCmd.type.button, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderStyle.append(elBorderAll);\n        let elBorderLeft = $(`<button id=\"rbro_frame_element_border_left\"\n                class=\"rbroButton rbroActionButton rbroIcon-border-left\"\n                type=\"button\" value=\"borderLeft\"\n                title=\"${this.rb.getLabel('orientationLeft')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_border_left',\n                        'borderLeft', !elBorderLeft.hasClass('rbroButtonActive'),\n                        SetValueCmd.type.button, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderStyle.append(elBorderLeft);\n        let elBorderTop = $(`<button id=\"rbro_frame_element_border_top\"\n                class=\"rbroButton rbroActionButton rbroIcon-border-top\"\n                type=\"button\" value=\"borderTop\"\n                title=\"${this.rb.getLabel('orientationTop')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_border_top',\n                        'borderTop', !elBorderTop.hasClass('rbroButtonActive'),\n                        SetValueCmd.type.button, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderStyle.append(elBorderTop);\n        let elBorderRight = $(`<button id=\"rbro_frame_element_border_right\"\n                class=\"rbroButton rbroActionButton rbroIcon-border-right\"\n                type=\"button\" value=\"borderRight\"\n                title=\"${this.rb.getLabel('orientationRight')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_border_right',\n                        'borderRight', !elBorderRight.hasClass('rbroButtonActive'),\n                        SetValueCmd.type.button, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderStyle.append(elBorderRight);\n        let elBorderBottom = $(`<button id=\"rbro_frame_element_border_bottom\"\n                class=\"rbroButton rbroActionButton rbroIcon-border-bottom\"\n                type=\"button\" value=\"borderBottom\"\n                title=\"${this.rb.getLabel('orientationBottom')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_border_bottom',\n                        'borderBottom', !elBorderBottom.hasClass('rbroButtonActive'),\n                        SetValueCmd.type.button, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderStyle.append(elBorderBottom);\n        elFormField.append(elBorderStyle);\n        elDiv.append(elFormField);\n        elBorderDiv.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_border_color\">${this.rb.getLabel('styleBorderColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBorderColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elBorderColor = $('<input id=\"rbro_frame_element_border_color\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_border_color',\n                        'borderColor', elBorderColor.val(), SetValueCmd.type.color, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderColorContainer.append(elBorderColor);\n        elFormField.append(elBorderColorContainer);\n        elDiv.append(elFormField);\n        elBorderDiv.append(elDiv);\n        utils.initColorPicker(elBorderColor, this.rb);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_border_width\">${this.rb.getLabel('styleBorderWidth')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBorderWidth = $(`<input id=\"rbro_frame_element_border_width\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(this.getSelectedObjId(), 'rbro_frame_element_border_width',\n                        'borderWidth', elBorderWidth.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elBorderWidth);\n        elDiv.append(elFormField);\n        elBorderDiv.append(elDiv);\n        utils.setInputDecimal(elBorderWidth);\n        panel.append(elBorderDiv);\n\n        let elPrintHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elPrintHeaderIcon = $('<span id=\"rbro_frame_element_print_header_icon\" class=\"rbroIcon-plus\"></span>');\n        elDiv = $('<div id=\"rbro_frame_element_print_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    $('#rbro_frame_element_print_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_frame_element_print_section').toggleClass('rbroHidden');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-plus');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elPrintHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop(elPrintHeader.position().top);\n                    }\n                    autosize.update($('#rbro_frame_element_print_if'));\n                });\n        elPrintHeader.append(elPrintHeaderIcon);\n        elPrintHeader.append(`<span>${this.rb.getLabel('docElementPrintSettings')}</span>`);\n        elDiv.append(elPrintHeader);\n        panel.append(elDiv);\n        \n        let elPrintSectionDiv = $('<div id=\"rbro_frame_element_print_section\" class=\"rbroHidden\"></div>');\n        elDiv = $('<div id=\"rbro_frame_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_frame_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_frame_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_frame_element_print_if', 'printIf', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_frame_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_remove_empty_element\">${this.rb.getLabel('docElementRemoveEmptyElement')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elRemoveEmptyElement = $(`<input id=\"rbro_frame_element_remove_empty_element\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_frame_element_remove_empty_element', 'removeEmptyElement',\n                        elRemoveEmptyElement.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elRemoveEmptyElement);\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_frame_element_shrink_to_content_height\">${this.rb.getLabel('frameElementShrinkToContentHeight')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elShrinkToContentHeight = $(`<input id=\"rbro_frame_element_shrink_to_content_height\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_frame_element_shrink_to_content_height', 'shrinkToContentHeight',\n                        elShrinkToContentHeight.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elShrinkToContentHeight);\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n        \n        if (this.rb.getProperty('enableSpreadsheet')) {\n            let elSpreadsheetHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n            let elSpreadsheetHeaderIcon = $('<span id=\"rbro_frame_element_spreadsheet_header_icon\" class=\"rbroIcon-plus\"></span>');\n            elDiv = $('<div id=\"rbro_frame_element_spreadsheet_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        $('#rbro_frame_element_spreadsheet_header').toggleClass('rbroPanelSectionHeaderOpen');\n                        $('#rbro_frame_element_spreadsheet_section').toggleClass('rbroHidden');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-plus');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-minus');\n                        if (elSpreadsheetHeaderIcon.hasClass('rbroIcon-minus')) {\n                            $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elSpreadsheetHeader.position().top);\n                        }\n                    }\n                });\n            elSpreadsheetHeader.append(elSpreadsheetHeaderIcon);\n            elSpreadsheetHeader.append(`<span>${this.rb.getLabel('docElementSpreadsheet')}</span>`);\n            elDiv.append(elSpreadsheetHeader);\n            panel.append(elDiv);\n\n            let elSpreadsheetSectionDiv = $('<div id=\"rbro_frame_element_spreadsheet_section\" class=\"rbroHidden\"></div>');\n            elDiv = $('<div id=\"rbro_frame_element_spreadsheet_hide_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_frame_element_spreadsheet_hide\">${this.rb.getLabel('docElementSpreadsheetHide')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetHide = $(`<input id=\"rbro_frame_element_spreadsheet_hide\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_frame_element_spreadsheet_hide', 'spreadsheet_hide',\n                            elSpreadsheetHide.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetHide);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_frame_element_spreadsheet_column_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_frame_element_spreadsheet_column\">${this.rb.getLabel('docElementSpreadsheetColumn')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColumn = $(`<input id=\"rbro_frame_element_spreadsheet_column\">`)\n                .on('input', event => {\n                    let obj = this.rb.getDataObject(this.selectedObjId);\n                    if (obj !== null && obj.getValue('spreadsheet_column') !== elSpreadsheetColumn.val()) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_frame_element_spreadsheet_column', 'spreadsheet_column',\n                            elSpreadsheetColumn.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColumn);\n            elFormField.append(elSpreadsheetColumn);\n            elFormField.append('<div id=\"rbro_frame_element_spreadsheet_column_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_frame_element_spreadsheet_add_empty_row_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_frame_element_spreadsheet_add_empty_row\">${this.rb.getLabel('docElementSpreadsheetAddEmptyRow')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetAddEmptyRow = $(`<input id=\"rbro_frame_element_spreadsheet_add_empty_row\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_frame_element_spreadsheet_add_empty_row', 'spreadsheet_addEmptyRow',\n                            elSpreadsheetAddEmptyRow.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetAddEmptyRow);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n            panel.append(elSpreadsheetSectionDiv);\n        }\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_frame_element_print_if'));\n    }\n\n    show(data) {\n        $('#rbro_frame_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n        this.updateAutosizeInputs();\n    }\n\n    hide() {\n        $('#rbro_frame_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {LineElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_frame_element_label').prop('disabled', false);\n            $('#rbro_frame_element_position_x').prop('disabled', false);\n            $('#rbro_frame_element_position_y').prop('disabled', false);\n            $('#rbro_frame_element_width').prop('disabled', false);\n            $('#rbro_frame_element_height').prop('disabled', false);\n            $('#rbro_frame_element_background_color').spectrum('enable');\n            $('#rbro_frame_element_border_all').prop('disabled', false);\n            $('#rbro_frame_element_border_left').prop('disabled', false);\n            $('#rbro_frame_element_border_top').prop('disabled', false);\n            $('#rbro_frame_element_border_right').prop('disabled', false);\n            $('#rbro_frame_element_border_bottom').prop('disabled', false);\n            $('#rbro_frame_element_border_color').spectrum('enable');\n            $('#rbro_frame_element_border_width').prop('disabled', false);\n            $('#rbro_frame_element_print_if').prop('disabled', false);\n            $('#rbro_frame_element_remove_empty_element').prop('disabled', false);\n            $('#rbro_frame_element_shrink_to_content_height').prop('disabled', false);\n            $('#rbro_frame_element_spreadsheet_hide').prop('disabled', false);\n            $('#rbro_frame_element_spreadsheet_column').prop('disabled', false);\n            $('#rbro_frame_element_spreadsheet_add_empty_row').prop('disabled', false);\n            \n            $('#rbro_frame_element_label').val(data.getValue('label'));\n            $('#rbro_frame_element_position_x').val(data.getValue('x'));\n            $('#rbro_frame_element_position_y').val(data.getValue('y'));\n            $('#rbro_frame_element_width').val(data.getValue('width'));\n            $('#rbro_frame_element_height').val(data.getValue('height'));\n            $('#rbro_frame_element_background_color').spectrum(\"set\", data.getValue('backgroundColor'));\n            if (data.getValue('borderAll')) {\n                $('#rbro_frame_element_border_all').addClass('rbroButtonActive');\n            } else {\n                $('#rbro_frame_element_border_all').removeClass('rbroButtonActive');\n            }\n            if (data.getValue('borderLeft')) {\n                $('#rbro_frame_element_border_left').addClass('rbroButtonActive');\n            } else {\n                $('#rbro_frame_element_border_left').removeClass('rbroButtonActive');\n            }\n            if (data.getValue('borderTop')) {\n                $('#rbro_frame_element_border_top').addClass('rbroButtonActive');\n            } else {\n                $('#rbro_frame_element_border_top').removeClass('rbroButtonActive');\n            }\n            if (data.getValue('borderRight')) {\n                $('#rbro_frame_element_border_right').addClass('rbroButtonActive');\n            } else {\n                $('#rbro_frame_element_border_right').removeClass('rbroButtonActive');\n            }\n            if (data.getValue('borderBottom')) {\n                $('#rbro_frame_element_border_bottom').addClass('rbroButtonActive');\n            } else {\n                $('#rbro_frame_element_border_bottom').removeClass('rbroButtonActive');\n            }\n            $('#rbro_frame_element_border_color').spectrum(\"set\", data.getValue('borderColor'));\n            $('#rbro_frame_element_border_width').val(data.getValue('borderWidth'));\n            $('#rbro_frame_element_print_if').val(data.getValue('printIf'));\n            $('#rbro_frame_element_remove_empty_element').prop('checked', data.getValue('removeEmptyElement'));\n            $('#rbro_frame_element_shrink_to_content_height').prop('checked', data.getValue('shrinkToContentHeight'));\n            $('#rbro_frame_element_spreadsheet_hide').prop('checked', data.getValue('spreadsheet_hide'));\n            $('#rbro_frame_element_spreadsheet_column').val(data.getValue('spreadsheet_column'));\n            $('#rbro_frame_element_spreadsheet_add_empty_row').prop('checked', data.getValue('spreadsheet_addEmptyRow'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_frame_element_label').prop('disabled', true);\n            $('#rbro_frame_element_position_x').prop('disabled', true);\n            $('#rbro_frame_element_position_y').prop('disabled', true);\n            $('#rbro_frame_element_width').prop('disabled', true);\n            $('#rbro_frame_element_height').prop('disabled', true);\n            $('#rbro_frame_element_background_color').spectrum('disable');\n            $('#rbro_frame_element_border_all').prop('disabled', true);\n            $('#rbro_frame_element_border_left').prop('disabled', true);\n            $('#rbro_frame_element_border_top').prop('disabled', true);\n            $('#rbro_frame_element_border_right').prop('disabled', true);\n            $('#rbro_frame_element_border_bottom').prop('disabled', true);\n            $('#rbro_frame_element_border_color').spectrum('disable');\n            $('#rbro_frame_element_border_width').prop('disabled', true);\n            $('#rbro_frame_element_print_if').prop('disabled', true);\n            $('#rbro_frame_element_remove_empty_element').prop('disabled', true);\n            $('#rbro_frame_element_shrink_to_content_height').prop('disabled', true);\n            $('#rbro_frame_element_spreadsheet_hide').prop('disabled', true);\n            $('#rbro_frame_element_spreadsheet_column').prop('disabled', true);\n            $('#rbro_frame_element_spreadsheet_add_empty_row').prop('disabled', true);\n        }\n\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_frame_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_frame_element_panel .rbroPanelSection').removeClass('rbroError');\n        $('#rbro_frame_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_frame_element_' + error.field + '_row';\n                let errorId = 'rbro_frame_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n                if (error.field === 'print_if') {\n                    $('#rbro_frame_element_print_header').addClass('rbroError');\n                    if (!$('#rbro_frame_element_print_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_frame_element_print_header').trigger('click');\n                    }\n                } else if (error.field === 'spreadsheet_column') {\n                    $('#rbro_frame_element_spreadsheet_header').addClass('rbroError');\n                    if (!$('#rbro_frame_element_spreadsheet_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_frame_element_spreadsheet_header').trigger('click');\n                    }\n                }\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/FrameElementPanel.js\n// module id = 40\n// module chunks = 0","import StylePanel from './StylePanel';\nimport CommandGroupCmd from '../commands/CommandGroupCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Parameter from '../data/Parameter';\nimport DocElement from '../elements/DocElement';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all image properties.\n * @class\n */\nexport default class ImageElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_image_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_image_element_source_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_image_element_source\">${this.rb.getLabel('imageElementSource')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elSource = $(`<textarea id=\"rbro_image_element_source\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_source', 'source',\n                        elSource.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elSource);\n        elFormField.append(elSource);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj,\n                        [Parameter.type.image, Parameter.type.string]), this.selectedObjId,\n                        'rbro_image_element_source', 'source', PopupWindow.type.parameterSet);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_image_element_source_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_image_element_image_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_image_element_image\">${this.rb.getLabel('imageElementImage')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elImage = $('<input id=\"rbro_image_element_image\" type=\"file\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let files = event.target.files;\n                    if (files && files[0]) {\n                        let fileReader = new FileReader();\n                        let rb = this.rb;\n                        let fileName = files[0].name;\n                        let objId = this.selectedObjId;\n                        fileReader.onload = function(e) {\n                            let cmdGroup = new CommandGroupCmd('Load image', this.rb);\n                            let cmd = new SetValueCmd(objId, 'rbro_image_element_image', 'image',\n                                e.target.result, SetValueCmd.type.file, rb);\n                            cmdGroup.addCommand(cmd);\n                            cmd = new SetValueCmd(objId, 'rbro_image_element_image_filename', 'imageFilename',\n                                fileName, SetValueCmd.type.filename, rb);\n                            cmdGroup.addCommand(cmd);\n                            rb.executeCommand(cmdGroup);\n                        };\n                        fileReader.onerror = function(e) {\n                            alert(this.rb.getLabel('imageElementLoadErrorMsg'));\n                        };\n                        fileReader.readAsDataURL(files[0]);\n                    }\n                }\n            });\n        elFormField.append(elImage);\n        let elFilenameDiv = $('<div class=\"rbroSplit rbroHidden\" id=\"rbro_image_element_image_filename_container\"></div>');\n        elFilenameDiv.append($('<div id=\"rbro_image_element_image_filename\"></div>'));\n        elFilenameDiv.append($('<div id=\"rbro_image_element_image_filename_clear\" class=\"rbroIcon-cancel rbroButton rbroDeleteButton rbroRoundButton\"></div>')\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    elImage.val('');\n                    let cmdGroup = new CommandGroupCmd('Clear image', this.rb);\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_image', 'image',\n                        '', SetValueCmd.type.file, this.rb);\n                    cmdGroup.addCommand(cmd);\n                    cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_image_filename', 'imageFilename',\n                        '', SetValueCmd.type.filename, this.rb);\n                    cmdGroup.addCommand(cmd);\n                    this.rb.executeCommand(cmdGroup);\n                }\n            })\n        );\n        elFormField.append(elFilenameDiv);\n        elFormField.append('<div id=\"rbro_image_element_image_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_image_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_image_element_position\">${this.rb.getLabel('docElementPosition')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elPosX = $(`<input id=\"rbro_image_element_position_x\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let val = utils.checkInputDecimal(elPosX.val(), 0, 1000);\n                    if (val !== elPosX.val()) {\n                        elPosX.val(val);\n                    }\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_position_x', 'x',\n                        val, SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosX);\n        elFormField.append(elPosX);\n        let elPosY = $(`<input id=\"rbro_image_element_position_y\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let val = utils.checkInputDecimal(elPosY.val(), 0, 1000);\n                    if (val !== elPosY.val()) {\n                        elPosY.val(val);\n                    }\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_position_y', 'y',\n                        val, SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_image_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_image_element_size_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_image_element_size\">${this.rb.getLabel('docElementSize')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elWidth = $(`<input id=\"rbro_image_element_width\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let val = utils.checkInputDecimal(elWidth.val(), 10, 1000);\n                    if (val !== elWidth.val()) {\n                        elWidth.val(val);\n                    }\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_width', 'width',\n                        val, SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elWidth);\n        elFormField.append(elWidth);\n        let elHeight = $(`<input id=\"rbro_image_element_height\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let val = utils.checkInputDecimal(elHeight.val(), 10, 1000);\n                    if (val !== elHeight.val()) {\n                        elHeight.val(val);\n                    }\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_height', 'height',\n                        val, SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elFormField.append('<div id=\"rbro_image_element_size_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        let elStyleHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elStyleHeaderIcon = $('<div id=\"rbro_image_element_style_header_icon\" class=\"rbroPanelSectionHeaderOpen rbroIcon-minus\"></div>');\n        elDiv = $('<div id=\"rbro_image_element_style_header\" class=\"rbroFormRow rbroPanelSection rbroPanelSectionHeaderOpen\"></div>')\n                .click(event => {\n                    $('#rbro_image_element_style_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_image_element_style_section').toggleClass('rbroHidden');\n                    elStyleHeaderIcon.toggleClass('rbroIcon-plus');\n                    elStyleHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elStyleHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop(elStyleHeader.position().top);\n                    }\n                });\n        elStyleHeader.append(elStyleHeaderIcon);\n        elStyleHeader.append(`<span>${this.rb.getLabel('docElementStyle')}</span>`);\n        elDiv.append(elStyleHeader);\n        panel.append(elDiv);\n\n        let elStyleSectionDiv = $('<div id=\"rbro_image_element_style_section\"></div>');\n        StylePanel.renderStyle(elStyleSectionDiv, 'image_element_', '', DocElement.type.image, this, this.rb);\n        panel.append(elStyleSectionDiv);\n\n        let elPrintHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elPrintHeaderIcon = $('<span id=\"rbro_image_element_print_header_icon\" class=\"rbroIcon-plus\"></span>');\n        elDiv = $('<div id=\"rbro_image_element_print_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    $('#rbro_image_element_print_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_image_element_print_section').toggleClass('rbroHidden');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-plus');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elPrintHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop(elPrintHeader.position().top);\n                    }\n                    autosize.update($('#rbro_image_element_print_if'));\n                });\n        elPrintHeader.append(elPrintHeaderIcon);\n        elPrintHeader.append(`<span>${this.rb.getLabel('docElementPrintSettings')}</span>`);\n        elDiv.append(elPrintHeader);\n        panel.append(elDiv);\n\n        let elPrintSectionDiv = $('<div id=\"rbro_image_element_print_section\" class=\"rbroHidden\"></div>');\n        elDiv = $('<div id=\"rbro_image_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_image_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_image_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_image_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_image_element_print_if', 'printIf', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_image_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_image_element_remove_empty_element\">${this.rb.getLabel('docElementRemoveEmptyElement')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elRemoveEmptyElement = $(`<input id=\"rbro_image_element_remove_empty_element\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_image_element_remove_empty_element', 'removeEmptyElement',\n                        elRemoveEmptyElement.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elRemoveEmptyElement);\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n\n        if (this.rb.getProperty('enableSpreadsheet')) {\n            let elSpreadsheetHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n            let elSpreadsheetHeaderIcon = $('<span id=\"rbro_image_element_spreadsheet_header_icon\" class=\"rbroIcon-plus\"></span>');\n            elDiv = $('<div id=\"rbro_image_element_spreadsheet_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        $('#rbro_image_element_spreadsheet_header').toggleClass('rbroPanelSectionHeaderOpen');\n                        $('#rbro_image_element_spreadsheet_section').toggleClass('rbroHidden');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-plus');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-minus');\n                        if (elSpreadsheetHeaderIcon.hasClass('rbroIcon-minus')) {\n                            $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elSpreadsheetHeader.position().top);\n                        }\n                    }\n                });\n            elSpreadsheetHeader.append(elSpreadsheetHeaderIcon);\n            elSpreadsheetHeader.append(`<span>${this.rb.getLabel('docElementSpreadsheet')}</span>`);\n            elDiv.append(elSpreadsheetHeader);\n            panel.append(elDiv);\n\n            let elSpreadsheetSectionDiv = $('<div id=\"rbro_image_element_spreadsheet_section\" class=\"rbroHidden\"></div>');\n            elDiv = $('<div id=\"rbro_image_element_spreadsheet_hide_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_image_element_spreadsheet_hide\">${this.rb.getLabel('docElementSpreadsheetHide')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetHide = $(`<input id=\"rbro_image_element_spreadsheet_hide\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_image_element_spreadsheet_hide', 'spreadsheet_hide',\n                            elSpreadsheetHide.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetHide);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_image_element_spreadsheet_column_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_image_element_spreadsheet_column\">${this.rb.getLabel('docElementSpreadsheetColumn')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColumn = $(`<input id=\"rbro_image_element_spreadsheet_column\">`)\n                .on('input', event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_image_element_spreadsheet_column', 'spreadsheet_column',\n                            elSpreadsheetColumn.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColumn);\n            elFormField.append(elSpreadsheetColumn);\n            elFormField.append('<div id=\"rbro_image_element_spreadsheet_column_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_image_element_spreadsheet_add_empty_row_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_image_element_spreadsheet_add_empty_row\">${this.rb.getLabel('docElementSpreadsheetAddEmptyRow')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetAddEmptyRow = $(`<input id=\"rbro_image_element_spreadsheet_add_empty_row\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_image_element_spreadsheet_add_empty_row', 'spreadsheet_addEmptyRow',\n                            elSpreadsheetAddEmptyRow.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetAddEmptyRow);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n            panel.append(elSpreadsheetSectionDiv);\n        }\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_image_element_source'));\n        autosize.update($('#rbro_image_element_print_if'));\n    }\n\n    show(data) {\n        $('#rbro_image_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_image_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {ImageElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_image_element_source').prop('disabled', false);\n            $('#rbro_image_element_image').prop('disabled', false);\n            $('#rbro_image_element_position_x').prop('disabled', false);\n            $('#rbro_image_element_position_y').prop('disabled', false);\n            $('#rbro_image_element_width').prop('disabled', false);\n            $('#rbro_image_element_height').prop('disabled', false);\n            $('#rbro_image_element_print_if').prop('disabled', false);\n            $('#rbro_image_element_remove_empty_element').prop('disabled', false);\n            $('#rbro_image_element_spreadsheet_hide').prop('disabled', false);\n            $('#rbro_image_element_spreadsheet_column').prop('disabled', false);\n            $('#rbro_image_element_spreadsheet_add_empty_row').prop('disabled', false);\n\n            $('#rbro_image_element_source').val(data.getValue('source'));\n            $('#rbro_image_element_image_filename').text(data.getValue('imageFilename'));\n            if (data.getValue('imageFilename') !== '') {\n                $('#rbro_image_element_image_filename_container').removeClass('rbroHidden');\n            } else {\n                $('#rbro_image_element_image_filename_container').addClass('rbroHidden');\n            }\n            $('#rbro_image_element_position_x').val(data.getValue('x'));\n            $('#rbro_image_element_position_y').val(data.getValue('y'));\n            $('#rbro_image_element_width').val(data.getValue('width'));\n            $('#rbro_image_element_height').val(data.getValue('height'));\n            $('#rbro_image_element_print_if').val(data.getValue('printIf'));\n            $('#rbro_image_element_remove_empty_element').prop('checked', data.getValue('removeEmptyElement'));\n            $('#rbro_image_element_spreadsheet_hide').prop('checked', data.getValue('spreadsheet_hide'));\n            $('#rbro_image_element_spreadsheet_column').val(data.getValue('spreadsheet_column'));\n            $('#rbro_image_element_spreadsheet_add_empty_row').prop('checked', data.getValue('spreadsheet_addEmptyRow'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_image_element_source').prop('disabled', true);\n            $('#rbro_image_element_image_filename').text('');\n            $('#rbro_image_element_image_filename_container').addClass('rbroHidden');\n            $('#rbro_image_element_image').prop('disabled', true);\n            $('#rbro_image_element_position_x').prop('disabled', true);\n            $('#rbro_image_element_position_y').prop('disabled', true);\n            $('#rbro_image_element_width').prop('disabled', true);\n            $('#rbro_image_element_height').prop('disabled', true);\n            $('#rbro_image_element_print_if').prop('disabled', true);\n            $('#rbro_image_element_remove_empty_element').prop('disabled', true);\n            $('#rbro_image_element_spreadsheet_hide').prop('disabled', true);\n            $('#rbro_image_element_spreadsheet_column').prop('disabled', true);\n            $('#rbro_image_element_spreadsheet_add_empty_row').prop('disabled', true);\n        }\n        $('#rbro_image_element_image').val('');\n        StylePanel.updateStyleData(data, 'image_element_', '', DocElement.type.image);\n\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_image_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_image_element_panel .rbroPanelSection').removeClass('rbroError');\n        $('#rbro_image_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_image_element_' + error.field + '_row';\n                let errorId = 'rbro_image_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n                if (error.field === 'print_if') {\n                    $('#rbro_image_element_print_header').addClass('rbroError');\n                    if (!$('#rbro_image_element_print_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_image_element_print_header').trigger('click');\n                    }\n                } else if (error.field === 'spreadsheet_column') {\n                    $('#rbro_image_element_spreadsheet_header').addClass('rbroError');\n                    if (!$('#rbro_image_element_spreadsheet_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_image_element_spreadsheet_header').trigger('click');\n                    }\n                }\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/ImageElementPanel.js\n// module id = 41\n// module chunks = 0","import SetValueCmd from '../commands/SetValueCmd';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all line properties.\n * @class\n */\nexport default class LineElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_line_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_line_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_line_element_position\">${this.rb.getLabel('docElementPosition')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elPosX = $(`<input id=\"rbro_line_element_position_x\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('x') !== elPosX.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_line_element_position_x', 'x',\n                        elPosX.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosX);\n        elFormField.append(elPosX);\n        let elPosY = $(`<input id=\"rbro_line_element_position_y\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('y') !== elPosY.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_line_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_line_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_line_element_size_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_line_element_size\">${this.rb.getLabel('docElementSize')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elWidth = $(`<input id=\"rbro_line_element_width\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('width') !== elWidth.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_line_element_width', 'width',\n                        elWidth.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elWidth);\n        elFormField.append(elWidth);\n        let elHeight = $(`<input id=\"rbro_line_element_height\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('height') !== elHeight.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_line_element_height', 'height',\n                        elHeight.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elFormField.append('<div id=\"rbro_line_element_size_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_line_element_color\">${this.rb.getLabel('docElementColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elColor = $('<input id=\"rbro_line_element_color\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_line_element_color',\n                        'color', elColor.val(), SetValueCmd.type.color, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elColorContainer.append(elColor);\n        elFormField.append(elColorContainer);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        utils.initColorPicker(elColor, this.rb);\n\n        elDiv = $('<div id=\"rbro_line_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_line_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_line_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('printIf') !== elPrintIf.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_line_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_line_element_print_if', 'printIf', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_line_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_line_element_print_if'));\n    }\n\n    show(data) {\n        $('#rbro_line_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n        this.updateAutosizeInputs();\n    }\n\n    hide() {\n        $('#rbro_line_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {LineElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_line_element_position_x').prop('disabled', false);\n            $('#rbro_line_element_position_y').prop('disabled', false);\n            $('#rbro_line_element_width').prop('disabled', false);\n            $('#rbro_line_element_height').prop('disabled', false);\n            $('#rbro_line_element_color').spectrum('enable');\n            $('#rbro_line_element_print_if').prop('disabled', false);\n\n            $('#rbro_line_element_position_x').val(data.getValue('x'));\n            $('#rbro_line_element_position_y').val(data.getValue('y'));\n            $('#rbro_line_element_width').val(data.getValue('width'));\n            $('#rbro_line_element_height').val(data.getValue('height'));\n            $('#rbro_line_element_color').spectrum(\"set\", data.getValue('color'));\n            $('#rbro_line_element_print_if').val(data.getValue('printIf'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_line_element_position_x').prop('disabled', true);\n            $('#rbro_line_element_position_y').prop('disabled', true);\n            $('#rbro_line_element_width').prop('disabled', true);\n            $('#rbro_line_element_height').prop('disabled', true);\n            $('#rbro_line_element_color').spectrum('disable');\n            $('#rbro_line_element_print_if').prop('disabled', true);\n        }\n\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_line_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_line_element_panel .rbroPanelSection').removeClass('rbroError');\n        $('#rbro_line_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_line_element_' + error.field + '_row';\n                let errorId = 'rbro_line_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/LineElementPanel.js\n// module id = 42\n// module chunks = 0","import SetValueCmd from '../commands/SetValueCmd';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all page break properties.\n * @class\n */\nexport default class PageBreakElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_page_break_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_page_break_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_page_break_element_position_y\">${this.rb.getLabel('docElementPositionY')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elPosY = $(`<input id=\"rbro_page_break_element_position_y\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_page_break_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    show(data) {\n        $('#rbro_page_break_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_page_break_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {PageBreakElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_page_break_element_position_y').prop('disabled', false);\n            $('#rbro_page_break_element_position_y').val(data.getValue('y'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_page_break_element_position_y').prop('disabled', true);\n        }\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_page_break_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_page_break_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/PageBreakElementPanel.js\n// module id = 43\n// module chunks = 0","import Command from '../commands/Command';\nimport CommandGroupCmd from '../commands/CommandGroupCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Parameter from '../data/Parameter';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all parameter properties.\n * @class\n */\nexport default class ParameterPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render(data) {\n        let panel = $('<div id=\"rbro_parameter_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_parameter_name_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_name\">${this.rb.getLabel('parameterName')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elParameterName = $('<input id=\"rbro_parameter_name\">')\n            .change(event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null) {\n                    if (elParameterName.val().trim() !== '') {\n                        let newParameterName = elParameterName.val();\n                        let cmdGroup = new CommandGroupCmd('Rename parameter');\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_parameter_name', 'name',\n                            newParameterName, SetValueCmd.type.text, this.rb);\n                        cmdGroup.addCommand(cmd);\n                        let parent = obj.getParent();\n                        if (parent !== null) {\n                            parent.addUpdateTestDataCmdForChangedParameter(obj.getName(), newParameterName, cmdGroup);\n                        }\n                        // add commands to convert all values containing the currently changed parameter\n                        let docElements = this.rb.getDocElements(true);\n                        for (let docElement of docElements) {\n                            docElement.addCommandsForChangedParameterName(obj, newParameterName, cmdGroup);\n                        }\n                        for (let parameter of this.rb.getParameters()) {\n                            parameter.addCommandsForChangedParameterName(obj, newParameterName, cmdGroup);\n                        }\n                        this.rb.executeCommand(cmdGroup);\n                    } else {\n                        elParameterName.val(parameter.getName());\n                    }\n                }\n            });\n        elFormField.append(elParameterName);\n        elFormField.append('<div id=\"rbro_parameter_name_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_parameter_type_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_type\">${this.rb.getLabel('parameterType')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elType = $(`<select id=\"rbro_parameter_type\">\n                <option value=\"string\">${this.rb.getLabel('parameterTypeString')}</option>\n                <option value=\"number\">${this.rb.getLabel('parameterTypeNumber')}</option>\n                <option value=\"boolean\">${this.rb.getLabel('parameterTypeBoolean')}</option>\n                <option value=\"date\">${this.rb.getLabel('parameterTypeDate')}</option>\n                <option value=\"image\">${this.rb.getLabel('parameterTypeImage')}</option>\n                <option value=\"array\">${this.rb.getLabel('parameterTypeArray')}</option>\n                <option value=\"simple_array\">${this.rb.getLabel('parameterTypeSimpleArray')}</option>\n                <option value=\"map\">${this.rb.getLabel('parameterTypeMap')}</option>\n                <option value=\"sum\">${this.rb.getLabel('parameterTypeSum')}</option>\n                <option value=\"average\">${this.rb.getLabel('parameterTypeAverage')}</option>\n            </select>`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_parameter_type',\n                        'type', elType.val(), SetValueCmd.type.select, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elType);\n        elFormField.append('<div id=\"rbro_parameter_type_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_parameter_array_item_type_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_array_item_type_row\">${this.rb.getLabel('parameterArrayItemType')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elArrayItemType = $(`<select id=\"rbro_parameter_array_item_type\">\n                <option value=\"string\">${this.rb.getLabel('parameterTypeString')}</option>\n                <option value=\"number\">${this.rb.getLabel('parameterTypeNumber')}</option>\n                <option value=\"boolean\">${this.rb.getLabel('parameterTypeBoolean')}</option>\n                <option value=\"date\">${this.rb.getLabel('parameterTypeDate')}</option>\n                <option value=\"image\">${this.rb.getLabel('parameterTypeImage')}</option>\n            </select>`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_parameter_array_item_type',\n                        'arrayItemType', elArrayItemType.val(), SetValueCmd.type.select, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elArrayItemType);\n        elFormField.append('<div id=\"rbro_parameter_array_item_type_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        if (this.rb.getProperty('adminMode')) {\n            elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_parameter_eval_row\"></div>');\n            elDiv.append(`<label for=\"rbro_parameter_eval\">${this.rb.getLabel('parameterEval')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elEval = $('<input id=\"rbro_parameter_eval\" type=\"checkbox\">')\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_parameter_eval', 'eval',\n                            elEval.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elEval);\n            elDiv.append(elFormField);\n            panel.append(elDiv);\n        }\n\n        elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_parameter_nullable_row\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_nullable\">${this.rb.getLabel('parameterNullable')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elNullable = $('<input id=\"rbro_parameter_nullable\" type=\"checkbox\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_parameter_nullable', 'nullable',\n                        elNullable.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elNullable);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_parameter_pattern_row\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_pattern\">${this.rb.getLabel('parameterPattern')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPattern = $('<input id=\"rbro_parameter_pattern\">')\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_parameter_pattern', 'pattern',\n                        elPattern.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elPattern);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    let patterns;\n                    let type = selectedObj.getValue('type');\n                    let valueType = (type === Parameter.type.simpleArray) ? selectedObj.getValue('arrayItemType') : type;\n                    if (valueType === Parameter.type.date) {\n                        patterns = this.rb.getProperty('patternDates');\n                    } else {\n                        patterns = this.rb.getProperty('patternNumbers');\n                    }\n                    this.rb.getPopupWindow().show(patterns, this.selectedObjId,\n                        'rbro_parameter_pattern', 'pattern', PopupWindow.type.pattern);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_parameter_pattern_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_parameter_expression_row\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_expression\">${this.rb.getLabel('parameterExpression')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elExpression = $('<textarea id=\"rbro_parameter_expression\" rows=\"1\"></textarea>')\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_parameter_expression', 'expression',\n                        elExpression.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elExpression);\n        elFormField.append(elExpression);\n        elParameterButton = $(`<div id=\"rbro_parameter_expression_param_button\"\n        class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>`)\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    let items;\n                    let popupType;\n                    if (selectedObj.getValue('type') === Parameter.type.sum ||\n                            selectedObj.getValue('type') === Parameter.type.average) {\n                        items = this.rb.getArrayFieldParameterItems(Parameter.type.number);\n                        popupType = PopupWindow.type.parameterSet;\n                    } else {\n                        items = this.rb.getParameterItems(selectedObj);\n                        popupType = PopupWindow.type.parameterAppend;\n                    }\n                    this.rb.getPopupWindow().show(items, this.selectedObjId,\n                        'rbro_parameter_expression', 'expression', popupType);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_parameter_expression_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_parameter_test_data_row\"></div>');\n        elDiv.append(`<label for=\"rbro_parameter_test_data\">${this.rb.getLabel('parameterTestData')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elTestData = $('<input id=\"rbro_parameter_test_data\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_parameter_test_data', 'testData',\n                        elTestData.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elTestData);\n        let elEditTestDataButton = $(`<button id=\"rbro_parameter_edit_test_data\"\n        class=\"rbroButton rbroActionButton\" style=\"display: none;\">\n                    <span>${this.rb.getLabel('parameterEditTestData')}</span>\n                    <span class=\"rbroIcon-edit\"></span>\n                </button>`)\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    let rows = selectedObj.getTestDataRows(true);\n                    if (rows.length > 0) {\n                        this.rb.getPopupWindow().show(\n                            rows, this.selectedObjId, '', 'testData', PopupWindow.type.testData);\n                    } else {\n                        alert(this.rb.getLabel('parameterEditTestDataNoFields'));\n                    }\n                }\n            });\n        elFormField.append(elEditTestDataButton);\n        elFormField.append('<div id=\"rbro_parameter_test_data_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_parameter_expression'));\n    }\n\n    show(data) {\n        $('#rbro_parameter_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_parameter_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {Parameter} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            let editable = data.getValue('editable');\n            $('#rbro_parameter_name').prop('disabled', !editable);\n            $('#rbro_parameter_type').prop('disabled', !editable);\n            $('#rbro_parameter_eval').prop('disabled', !editable);\n            $('#rbro_parameter_nullable').prop('disabled', !editable);\n            $('#rbro_parameter_pattern').prop('disabled', !editable);\n            $('#rbro_parameter_expression').prop('disabled', !editable);\n            if (editable) {\n                $('#rbro_parameter_name_row label').removeClass('rbroDisabled');\n                $('#rbro_parameter_type_row label').removeClass('rbroDisabled');\n                $('#rbro_parameter_eval_row label').removeClass('rbroDisabled');\n                $('#rbro_parameter_nullable_row label').removeClass('rbroDisabled');\n                $('#rbro_parameter_pattern_row label').removeClass('rbroDisabled');\n                $('#rbro_parameter_expression_row label').removeClass('rbroDisabled');\n            } else {\n                $('#rbro_parameter_name_row label').addClass('rbroDisabled');\n                $('#rbro_parameter_type_row label').addClass('rbroDisabled');\n                $('#rbro_parameter_eval_row label').addClass('rbroDisabled');\n                $('#rbro_parameter_nullable_row label').addClass('rbroDisabled');\n                $('#rbro_parameter_pattern_row label').addClass('rbroDisabled');\n                $('#rbro_parameter_expression_row label').addClass('rbroDisabled');\n            }\n            $('#rbro_parameter_test_data').prop('disabled', false);\n\n            $('#rbro_parameter_name').val(data.getName());\n            $('#rbro_parameter_type').val(data.getValue('type'));\n            $('#rbro_parameter_eval').prop('checked', data.getValue('eval'));\n            $('#rbro_parameter_nullable').prop('checked', data.getValue('nullable'));\n            $('#rbro_parameter_pattern').val(data.getValue('pattern'));\n            $('#rbro_parameter_expression').val(data.getValue('expression'));\n            $('#rbro_parameter_test_data').val(data.getValue('testData'));\n            this.updatePatternPlaceholder(data);\n            this.updateVisibility(data);\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_parameter_name').prop('disabled', true);\n            $('#rbro_parameter_type').prop('disabled', true);\n            $('#rbro_parameter_eval').prop('disabled', true);\n            $('#rbro_parameter_nullable').prop('disabled', true);\n            $('#rbro_parameter_pattern').prop('disabled', true);\n            $('#rbro_parameter_expression').prop('disabled', true);\n            $('#rbro_parameter_test_data').prop('disabled', true);\n        }\n        \n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n        if (obj instanceof Parameter && obj === this.rb.getDetailData() && operation === Command.operation.change) {\n            this.updateVisibility(obj);\n        }\n    }\n\n    updatePatternPlaceholder(obj) {\n        if (obj !== null && obj.getValue('type') === Parameter.type.date) {\n            $('#rbro_parameter_test_data').attr('placeholder', this.rb.getLabel('parameterTestDataDatePattern'));\n        } else {\n            $('#rbro_parameter_test_data').attr('placeholder', '');\n        }\n    }\n\n    updateVisibility(obj) {\n        let type = obj.getValue('type');\n        let valueType = (type === Parameter.type.simpleArray) ? obj.getValue('arrayItemType') : type;\n        let showOnlyNameType = obj.getValue('showOnlyNameType');\n        let parentParameter = null;\n        if (obj.getPanelItem() !== null && obj.getPanelItem().getParent().getData() instanceof Parameter) {\n            parentParameter = obj.getPanelItem().getParent().getData();\n        }\n\n        if (type === Parameter.type.simpleArray) {\n            $('#rbro_parameter_array_item_type_row').show();\n        } else {\n            $('#rbro_parameter_array_item_type_row').hide();\n        }\n        if (type === Parameter.type.string || type === Parameter.type.number || type === Parameter.type.boolean || type === Parameter.type.date ||\n                type === Parameter.type.array || type === Parameter.type.simpleArray || type === Parameter.type.map) {\n            $('#rbro_parameter_nullable_row').show();\n        } else {\n            $('#rbro_parameter_nullable_row').hide();\n        }\n        if ((valueType === Parameter.type.number || valueType === Parameter.type.date ||\n                valueType === Parameter.type.sum || valueType === Parameter.type.average) && !showOnlyNameType) {\n            $('#rbro_parameter_pattern_row').show();\n        } else {\n            $('#rbro_parameter_pattern_row').hide();\n        }\n        if (type === Parameter.type.image || type === Parameter.type.sum || type === Parameter.type.average ||\n                showOnlyNameType) {\n            $('#rbro_parameter_eval_row').hide();\n            $('#rbro_parameter_test_data_row').hide();\n        } else {\n            if (type === Parameter.type.image || type === Parameter.type.array || type === Parameter.type.simpleArray || type === Parameter.type.map) {\n                $('#rbro_parameter_eval_row').hide();\n            } else {\n                $('#rbro_parameter_eval_row').show();\n            }\n            if ((parentParameter !== null && parentParameter.getValue('type') === Parameter.type.array) ||\n                    type === Parameter.type.map) {\n                $('#rbro_parameter_test_data_row').hide();\n            } else {\n                if (type === Parameter.type.array || type === Parameter.type.simpleArray || !obj.getValue('eval')) {\n                    $('#rbro_parameter_test_data_row').show();\n                } else {\n                    $('#rbro_parameter_test_data_row').hide();\n                }\n            }\n            if (type === Parameter.type.array || type === Parameter.type.simpleArray) {\n                $('#rbro_parameter_test_data').hide();\n                $('#rbro_parameter_edit_test_data').show();\n            } else {\n                $('#rbro_parameter_test_data').show();\n                $('#rbro_parameter_edit_test_data').hide();\n            }\n        }\n        if (((obj.getValue('eval') && (type === Parameter.type.string || type === Parameter.type.number ||\n              type === Parameter.type.boolean || type === Parameter.type.date)) ||\n                (type === Parameter.type.sum || type === Parameter.type.average)) && !showOnlyNameType) {\n            $('#rbro_parameter_expression_row').show();\n        } else {\n            $('#rbro_parameter_expression_row').hide();\n        }\n        // do not allow nested array/map\n        if (obj.getPanelItem() !== null && obj.getPanelItem().getParent() === this.rb.getMainPanel().getParametersItem()) {\n            $('#rbro_parameter_type option[value=\"array\"]').removeClass('rbroHidden');\n            $('#rbro_parameter_type option[value=\"map\"]').removeClass('rbroHidden');\n        } else {\n            $('#rbro_parameter_type option[value=\"array\"]').addClass('rbroHidden');\n            $('#rbro_parameter_type option[value=\"map\"]').addClass('rbroHidden');\n        }\n        // do not allow image and sum/average parameter in list\n        if (parentParameter !== null && parentParameter.getValue('type') === Parameter.type.array) {\n            // $('#rbro_parameter_type option[value=\"image\"]').addClass('rbroHidden');\n            $('#rbro_parameter_type option[value=\"sum\"]').addClass('rbroHidden');\n            $('#rbro_parameter_type option[value=\"average\"]').addClass('rbroHidden');\n        } else {\n            // $('#rbro_parameter_type option[value=\"image\"]').removeClass('rbroHidden');\n            $('#rbro_parameter_type option[value=\"sum\"]').removeClass('rbroHidden');\n            $('#rbro_parameter_type option[value=\"average\"]').removeClass('rbroHidden');\n        }\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_parameter_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_parameter_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_parameter_' + error.field + '_row';\n                let errorId = 'rbro_parameter_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/ParameterPanel.js\n// module id = 44\n// module chunks = 0","import CommandGroupCmd from '../commands/CommandGroupCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport * as utils from '../utils';\nimport Band from '../container/Band';\n\n/**\n * Panel to edit all band properties of custom section.\n * @class\n */\nexport default class SectionBandElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_section_band_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_band_element_height\">${this.rb.getLabel('docElementHeight')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeight = $('<input id=\"rbro_section_band_element_height\">')\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_section_band_element_height', 'height',\n                        elHeight.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elFormField.append('<div id=\"rbro_section_element_size_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div id=\"rbro_section_band_element_repeat_header_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_band_element_repeat_header\">${this.rb.getLabel('tableElementRepeatHeader')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elRepeatHeader = $('<input id=\"rbro_section_band_element_repeat_header\" type=\"checkbox\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_section_band_element_repeat_header', 'repeatHeader',\n                        elRepeatHeader.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elRepeatHeader);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div id=\"rbro_section_band_element_always_print_on_same_page_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_band_element_always_print_on_same_page\">${this.rb.getLabel('docElementAlwaysPrintOnSamePage')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elAlwaysPrintOnSamePage = $(`<input id=\"rbro_section_band_element_always_print_on_same_page\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_section_band_element_always_print_on_same_page', 'alwaysPrintOnSamePage',\n                        elAlwaysPrintOnSamePage.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elAlwaysPrintOnSamePage);\n        elFormField.append('<div id=\"rbro_section_band_element_always_print_on_same_page_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_band_element_shrink_to_content_height\">${this.rb.getLabel('frameElementShrinkToContentHeight')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elShrinkToContentHeight = $(`<input id=\"rbro_section_band_element_shrink_to_content_height\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_section_band_element_shrink_to_content_height', 'shrinkToContentHeight',\n                        elShrinkToContentHeight.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elShrinkToContentHeight);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    show(data) {\n        $('#rbro_section_band_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_section_band_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {TableBandElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_section_band_element_height').prop('disabled', false);\n            $('#rbro_section_band_element_repeat_header').prop('disabled', false);\n            $('#rbro_section_band_shrink_to_content_height').prop('disabled', false);\n\n            $('#rbro_section_band_element_height').val(data.getValue('height'));\n            if (data.getValue('bandType') === Band.bandType.header) {\n                $('#rbro_section_band_element_repeat_header').prop('checked', data.getValue('repeatHeader'));\n                $('#rbro_section_band_element_repeat_header_row').show();\n                $('#rbro_section_band_element_always_print_on_same_page_row').hide();\n            } else {\n                $('#rbro_section_band_element_repeat_header_row').hide();\n                $('#rbro_section_band_element_always_print_on_same_page').prop(\n                    'checked', data.getValue('alwaysPrintOnSamePage'));\n                $('#rbro_section_band_element_always_print_on_same_page_row').show();\n            }\n            $('#rbro_section_band_shrink_to_content_height').prop('checked', data.getValue('shrinkToContentHeight'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_section_band_element_height').prop('disabled', true);\n            $('#rbro_section_band_element_repeat_header').prop('disabled', true);\n            $('#rbro_section_band_shrink_to_content_height').prop('disabled', true);\n        }\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_section_band_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_section_band_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_section_band_element_' + error.field + '_row';\n                let errorId = 'rbro_section_band_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/SectionBandElementPanel.js\n// module id = 45\n// module chunks = 0","import SetValueCmd from '../commands/SetValueCmd';\nimport Parameter from '../data/Parameter';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all section properties.\n * @class\n */\nexport default class SectionElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_section_element_panel\" class=\"rbroHidden\"></div>');\n\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_element_label\">${this.rb.getLabel('docElementLabel')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elLabel = $(`<input id=\"rbro_section_element_label\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(this.getSelectedObjId(), 'rbro_section_element_label',\n                        'label', elLabel.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elLabel);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_section_element_data_source_row\"></div>');\n        elDiv.append(`<label for=\"rbro_section_element_data_source\">${this.rb.getLabel('docElementDataSource')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elDataSource = $(`<textarea id=\"rbro_section_element_data_source\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_section_element_data_source', 'dataSource',\n                        elDataSource.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elDataSource);\n        elFormField.append(elDataSource);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj, [Parameter.type.array]), this.selectedObjId,\n                        'rbro_section_element_data_source', 'dataSource', PopupWindow.type.parameterSet);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_section_element_data_source_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_section_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_element_position_y\">${this.rb.getLabel('docElementPositionY')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elPosY = $(`<input id=\"rbro_section_element_position_y\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_section_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_section_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_element_header\">${this.rb.getLabel('header')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeaderLabel = $(`<label class=\"switch-light switch-material\"></label>`);\n        let elHeader = $(`<input id=\"rbro_section_element_header\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_section_element_header', 'header',\n                        elHeader.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elHeaderLabel.append(elHeader);\n        let elHeaderSpan = $('<span></span>');\n        elHeaderSpan.append($('<span></span>'));\n        elHeaderSpan.append($('<span></span>'));\n        elHeaderSpan.append($('<a></a>'));\n        elHeaderLabel.append(elHeaderSpan);\n        elFormField.append(elHeaderLabel);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_element_footer\">${this.rb.getLabel('footer')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elFooterLabel = $(`<label class=\"switch-light switch-material\"></label>`);\n        let elFooter = $(`<input id=\"rbro_section_element_footer\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_section_element_footer', 'footer',\n                        elFooter.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFooterLabel.append(elFooter);\n        let elFooterSpan = $('<span></span>');\n        elFooterSpan.append($('<span></span>'));\n        elFooterSpan.append($('<span></span>'));\n        elFooterSpan.append($('<a></a>'));\n        elFooterLabel.append(elFooterSpan);\n        elFormField.append(elFooterLabel);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        let elPrintHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elPrintHeaderIcon = $('<span id=\"rbro_section_element_print_header_icon\" class=\"rbroIcon-plus\"></span>');\n        elDiv = $('<div id=\"rbro_section_element_print_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    $('#rbro_section_element_print_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_section_element_print_section').toggleClass('rbroHidden');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-plus');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elPrintHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop(elPrintHeader.position().top);\n                    }\n                    autosize.update($('#rbro_section_element_print_if'));\n                });\n        elPrintHeader.append(elPrintHeaderIcon);\n        elPrintHeader.append(`<span>${this.rb.getLabel('docElementPrintSettings')}</span>`);\n        elDiv.append(elPrintHeader);\n        panel.append(elDiv);\n        \n        let elPrintSectionDiv = $('<div id=\"rbro_section_element_print_section\" class=\"rbroHidden\"></div>');\n        elDiv = $('<div id=\"rbro_section_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_section_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_section_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_section_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_section_element_print_if', 'parameter', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_section_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_section_element_print_if'));\n    }\n\n    show(data) {\n        $('#rbro_section_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n        this.updateAutosizeInputs();\n    }\n\n    hide() {\n        $('#rbro_section_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {LineElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_section_element_data_source').prop('disabled', false);\n            $('#rbro_section_element_label').prop('disabled', false);\n            $('#rbro_section_element_position_y').prop('disabled', false);\n            $('#rbro_table_element_header').prop('disabled', false);\n            $('#rbro_table_element_footer').prop('disabled', false);\n            $('#rbro_section_element_print_if').prop('disabled', false);\n            \n            $('#rbro_section_element_data_source').val(data.getValue('dataSource'));\n            $('#rbro_section_element_label').val(data.getValue('label'));\n            $('#rbro_section_element_position_y').val(data.getValue('y'));\n            $('#rbro_section_element_header').prop('checked', data.getValue('header'));\n            $('#rbro_section_element_footer').prop('checked', data.getValue('footer'));\n            $('#rbro_section_element_print_if').val(data.getValue('printIf'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_section_element_data_source').prop('disabled', true);\n            $('#rbro_section_element_label').prop('disabled', true);\n            $('#rbro_section_element_position_y').prop('disabled', true);\n            $('#rbro_table_element_header').prop('disabled', true);\n            $('#rbro_table_element_footer').prop('disabled', true);\n            $('#rbro_section_element_print_if').prop('disabled', true);\n        }\n\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_section_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_section_element_panel .rbroPanelSection').removeClass('rbroError');\n        $('#rbro_section_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_section_element_' + error.field + '_row';\n                let errorId = 'rbro_section_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n                if (error.field === 'print_if') {\n                    $('#rbro_section_element_print_header').addClass('rbroError');\n                    if (!$('#rbro_section_element_print_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_section_element_print_header').trigger('click');\n                    }\n                }\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/SectionElementPanel.js\n// module id = 46\n// module chunks = 0","import SetValueCmd from '../commands/SetValueCmd';\nimport Band from '../container/Band';\nimport * as utils from '../utils';\nimport PopupWindow from '../PopupWindow';\n\n/**\n * Panel to edit all table band properties.\n * @class\n */\nexport default class TableBandElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_table_band_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_height\">${this.rb.getLabel('docElementHeight')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeight = $('<input id=\"rbro_table_band_element_height\">')\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_band_element_height', 'height',\n                        elHeight.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div id=\"rbro_table_band_element_repeat_header_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_repeat_header\">${this.rb.getLabel('tableElementRepeatHeader')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elRepeatHeader = $('<input id=\"rbro_table_band_element_repeat_header\" type=\"checkbox\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_table_band_element_repeat_header', 'repeatHeader',\n                        elRepeatHeader.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elRepeatHeader);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_background_color\">${this.rb.getLabel('styleBackgroundColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBgColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elBgColor = $('<input id=\"rbro_table_band_element_background_color\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_band_element_background_color',\n                        'backgroundColor', elBgColor.val(), SetValueCmd.type.color, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBgColorContainer.append(elBgColor);\n        elFormField.append(elBgColorContainer);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        utils.initColorPicker(elBgColor, this.rb, { allowEmpty: true });\n\n        elDiv = $('<div id=\"rbro_table_band_element_alternate_background_color_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_alternate_background_color\">${this.rb.getLabel('tableElementAlternateBackgroundColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elAltBgColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elAltBgColor = $('<input id=\"rbro_table_band_element_alternate_background_color\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_band_element_alternate_background_color',\n                        'alternateBackgroundColor', elAltBgColor.val(), SetValueCmd.type.color, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elAltBgColorContainer.append(elAltBgColor);\n        elFormField.append(elAltBgColorContainer);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        utils.initColorPicker(elAltBgColor, this.rb, { allowEmpty: true });\n\n        elDiv = $('<div id=\"rbro_table_band_element_always_print_on_same_page_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_always_print_on_same_page\">${this.rb.getLabel('docElementAlwaysPrintOnSamePage')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elAlwaysPrintOnSamePage = $(`<input id=\"rbro_table_band_element_always_print_on_same_page\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_table_band_element_always_print_on_same_page', 'alwaysPrintOnSamePage',\n                        elAlwaysPrintOnSamePage.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elAlwaysPrintOnSamePage);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_table_band_element_group_expression_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_group_expression\">${this.rb.getLabel('tableElementGroupExpression')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elGroupExpression = $(`<textarea id=\"rbro_table_band_element_group_expression\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('groupExpression') !== elGroupExpression.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_table_band_element_group_expression', 'groupExpression',\n                        elGroupExpression.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            })\n            .blur(event => {\n                this.rb.getPopupWindow().hide();\n            });\n        autosize(elGroupExpression);\n        elFormField.append(elGroupExpression);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_table_band_element_group_expression', 'groupExpression', PopupWindow.type.parameterSet);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_text_element_group_expression_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_table_band_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_band_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_table_band_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('printIf') !== elPrintIf.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_table_band_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_table_band_element_print_if', 'printIf', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_text_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    show(data) {\n        $('#rbro_table_band_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_table_band_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {TableBandElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_table_band_element_height').prop('disabled', false);\n            $('#rbro_table_band_element_repeat_header').prop('disabled', false);\n\n            $('#rbro_table_band_element_height').val(data.getValue('height'));\n            $('#rbro_table_band_element_background_color').spectrum(\"set\", data.getValue('backgroundColor'));\n            if (data.getValue('bandType') === Band.bandType.header) {\n                $('#rbro_table_band_element_repeat_header').prop('checked', data.getValue('repeatHeader'));\n                $('#rbro_table_band_element_repeat_header_row').show();\n            } else {\n                $('#rbro_table_band_element_repeat_header_row').hide();\n            }\n            if (data.getValue('bandType') === Band.bandType.content) {\n                $('#rbro_table_band_element_alternate_background_color').spectrum(\"set\", data.getValue('alternateBackgroundColor'));\n                $('#rbro_table_band_element_always_print_on_same_page').prop('checked', data.getValue('alwaysPrintOnSamePage'));\n                $('#rbro_table_band_element_group_expression').val(data.getValue('groupExpression'));\n                $('#rbro_table_band_element_print_if').val(data.getValue('printIf'));\n                $('#rbro_table_band_element_alternate_background_color_row').show();\n                $('#rbro_table_band_element_always_print_on_same_page_row').show();\n                $('#rbro_table_band_element_group_expression_row').show();\n                $('#rbro_table_band_element_print_if_row').show();\n            } else {\n                $('#rbro_table_band_element_alternate_background_color_row').hide();\n                $('#rbro_table_band_element_always_print_on_same_page_row').hide();\n                $('#rbro_table_band_element_group_expression_row').hide();\n                $('#rbro_table_band_element_print_if_row').hide();\n            }\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_table_band_element_height').prop('disabled', true);\n            $('#rbro_table_band_element_repeat_header').prop('disabled', true);\n        }\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_table_band_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_table_band_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/TableBandElementPanel.js\n// module id = 47\n// module chunks = 0","import CommandGroupCmd from '../commands/CommandGroupCmd';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Parameter from '../data/Parameter';\nimport DocElement from '../elements/DocElement';\nimport TableElement from '../elements/TableElement';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all table properties.\n * @class\n */\nexport default class TableElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_table_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_table_element_data_source_row\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_data_source\">${this.rb.getLabel('docElementDataSource')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elDataSource = $(`<textarea id=\"rbro_table_element_data_source\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_data_source', 'dataSource',\n                        elDataSource.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elDataSource);\n        elFormField.append(elDataSource);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj, [Parameter.type.array]), this.selectedObjId,\n                        'rbro_table_element_data_source', 'dataSource', PopupWindow.type.parameterSet);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_table_element_data_source_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_table_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_position\">${this.rb.getLabel('docElementPosition')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elPosX = $(`<input id=\"rbro_table_element_position_x\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_position_x', 'x',\n                        elPosX.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosX);\n        elFormField.append(elPosX);\n        let elPosY = $(`<input id=\"rbro_table_element_position_y\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_table_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_columns\">${this.rb.getLabel('tableElementColumns')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elColumns = $(`<input id=\"rbro_table_element_columns\">`)\n            .change(event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null) {\n                    let val = utils.checkInputDecimal(elColumns.val(), 1, 20);\n                    if (val !== elColumns.val()) {\n                        elColumns.val(val);\n                    }\n                    let cmdGroup = new CommandGroupCmd('Set value');\n                    let columns = utils.convertInputToNumber(val);\n                    let newColumns = obj.addCommandsForChangedColumns(columns, cmdGroup);\n                    if (newColumns !== columns) {\n                        elColumns.val(newColumns);\n                    }\n                    if (!cmdGroup.isEmpty()) {\n                        this.rb.executeCommand(cmdGroup);\n                    }\n                }\n            });\n        utils.setInputPositiveInteger(elColumns);\n        elFormField.append(elColumns);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_header\">${this.rb.getLabel('header')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elHeaderLabel = $(`<label class=\"switch-light switch-material\"></label>`);\n        let elHeader = $(`<input id=\"rbro_table_element_header\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_header', 'header',\n                        elHeader.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elHeaderLabel.append(elHeader);\n        let elHeaderSpan = $('<span></span>');\n        elHeaderSpan.append($('<span></span>'));\n        elHeaderSpan.append($('<span></span>'));\n        elHeaderSpan.append($('<a></a>'));\n        elHeaderLabel.append(elHeaderSpan);\n        elFormField.append(elHeaderLabel);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_content_rows\">${this.rb.getLabel('tableElementContentRows')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        // let elContentRows = $(`<input id=\"rbro_table_element_content_rows\" maxlength=\"1\">`)\n        let elContentRows = $(`<input id=\"rbro_table_element_content_rows\">`) // Unlimited rows\n            .change(event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null) {\n                    // let val = utils.checkInputDecimal(elContentRows.val(), 1, 9); // Unlimited rows\n                    let val = elContentRows.val();\n                    console.log('val', val);\n                    if (val < 1) {\n                        val = 1;\n                    }\n                    console.log('val', val);\n                    if (val !== elContentRows.val()) {\n                        elContentRows.val(val);\n                    }\n                    let cmdGroup = new CommandGroupCmd('Set value');\n                    let contentRows = utils.convertInputToNumber(val);\n                    obj.addCommandsForChangedContentRows(contentRows, cmdGroup);\n                    if (!cmdGroup.isEmpty()) {\n                        this.rb.executeCommand(cmdGroup);\n                    }\n                }\n            });\n        utils.setInputPositiveInteger(elContentRows);\n        elFormField.append(elContentRows);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_footer\">${this.rb.getLabel('footer')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elFooterLabel = $(`<label class=\"switch-light switch-material\"></label>`);\n        let elFooter = $(`<input id=\"rbro_table_element_footer\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_footer', 'footer',\n                        elFooter.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFooterLabel.append(elFooter);\n        let elFooterSpan = $('<span></span>');\n        elFooterSpan.append($('<span></span>'));\n        elFooterSpan.append($('<span></span>'));\n        elFooterSpan.append($('<a></a>'));\n        elFooterLabel.append(elFooterSpan);\n        elFormField.append(elFooterLabel);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label>${this.rb.getLabel('styleBorder')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBorder = $('<div id=\"rbro_table_element_border\"></div>');\n        let elBorderGrid = $(`<button id=\"rbro_table_element_border_grid\" class=\"rbroButton rbroActionButton rbroIcon-border-table-grid\"\n                type=\"button\" value=\"grid\"\n                title=\"${this.rb.getLabel('tableElementBorderGrid')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_border',\n                        'border', TableElement.border.grid, SetValueCmd.type.buttonGroup, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorder.append(elBorderGrid);\n        let elBorderFrameRow = $(`<button id=\"rbro_table_element_border_frame_row\" class=\"rbroButton rbroActionButton rbroIcon-border-table-frame-row\"\n                type=\"button\" value=\"frame_row\"\n                title=\"${this.rb.getLabel('tableElementBorderFrameRow')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_border',\n                        'border', TableElement.border.frameRow, SetValueCmd.type.buttonGroup, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorder.append(elBorderFrameRow);\n        let elBorderFrame = $(`<button id=\"rbro_table_element_border_frame\" class=\"rbroButton rbroActionButton rbroIcon-border-table-frame\"\n                type=\"button\" value=\"frame\"\n                title=\"${this.rb.getLabel('tableElementBorderFrame')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_border',\n                        'border', TableElement.border.frame, SetValueCmd.type.buttonGroup, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorder.append(elBorderFrame);\n        let elBorderRow = $(`<button id=\"rbro_table_element_border_row\" class=\"rbroButton rbroActionButton rbroIcon-border-table-row\"\n                type=\"button\" value=\"row\"\n                title=\"${this.rb.getLabel('tableElementBorderRow')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_border',\n                        'border', TableElement.border.row, SetValueCmd.type.buttonGroup, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorder.append(elBorderRow);\n        let elBorderNone = $(`<button id=\"rbro_table_element_border_none\" class=\"rbroButton rbroActionButton rbroIcon-border-table-none\"\n                type=\"button\" value=\"none\"\n                title=\"${this.rb.getLabel('tableElementBorderNone')}\"></button>`)\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_border',\n                        'border', TableElement.border.none, SetValueCmd.type.buttonGroup, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorder.append(elBorderNone);\n        elFormField.append(elBorder);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_border_color\">${this.rb.getLabel('styleBorderColor')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBorderColorContainer = $('<div class=\"rbroColorPickerContainer\"></div>');\n        let elBorderColor = $('<input id=\"rbro_table_element_border_color\">')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_border_color',\n                        'borderColor', elBorderColor.val(), SetValueCmd.type.color, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elBorderColorContainer.append(elBorderColor);\n        elFormField.append(elBorderColorContainer);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        utils.initColorPicker(elBorderColor, this.rb);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_table_element_border_width\">${this.rb.getLabel('styleBorderWidth')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elBorderWidth = $(`<input id=\"rbro_table_element_border_width\">`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.getSelectedObjId()) !== null) {\n                    let cmd = new SetValueCmd(this.getSelectedObjId(), 'rbro_table_element_border_width',\n                        'borderWidth', elBorderWidth.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elBorderWidth);\n        elDiv.append(elFormField);\n        utils.setInputDecimal(elBorderWidth);\n        panel.append(elDiv);\n\n        if (this.rb.getProperty('enableSpreadsheet')) {\n            let elSpreadsheetHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n            let elSpreadsheetHeaderIcon = $('<span id=\"rbro_table_element_spreadsheet_header_icon\" class=\"rbroIcon-plus\"></span>');\n            elDiv = $('<div id=\"rbro_table_element_spreadsheet_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        $('#rbro_table_element_spreadsheet_header').toggleClass('rbroPanelSectionHeaderOpen');\n                        $('#rbro_table_element_spreadsheet_section').toggleClass('rbroHidden');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-plus');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-minus');\n                        if (elSpreadsheetHeaderIcon.hasClass('rbroIcon-minus')) {\n                            $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elSpreadsheetHeader.position().top);\n                        }\n                    }\n                });\n            elSpreadsheetHeader.append(elSpreadsheetHeaderIcon);\n            elSpreadsheetHeader.append(`<span>${this.rb.getLabel('docElementSpreadsheet')}</span>`);\n            elDiv.append(elSpreadsheetHeader);\n            panel.append(elDiv);\n\n            let elSpreadsheetSectionDiv = $('<div id=\"rbro_table_element_spreadsheet_section\" class=\"rbroHidden\"></div>');\n            elDiv = $('<div id=\"rbro_table_element_spreadsheet_hide_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_table_element_spreadsheet_hide\">${this.rb.getLabel('docElementSpreadsheetHide')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetHide = $(`<input id=\"rbro_table_element_spreadsheet_hide\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_table_element_spreadsheet_hide', 'spreadsheet_hide',\n                            elSpreadsheetHide.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetHide);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_table_element_spreadsheet_column_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_table_element_spreadsheet_column\">${this.rb.getLabel('docElementSpreadsheetColumn')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColumn = $(`<input id=\"rbro_table_element_spreadsheet_column\">`)\n                .on('input', event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_table_element_spreadsheet_column', 'spreadsheet_column',\n                            elSpreadsheetColumn.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColumn);\n            elFormField.append(elSpreadsheetColumn);\n            elFormField.append('<div id=\"rbro_table_element_spreadsheet_column_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_table_element_spreadsheet_add_empty_row_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_table_element_spreadsheet_add_empty_row\">${this.rb.getLabel('docElementSpreadsheetAddEmptyRow')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetAddEmptyRow = $(`<input id=\"rbro_table_element_spreadsheet_add_empty_row\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_table_element_spreadsheet_add_empty_row', 'spreadsheet_addEmptyRow',\n                            elSpreadsheetAddEmptyRow.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetAddEmptyRow);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n            panel.append(elSpreadsheetSectionDiv);\n        }\n\n        $('#rbro_detail_panel').append(panel);\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_table_element_data_source'));\n    }\n\n    show(data) {\n        $('#rbro_table_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n        this.updateAutosizeInputs();\n    }\n\n    hide() {\n        $('#rbro_table_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {TableElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_table_element_data_source').prop('disabled', false);\n            $('#rbro_table_element_position_x').prop('disabled', false);\n            $('#rbro_table_element_position_y').prop('disabled', false);\n            $('#rbro_table_element_columns').prop('disabled', false);\n            $('#rbro_table_element_header').prop('disabled', false);\n            $('#rbro_table_element_footer').prop('disabled', false);\n            $('#rbro_table_element_border_grid').prop('disabled', false);\n            $('#rbro_table_element_border_frame_row').prop('disabled', false);\n            $('#rbro_table_element_border_frame').prop('disabled', false);\n            $('#rbro_table_element_border_row').prop('disabled', false);\n            $('#rbro_table_element_border_none').prop('disabled', false);\n            $('#rbro_table_element_border_color').spectrum('enable');\n            $('#rbro_table_element_border_width').prop('disabled', false);\n            $('#rbro_table_element_spreadsheet_hide').prop('disabled', false);\n            $('#rbro_table_element_spreadsheet_column').prop('disabled', false);\n            $('#rbro_table_element_spreadsheet_add_empty_row').prop('disabled', false);\n\n            $('#rbro_table_element_data_source').val(data.getValue('dataSource'));\n            $('#rbro_table_element_position_x').val(data.getValue('x'));\n            $('#rbro_table_element_position_y').val(data.getValue('y'));\n            $('#rbro_table_element_columns').val(data.getValue('columns'));\n            $('#rbro_table_element_header').prop('checked', data.getValue('header'));\n            $('#rbro_table_element_content_rows').val(data.getValue('contentRows'));\n            $('#rbro_table_element_footer').prop('checked', data.getValue('footer'));\n\n            $('#rbro_table_element_border').find('button').removeClass('rbroButtonActive');\n            $('#rbro_table_element_border').find(`button[value=\"${data.getValue('border')}\"]`).addClass('rbroButtonActive');\n            $('#rbro_table_element_border_color').spectrum('set', data.getValue('borderColor'));\n            $('#rbro_table_element_border_width').val(data.getValue('borderWidth'));\n            $('#rbro_table_element_spreadsheet_hide').prop('checked', data.getValue('spreadsheet_hide'));\n            $('#rbro_table_element_spreadsheet_column').val(data.getValue('spreadsheet_column'));\n            $('#rbro_table_element_spreadsheet_add_empty_row').prop('checked', data.getValue('spreadsheet_addEmptyRow'));\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_table_element_data_source').prop('disabled', true);\n            $('#rbro_table_element_position_x').prop('disabled', true);\n            $('#rbro_table_element_position_y').prop('disabled', true);\n            $('#rbro_table_element_columns').prop('disabled', true);\n            $('#rbro_table_element_header').prop('disabled', true);\n            $('#rbro_table_element_content_rows').prop('disabled', true);\n            $('#rbro_table_element_footer').prop('disabled', true);\n            $('#rbro_table_element_border_grid').prop('disabled', true);\n            $('#rbro_table_element_border_frame_row').prop('disabled', true);\n            $('#rbro_table_element_border_frame').prop('disabled', true);\n            $('#rbro_table_element_border_row').prop('disabled', true);\n            $('#rbro_table_element_border_none').prop('disabled', true);\n            $('#rbro_table_element_border_color').spectrum('disable');\n            $('#rbro_table_element_border_width').prop('disabled', true);\n            $('#rbro_table_element_spreadsheet_hide').prop('disabled', true);\n            $('#rbro_table_element_spreadsheet_column').prop('disabled', true);\n            $('#rbro_table_element_spreadsheet_add_empty_row').prop('disabled', true);\n        }\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_table_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_table_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_table_element_' + error.field + '_row';\n                let errorId = 'rbro_table_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n                if (error.field === 'spreadsheet_column') {\n                    $('#rbro_table_element_spreadsheet_header').addClass('rbroError');\n                    if (!$('#rbro_table_element_spreadsheet_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_table_element_spreadsheet_header').trigger('click');\n                    }\n                }\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/TableElementPanel.js\n// module id = 48\n// module chunks = 0","import StylePanel from './StylePanel';\nimport Command from '../commands/Command';\nimport SetValueCmd from '../commands/SetValueCmd';\nimport Band from '../container/Band';\nimport Style from '../data/Style';\nimport DocElement from '../elements/DocElement';\nimport TableTextElement from '../elements/TableTextElement';\nimport PopupWindow from '../PopupWindow';\nimport * as utils from '../utils';\n\n/**\n * Panel to edit all text properties.\n * @class\n */\nexport default class TextElementPanel {\n    constructor(rootElement, rb) {\n        this.rootElement = rootElement;\n        this.rb = rb;\n        this.elStyle = null;\n        this.cs_elStyle = null;\n        this.selectedObjId = null;\n    }\n\n    render() {\n        let panel = $('<div id=\"rbro_text_element_panel\" class=\"rbroHidden\"></div>');\n        let elDiv = $('<div id=\"rbro_text_element_content_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_content\">${this.rb.getLabel('textElementContent')}:</label>`);\n        let elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elContent = $(`<textarea id=\"rbro_text_element_content\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('content') !== elContent.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_content', 'content',\n                        elContent.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            })\n            .blur(event => {\n                this.rb.getPopupWindow().hide();\n            });\n        autosize(elContent);\n        elFormField.append(elContent);\n        let elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_text_element_content', 'content', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_text_element_content_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\" id=\"rbro_text_element_eval_row\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_eval\">${this.rb.getLabel('textElementEval')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elEval = $(`<input id=\"rbro_text_element_eval\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_text_element_eval', 'eval',\n                        elEval.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elEval);\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_text_element_position_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_position_x\">${this.rb.getLabel('docElementPosition')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elPosX = $(`<input id=\"rbro_text_element_position_x\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('x') !== elPosX.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_position_x', 'x',\n                        elPosX.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosX);\n        elFormField.append(elPosX);\n        let elPosY = $(`<input id=\"rbro_text_element_position_y\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('y') !== elPosY.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_position_y', 'y',\n                        elPosY.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elPosY);\n        elFormField.append(elPosY);\n        elFormField.append('<div id=\"rbro_text_element_position_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n        \n        elDiv = $('<div id=\"rbro_text_element_size_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_size\">${this.rb.getLabel('docElementSize')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit\"></div>');\n        let elWidth = $(`<input id=\"rbro_text_element_width\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('width') !== elWidth.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_width', 'width',\n                        elWidth.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elWidth);\n        elFormField.append(elWidth);\n        let elHeight = $(`<input id=\"rbro_text_element_height\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('height') !== elHeight.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_height', 'height',\n                        elHeight.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        utils.setInputDecimal(elHeight);\n        elFormField.append(elHeight);\n        elFormField.append('<div id=\"rbro_text_element_size_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        panel.append(elDiv);\n\n        let elStyleHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elStyleHeaderIcon = $('<span id=\"rbro_text_element_style_header_icon\" class=\"rbroPanelSectionHeaderOpen rbroIcon-minus\"></span>');\n        elDiv = $('<div id=\"rbro_text_element_style_header\" class=\"rbroFormRow rbroPanelSection rbroPanelSectionHeaderOpen\"></div>')\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    $('#rbro_text_element_style_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_text_element_style_section').toggleClass('rbroHidden');\n                    elStyleHeaderIcon.toggleClass('rbroIcon-plus');\n                    elStyleHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elStyleHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elStyleHeader.position().top);\n                    }\n                }\n            });\n        elStyleHeader.append(elStyleHeaderIcon);\n        elStyleHeader.append(`<span>${this.rb.getLabel('docElementStyle')}</span>`);\n        elDiv.append(elStyleHeader);\n        panel.append(elDiv);\n\n        let elStyleSectionDiv = $('<div id=\"rbro_text_element_style_section\"></div>');\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_style_id\">${this.rb.getLabel('docElementStyle')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        this.elStyle = $('<select id=\"rbro_text_element_style_id\"></select>')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_style_id', 'styleId',\n                        this.elStyle.val(), SetValueCmd.type.select, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(this.elStyle);\n        elDiv.append(elFormField);\n        elStyleSectionDiv.append(elDiv);\n\n        let elStyleDiv = $('<div id=\"rbro_text_element_style_settings\"></div>');\n        StylePanel.renderStyle(elStyleDiv, 'text_element_', '', DocElement.type.text, this, this.rb);\n        elStyleSectionDiv.append(elStyleDiv);\n        panel.append(elStyleSectionDiv);\n\n        let elPrintHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elPrintHeaderIcon = $('<span id=\"rbro_text_element_print_header_icon\" class=\"rbroIcon-plus\"></span>');\n        elDiv = $('<div id=\"rbro_text_element_print_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    $('#rbro_text_element_print_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_text_element_print_section').toggleClass('rbroHidden');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-plus');\n                    elPrintHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elPrintHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elPrintHeader.position().top);\n                    }\n                    autosize.update($('#rbro_text_element_print_if'));\n                }\n            });\n        elPrintHeader.append(elPrintHeaderIcon);\n        elPrintHeader.append(`<span>${this.rb.getLabel('docElementPrintSettings')}</span>`);\n        elDiv.append(elPrintHeader);\n        panel.append(elDiv);\n\n        let elPrintSectionDiv = $('<div id=\"rbro_text_element_print_section\" class=\"rbroHidden\"></div>');\n        elDiv = $('<div id=\"rbro_text_element_print_if_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_print_if\">${this.rb.getLabel('docElementPrintIf')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPrintIf = $(`<textarea id=\"rbro_text_element_print_if\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('printIf') !== elPrintIf.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_text_element_print_if', 'printIf',\n                        elPrintIf.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elPrintIf);\n        elFormField.append(elPrintIf);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_text_element_print_if', 'printIf', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_text_element_print_if_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n\n        elDiv = $('<div id=\"rbro_text_element_remove_empty_element_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_remove_empty_element\">${this.rb.getLabel('docElementRemoveEmptyElement')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elRemoveEmptyElement = $(`<input id=\"rbro_text_element_remove_empty_element\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_text_element_remove_empty_element', 'removeEmptyElement',\n                        elRemoveEmptyElement.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elRemoveEmptyElement);\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n\n        elDiv = $('<div id=\"rbro_text_element_always_print_on_same_page_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_always_print_on_same_page\">${this.rb.getLabel('docElementAlwaysPrintOnSamePage')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        let elAlwaysPrintOnSamePage = $(`<input id=\"rbro_text_element_always_print_on_same_page\" type=\"checkbox\">`)\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_text_element_always_print_on_same_page', 'alwaysPrintOnSamePage',\n                        elAlwaysPrintOnSamePage.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elAlwaysPrintOnSamePage);\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_pattern\">${this.rb.getLabel('textElementPattern')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elPattern = $(`<input id=\"rbro_text_element_pattern\">`)\n            .on('input', event => {\n                let obj = this.rb.getDataObject(this.selectedObjId);\n                if (obj !== null && obj.getValue('pattern') !== elPattern.val()) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_text_element_pattern', 'pattern',\n                        elPattern.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(elPattern);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getPatterns(), this.selectedObjId,\n                        'rbro_text_element_pattern', 'pattern', PopupWindow.type.pattern);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_text_element_pattern_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elPrintSectionDiv.append(elDiv);\n        panel.append(elPrintSectionDiv);\n\n        let elConditionalStyleHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n        let elConditionalStyleHeaderIcon = $('<span id=\"rbro_text_element_cs_header_icon\" class=\"rbroIcon-plus\"></span>');\n        elDiv = $('<div id=\"rbro_text_element_cs_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n            .click(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    $('#rbro_text_element_cs_header').toggleClass('rbroPanelSectionHeaderOpen');\n                    $('#rbro_text_element_cs_section').toggleClass('rbroHidden');\n                    elConditionalStyleHeaderIcon.toggleClass('rbroIcon-plus');\n                    elConditionalStyleHeaderIcon.toggleClass('rbroIcon-minus');\n                    if (elConditionalStyleHeaderIcon.hasClass('rbroIcon-minus')) {\n                        $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elConditionalStyleHeader.position().top);\n                    }\n                    autosize.update($('#rbro_text_element_cs_condition'));\n                }\n            });\n        elConditionalStyleHeader.append(elConditionalStyleHeaderIcon);\n        elConditionalStyleHeader.append(`<span>${this.rb.getLabel('docElementConditionalStyle')}</span>`);\n        elDiv.append(elConditionalStyleHeader);\n        panel.append(elDiv);\n\n        let elCondStyleSectionDiv = $('<div id=\"rbro_text_element_cs_section\" class=\"rbroHidden\"></div>');\n        elDiv = $('<div id=\"rbro_text_element_cs_condition_row\" class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_cs_condition\">${this.rb.getLabel('docElementConditionalStyleCondition')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField rbroSplit rbroSelector\"></div>');\n        let elCondStyleCondition = $(`<textarea id=\"rbro_text_element_cs_condition\" rows=\"1\"></textarea>`)\n            .on('input', event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId,\n                        'rbro_text_element_cs_condition', 'cs_condition',\n                        elCondStyleCondition.val(), SetValueCmd.type.text, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        autosize(elCondStyleCondition);\n        elFormField.append(elCondStyleCondition);\n        elParameterButton = $('<div class=\"rbroButton rbroRoundButton rbroIcon-select\"></div>')\n            .click(event => {\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    this.rb.getPopupWindow().show(this.rb.getParameterItems(selectedObj), this.selectedObjId,\n                        'rbro_text_element_cs_condition', 'cs_condition', PopupWindow.type.parameterAppend);\n                }\n            });\n        elFormField.append(elParameterButton);\n        elFormField.append('<div id=\"rbro_text_element_cs_condition_error\" class=\"rbroErrorMessage\"></div>');\n        elDiv.append(elFormField);\n        elCondStyleSectionDiv.append(elDiv);\n\n        elDiv = $('<div class=\"rbroFormRow\"></div>');\n        elDiv.append(`<label for=\"rbro_text_element_cs_style_id\">${this.rb.getLabel('docElementStyle')}:</label>`);\n        elFormField = $('<div class=\"rbroFormField\"></div>');\n        this.cs_elStyle = $('<select id=\"rbro_text_element_cs_style_id\"></select>')\n            .change(event => {\n                if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                    let cmd = new SetValueCmd(this.selectedObjId, `rbro_text_element_cs_style_id`, 'cs_styleId',\n                        this.cs_elStyle.val(), SetValueCmd.type.select, this.rb);\n                    this.rb.executeCommand(cmd);\n                }\n            });\n        elFormField.append(this.cs_elStyle);\n        elDiv.append(elFormField);\n        elCondStyleSectionDiv.append(elDiv);\n        \n        let elCondStyleDiv = $('<div id=\"rbro_text_element_cs_style_settings\"></div>');\n        StylePanel.renderStyle(elCondStyleDiv, 'text_element_cs_', 'cs_', DocElement.type.text, this, this.rb);\n        elCondStyleSectionDiv.append(elCondStyleDiv);\n        panel.append(elCondStyleSectionDiv);\n\n        if (this.rb.getProperty('enableSpreadsheet')) {\n            let elSpreadsheetHeader = $('<div class=\"rbroPanelSectionHeader\"></div>');\n            let elSpreadsheetHeaderIcon = $('<span id=\"rbro_text_element_spreadsheet_header_icon\" class=\"rbroIcon-plus\"></span>');\n            elDiv = $('<div id=\"rbro_text_element_spreadsheet_header\" class=\"rbroFormRow rbroPanelSection\"></div>')\n                .click(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        $('#rbro_text_element_spreadsheet_header').toggleClass('rbroPanelSectionHeaderOpen');\n                        $('#rbro_text_element_spreadsheet_section').toggleClass('rbroHidden');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-plus');\n                        elSpreadsheetHeaderIcon.toggleClass('rbroIcon-minus');\n                        if (elSpreadsheetHeaderIcon.hasClass('rbroIcon-minus')) {\n                            $('#rbro_detail_panel').scrollTop($('#rbro_detail_panel').scrollTop() + elSpreadsheetHeader.position().top);\n                        }\n                    }\n                });\n            elSpreadsheetHeader.append(elSpreadsheetHeaderIcon);\n            elSpreadsheetHeader.append(`<span>${this.rb.getLabel('docElementSpreadsheet')}</span>`);\n            elDiv.append(elSpreadsheetHeader);\n            panel.append(elDiv);\n\n            let elSpreadsheetSectionDiv = $('<div id=\"rbro_text_element_spreadsheet_section\" class=\"rbroHidden\"></div>');\n            elDiv = $('<div id=\"rbro_text_element_spreadsheet_hide_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_text_element_spreadsheet_hide\">${this.rb.getLabel('docElementSpreadsheetHide')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetHide = $(`<input id=\"rbro_text_element_spreadsheet_hide\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_text_element_spreadsheet_hide', 'spreadsheet_hide',\n                            elSpreadsheetHide.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetHide);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_text_element_spreadsheet_column_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_text_element_spreadsheet_column\">${this.rb.getLabel('docElementSpreadsheetColumn')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColumn = $(`<input id=\"rbro_text_element_spreadsheet_column\">`)\n                .on('input', event => {\n                    let obj = this.rb.getDataObject(this.selectedObjId);\n                    if (obj !== null && obj.getValue('spreadsheet_column') !== elSpreadsheetColumn.val()) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_spreadsheet_column', 'spreadsheet_column',\n                            elSpreadsheetColumn.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColumn);\n            elFormField.append(elSpreadsheetColumn);\n            elFormField.append('<div id=\"rbro_text_element_spreadsheet_column_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_text_element_spreadsheet_colspan_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_text_element_spreadsheet_colspan\">${this.rb.getLabel('docElementSpreadsheetColspan')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetColspan = $(`<input id=\"rbro_text_element_spreadsheet_colspan\">`)\n                .on('input', event => {\n                    let obj = this.rb.getDataObject(this.selectedObjId);\n                    if (obj !== null && obj.getValue('spreadsheet_colspan') !== elSpreadsheetColspan.val()) {\n                        let cmd = new SetValueCmd(this.selectedObjId, 'rbro_text_element_spreadsheet_colspan', 'spreadsheet_colspan',\n                            elSpreadsheetColspan.val(), SetValueCmd.type.text, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            utils.setInputPositiveInteger(elSpreadsheetColspan);\n            elFormField.append(elSpreadsheetColspan);\n            elFormField.append('<div id=\"rbro_text_element_spreadsheet_colspan_error\" class=\"rbroErrorMessage\"></div>');\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n\n            elDiv = $('<div id=\"rbro_text_element_spreadsheet_add_empty_row_row\" class=\"rbroFormRow\"></div>');\n            elDiv.append(`<label for=\"rbro_text_element_spreadsheet_add_empty_row\">${this.rb.getLabel('docElementSpreadsheetAddEmptyRow')}:</label>`);\n            elFormField = $('<div class=\"rbroFormField\"></div>');\n            let elSpreadsheetAddEmptyRow = $(`<input id=\"rbro_text_element_spreadsheet_add_empty_row\" type=\"checkbox\">`)\n                .change(event => {\n                    if (this.rb.getDataObject(this.selectedObjId) !== null) {\n                        let cmd = new SetValueCmd(this.selectedObjId,\n                            'rbro_text_element_spreadsheet_add_empty_row', 'spreadsheet_addEmptyRow',\n                            elSpreadsheetAddEmptyRow.is(\":checked\"), SetValueCmd.type.checkbox, this.rb);\n                        this.rb.executeCommand(cmd);\n                    }\n                });\n            elFormField.append(elSpreadsheetAddEmptyRow);\n            elDiv.append(elFormField);\n            elSpreadsheetSectionDiv.append(elDiv);\n            panel.append(elSpreadsheetSectionDiv);\n        }\n\n        $('#rbro_detail_panel').append(panel);\n        this.renderStyleSelect();\n    }\n\n    renderStyleSelect() {\n        this.elStyle.empty();\n        this.cs_elStyle.empty();\n        this.elStyle.append(`<option value=\"\">${this.rb.getLabel('styleNone')}</option>`);\n        this.cs_elStyle.append(`<option value=\"\">${this.rb.getLabel('styleNone')}</option>`);\n        let styles = this.rb.getStyles();\n        for (let style of styles) {\n            this.elStyle.append(`<option value=\"${style.getId()}\">${style.getName()}</option>`);\n            this.cs_elStyle.append(`<option value=\"${style.getId()}\">${style.getName()}</option>`);\n        }\n    }\n\n    updateAutosizeInputs() {\n        autosize.update($('#rbro_text_element_content'));\n        autosize.update($('#rbro_text_element_print_if'));\n        autosize.update($('#rbro_text_element_cs_condition'));\n    }\n\n    show(data) {\n        $('#rbro_text_element_panel').removeClass('rbroHidden');\n        this.updateData(data);\n    }\n\n    hide() {\n        $('#rbro_text_element_panel').addClass('rbroHidden');\n    }\n\n    /**\n     * Is called when the selected element was changed.\n     * The panel is updated to show the values of the selected data object.\n     * @param {TextElement|TableTextElement} data\n     */\n    updateData(data) {\n        if (data !== null) {\n            $('#rbro_text_element_content').prop('disabled', false);\n            $('#rbro_text_element_eval').prop('disabled', false);\n            $('#rbro_text_element_position_x').prop('disabled', false);\n            $('#rbro_text_element_position_y').prop('disabled', false);\n            $('#rbro_text_element_width').prop('disabled', false);\n            $('#rbro_text_element_height').prop('disabled', false);\n            $('#rbro_text_element_print_if').prop('disabled', false);\n            $('#rbro_text_element_remove_empty_element').prop('disabled', false);\n            $('#rbro_text_element_always_print_on_same_page').prop('disabled', false);\n            $('#rbro_text_element_pattern').prop('disabled', false);\n            $('#rbro_text_element_cs_condition').prop('disabled', false);\n            $('#rbro_text_element_style_id').prop('disabled', false);\n            $('#rbro_text_element_spreadsheet_hide').prop('disabled', false);\n            $('#rbro_text_element_spreadsheet_column').prop('disabled', false);\n            $('#rbro_text_element_spreadsheet_colspan').prop('disabled', false);\n            $('#rbro_text_element_spreadsheet_add_empty_row').prop('disabled', false);\n\n            $('#rbro_text_element_content').val(data.getValue('content'));\n            $('#rbro_text_element_eval').prop('checked', data.getValue('eval'));\n            $('#rbro_text_element_width').val(data.getValue('width'));\n            $('#rbro_text_element_height').val(data.getValue('height'));\n            $('#rbro_text_element_print_if').val(data.getValue('printIf'));\n            $('#rbro_text_element_pattern').val(data.getValue('pattern'));\n            if (!(data instanceof TableTextElement)) {\n                $('#rbro_text_element_position_x').val(data.getValue('x'));\n                $('#rbro_text_element_position_y').val(data.getValue('y'));\n                $('#rbro_text_element_remove_empty_element').prop('checked', data.getValue('removeEmptyElement'));\n                $('#rbro_text_element_always_print_on_same_page').prop('checked', data.getValue('alwaysPrintOnSamePage'));\n                $('#rbro_text_element_spreadsheet_hide').prop('checked', data.getValue('spreadsheet_hide'));\n                $('#rbro_text_element_spreadsheet_column').val(data.getValue('spreadsheet_column'));\n                $('#rbro_text_element_spreadsheet_colspan').val(data.getValue('spreadsheet_colspan'));\n                $('#rbro_text_element_spreadsheet_add_empty_row').prop('checked', data.getValue('spreadsheet_addEmptyRow'));\n                $('#rbro_text_element_print_if_row').show();\n                $('#rbro_text_element_remove_empty_element_row').show();\n                $('#rbro_text_element_always_print_on_same_page_row').show();\n                $('#rbro_text_element_spreadsheet_hide').show();\n                $('#rbro_text_element_spreadsheet_column').show();\n                $('#rbro_text_element_spreadsheet_colspan').show();\n                $('#rbro_text_element_spreadsheet_header').show();\n                $('#rbro_text_element_spreadsheet_section').show();\n            } else {\n                $('#rbro_text_element_position_x').val(data.getOffsetX());\n                $('#rbro_text_element_remove_empty_element_row').hide();\n                $('#rbro_text_element_always_print_on_same_page_row').hide();\n                let tableBandObj = this.rb.getDataObject(data.parentId);\n                if (tableBandObj !== null && tableBandObj.getValue('bandType') === Band.bandType.header) {\n                    $('#rbro_text_element_print_if_row').show();\n                } else {\n                    $('#rbro_text_element_print_if_row').hide();\n                }\n                $('#rbro_text_element_spreadsheet_hide').hide();\n                $('#rbro_text_element_spreadsheet_column').hide();\n                $('#rbro_text_element_spreadsheet_colspan').hide();\n                $('#rbro_text_element_spreadsheet_header').hide();\n                $('#rbro_text_element_spreadsheet_section').hide();\n            }\n            $('#rbro_text_element_cs_condition').val(data.getValue('cs_condition'));\n\n            $('#rbro_text_element_style_id').val(data.getValue('styleId'));\n            if (data.getValue('styleId') !== '') {\n                $('#rbro_text_element_style_settings').hide();\n            } else {\n                $('#rbro_text_element_style_settings').show();\n            }\n            $('#rbro_text_element_cs_style_id').val(data.getValue('cs_styleId'));\n            if (data.getValue('cs_styleId') != '') {\n                $('#rbro_text_element_cs_style_settings').hide();\n            } else {\n                $('#rbro_text_element_cs_style_settings').show();\n            }\n            if (data.getXTagId() !== '') {\n                $('#rbro_text_element_position_row label').text(this.rb.getLabel('docElementPosition') + ':');\n                $('#rbro_text_element_position_row label').removeClass('rbroDisabled');\n                $('#rbro_text_element_position_x').prop('disabled', false);\n            } else {\n                $('#rbro_text_element_position_row label').text(this.rb.getLabel('docElementPositionX') + ':');\n                $('#rbro_text_element_position_row label').addClass('rbroDisabled');\n                $('#rbro_text_element_position_x').prop('disabled', true);\n            }\n            if (data.getYTagId() !== '') {\n                $('#rbro_text_element_position_y').show();\n            } else {\n                $('#rbro_text_element_position_y').hide();\n            }\n            if (data.getHeightTagId() !== '') {\n                $('#rbro_text_element_size_row label').text(this.rb.getLabel('docElementSize') + ':');\n                $('#rbro_text_element_height').show();\n            } else {\n                $('#rbro_text_element_size_row label').text(this.rb.getLabel('docElementWidth') + ':');\n                $('#rbro_text_element_height').hide();\n            }\n            if (data.hasBorderSettings()) {\n                $('#rbro_text_element_border_div').show();\n                $('#rbro_text_element_cs_border_div').show();\n            } else {\n                $('#rbro_text_element_border_div').hide();\n                $('#rbro_text_element_cs_border_div').hide();\n            }\n            this.selectedObjId = data.getId();\n        } else {\n            $('#rbro_text_element_content').prop('disabled', true);\n            $('#rbro_text_element_eval').prop('disabled', true);\n            $('#rbro_text_element_position_x').prop('disabled', true);\n            $('#rbro_text_element_position_y').prop('disabled', true);\n            $('#rbro_text_element_width').prop('disabled', true);\n            $('#rbro_text_element_height').prop('disabled', true);\n            $('#rbro_text_element_print_if').prop('disabled', true);\n            $('#rbro_text_element_remove_empty_element').prop('disabled', true);\n            $('#rbro_text_element_always_print_on_same_page').prop('disabled', true);\n            $('#rbro_text_element_pattern').prop('disabled', false);\n            $('#rbro_text_element_cs_condition').prop('disabled', true);\n            $('#rbro_text_element_style_id').prop('disabled', true);\n            $('#rbro_text_element_spreadsheet_hide').prop('disabled', true);\n            $('#rbro_text_element_spreadsheet_column').prop('disabled', true);\n            $('#rbro_text_element_spreadsheet_colspan').prop('disabled', true);\n            $('#rbro_text_element_spreadsheet_add_empty_row').prop('disabled', true);\n            this.selectedObjId = null;\n        }\n        StylePanel.updateStyleData(data, 'text_element_', '', DocElement.type.text);\n        StylePanel.updateStyleData(data, 'text_element_cs_', 'cs_', DocElement.type.text);\n\n        this.updateAutosizeInputs();\n        this.updateErrors();\n    }\n\n    /**\n     * Is called when a data object was modified (including new and deleted data objects).\n     * @param {*} obj - new/deleted/modified data object.\n     * @param {String} operation - operation which caused the notification.\n     */\n    notifyEvent(obj, operation) {\n        if (obj instanceof Style) {\n            if (operation === Command.operation.add || operation === Command.operation.move) {\n                this.renderStyleSelect();\n                let selectedObj = this.rb.getDataObject(this.selectedObjId);\n                if (selectedObj !== null) {\n                    $('#rbro_text_element_style_id').val(selectedObj.getValue('styleId'));\n                    $('#rbro_text_element_cs_style_id').val(selectedObj.getValue('cs_styleId'));\n                }\n            } else if (operation === Command.operation.remove) {\n                this.elStyle.find(`option[value='${obj.getId()}']`).remove();\n                this.cs_elStyle.find(`option[value='${obj.getId()}']`).remove();\n            } else if (operation === Command.operation.rename) {\n                this.elStyle.find(`option[value='${obj.getId()}']`).text(obj.getName());\n                this.cs_elStyle.find(`option[value='${obj.getId()}']`).text(obj.getName());\n            }\n            if ($('#rbro_text_element_style_id').val() === '') {\n                $('#rbro_text_element_style_settings').show();\n            } else {\n                $('#rbro_text_element_style_settings').hide();\n            }\n            if ($('#rbro_text_element_cs_style_id').val() === '') {\n                $('#rbro_text_element_cs_style_settings').show();\n            } else {\n                $('#rbro_text_element_cs_style_settings').hide();\n            }\n        }\n    }\n\n    /**\n     * Updates displayed errors of currently selected data object.\n     */\n    updateErrors() {\n        $('#rbro_text_element_panel .rbroFormRow').removeClass('rbroError');\n        $('#rbro_text_element_panel .rbroPanelSection').removeClass('rbroError');\n        $('#rbro_text_element_panel .rbroErrorMessage').text('');\n        let selectedObj = this.rb.getDataObject(this.selectedObjId);\n        if (selectedObj !== null) {\n            for (let error of selectedObj.getErrors()) {\n                let rowId = 'rbro_text_element_' + error.field + '_row';\n                let errorId = 'rbro_text_element_' + error.field + '_error';\n                let errorMsg = this.rb.getLabel(error.msg_key);\n                if (error.info) {\n                    errorMsg = errorMsg.replace('${info}', '<span class=\"rbroErrorMessageInfo\">' + error.info + '</span>');\n                }\n                $('#' + rowId).addClass('rbroError');\n                $('#' + errorId).html(errorMsg);\n                if (error.field === 'print_if' || error.field === 'pattern') {\n                    $('#rbro_text_element_print_header').addClass('rbroError');\n                    if (!$('#rbro_text_element_print_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_text_element_print_header').trigger('click');\n                    }\n                } else if (error.field === 'cs_condition') {\n                    $('#rbro_text_element_cs_header').addClass('rbroError');\n                    if (!$('#rbro_text_element_cs_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_text_element_cs_header').trigger('click');\n                    }\n                } else if (error.field === 'spreadsheet_column' || error.field === 'spreadsheet_colspan') {\n                    $('#rbro_text_element_spreadsheet_header').addClass('rbroError');\n                    if (!$('#rbro_text_element_spreadsheet_header').hasClass('rbroPanelSectionHeaderOpen')) {\n                        $('#rbro_text_element_spreadsheet_header').trigger('click');\n                    }\n                }\n            }\n        }\n    }\n\n    getSelectedObjId() {\n        return this.selectedObjId;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panels/TextElementPanel.js\n// module id = 49\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChhrWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChzjtvhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AC/nzxijlEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5MA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACppPA;;;;;;ACAA;;;;;;ACAA;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrkDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACxlrLA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACrnxgbA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;AC7MA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACpvbhlcsourceRoot":""}